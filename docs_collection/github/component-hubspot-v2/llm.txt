Directory structure:
└── keboola-component-hubspot-v2/
    ├── README.md
    ├── Dockerfile
    ├── LICENSE.md
    ├── TEMPLATE_README.md
    ├── deploy.sh
    ├── docker-compose.yml
    ├── flake8.cfg
    ├── requirements.txt
    ├── component_config/
    │   ├── component_long_description.md
    │   ├── component_short_description.md
    │   ├── configRowSchema.json
    │   ├── configSchema.json
    │   ├── configuration_description.md
    │   ├── documentationUrl.md
    │   ├── licenseUrl.md
    │   ├── logger
    │   ├── loggerConfiguration.json
    │   ├── sourceCodeUrl.md
    │   └── sample-config/
    │       ├── config.json
    │       ├── in/
    │       │   ├── state.json
    │       │   ├── files/
    │       │   │   └── order1.xml
    │       │   └── tables/
    │       │       ├── test.csv
    │       │       └── test.csv.manifest
    │       └── out/
    │           ├── files/
    │           │   └── order1.xml
    │           └── tables/
    │               └── test.csv
    ├── docs/
    │   └── imgs/
    ├── scripts/
    │   ├── build_n_run.ps1
    │   ├── build_n_test.sh
    │   ├── run.bat
    │   ├── run_kbc_tests.ps1
    │   ├── update_dev_portal_properties.sh
    │   └── developer_portal/
    │       ├── fn_actions_md_update.sh
    │       └── update_properties.sh
    ├── src/
    │   ├── component.py
    │   ├── configuration.py
    │   ├── json_parser.py
    │   ├── table_handler.py
    │   ├── client/
    │   │   ├── __init__.py
    │   │   └── client.py
    │   └── schemas/
    │       ├── association.json
    │       ├── campaign.json
    │       ├── contact_list.json
    │       ├── email_event.json
    │       ├── email_statistic.json
    │       ├── form.json
    │       ├── owner.json
    │       ├── pipeline.json
    │       ├── pipeline_stage.json
    │       └── property_history.json
    ├── tests/
    │   ├── __init__.py
    │   ├── test_component.py
    │   └── test_parser.py
    └── .github/
        └── workflows/
            └── push.yml

================================================
File: README.md
================================================
# Hubspot Extractor

The HubSpot CRM helps companies grow traffic, convert leads, get insights to close more deals, etc.

This component uses the HubSpot API to extract data of the CRM and Marketing objects from Hubspot

**Table of contents:**

[TOC]

## Prerequisites

You need to create
a [Private App](https://developers.hubspot.com/docs/api/migrate-an-api-key-integration-to-a-private-app)
in your account and enable all following scopes:

* crm.lists.read
* crm.objects.companies.read
* crm.objects.contacts.read
* crm.objects.deals.read
* crm.objects.line_items.read
* crm.objects.marketing_events.read
* crm.objects.owners.read
* crm.objects.quotes.read
* crm.schemas.contacts.read
* crm.schemas.companies.read
* crm.schemas.custom.read
* crm.schemas.deals.read
* crm.schemas.line_items.read
* crm.schemas.quotes.read
* e-commerce
* tickets
* timeline
* forms
* content
* sales-email-read

## Supported Endpoints

The following endpoints are downloadable via this component :

* Campaigns
* Companies
* Contacts
* Contact Lists
* Deals
* Line Items
* Email Events
* Marketing Email Statistics
* Forms
* Engagements :
    * Calls
    * Emails
    * Notes
    * Meetings
    * Tasks
* Owners
* Pipelines
* Products
* Quotes
* Tickets

If you need more endpoints, please submit your request to
[ideas.keboola.com](https://ideas.keboola.com/)

#### Custom Objects
Custom object is available for enterprise licence. You can specify the custom object type you want to download using the `custom_object_types` input.


## Additional Endpoint Options

### Additional properties

Additional properties are available for fetching for the following CRM objects :

* Companies
* Contacts
* Deals
* Line Items
* Calls
* Emails
* Notes
* Meetings
* Tasks
* Products
* Quotes
* Tickets
* Custom Objects (only all properties)

You can select which properties you want to fetch for each of the above CRM object using the **Property Fetch Mode**
by selecting, **all**, **base**, or **custom**. If you select **all**, then all available properties for each object
will be downloaded.
If you select **base**, then only the base properties are downloaded.
If you select **custom**, then you can specify a string of a comma separated list of properties you wish to download for
each object using the "{{object_name}}_properties" input.


### Email event types

When downloading email events you can specify a comma separated list of the following event
types : ["DEFERRED","CLICK","DROPPED","DELIVERED","PROCESSED","OPEN","BOUNCE","SENT"]

## Configuration

* Private App Token (#private_app_token) : str : Your PAT, see how to create one in the prerequisites
  section
* Endpoints (endpoints) : boolean : value indicating whether the endpoint should be fetched
    * Campaign (campaign) : bool
    * Contact (contact) : bool
    * Company (company) : bool
    * Custom Object (custom_object) : bool
    * Deal (deal) : bool
    * Line Item (line_item) : bool
    * Quote (quote) : bool
    * Product (product) : bool
    * Owner (owner) : bool
    * Ticket (ticket) : bool
    * Contact List (contact_list) : bool
    * Email Event (email_event) : bool
    * Form (form) : bool
    * Pipeline (pipeline) : bool
    * Note (note) : bool
    * Call (call) : bool
    * Task (task) : bool
    * Meeting (meeting) : bool
    * Email (email) : bool
    * Email Statistic (email_statistic) : bool
* Additional Properties (additional_properties) :
    * Fetch Property History (fetch_property_history) : bool
    * Email Event Types (email_event_types) : Union[str, list[str]]
    * Contact Properties (contact_properties) : Union[str, list[str]]
    * Contact Property History (contact_property_history) : Union[str, list[str]]
    * Company Properties (company_properties) : Union[str, list[str]]
    * Company Property History (company_property_history) : Union[str, list[str]]
    * Deal Properties (deal_properties) : Union[str, list[str]]
    * Deal Property History (deal_property_history) : Union[str, list[str]]
    * Line Item Properties (line_item_properties) : Union[str, list[str]]
    * Line Item Property History (line_item_property_history) : Union[str, list[str]]
    * Product Properties (product_properties) : Union[str, list[str]]
    * Product Property History (product_property_history) : Union[str, list[str]]
    * Ticket Properties (ticket_properties) : Union[str, list[str]]
    * Ticket Property History (ticket_property_history) : Union[str, list[str]]
    * Quote Properties (quote_properties) : Union[str, list[str]]
    * Quote Property History (quote_property_history) : Union[str, list[str]]
    * Call Properties (call_properties) : Union[str, list[str]]
    * Call Property History (call_property_history) : Union[str, list[str]]
    * Email Properties (email_properties) : Union[str, list[str]]
    * Email Property History (email_property_history) : Union[str, list[str]]
    * Meeting Properties (meeting_properties) : Union[str, list[str]]
    * Meeting Property History (meeting_property_history) : Union[str, list[str]]
    * Note Properties (note_properties) : Union[str, list[str]]
    * Note Property History (note_property_history) : Union[str, list[str]]
    * Task Properties (task_properties) : Union[str, list[str]]
    * Task Property History (task_property_history) : Union[str, list[str]]
    * Object Properties (object_properties) : object_properties
    * Custom Object Types  (custom_object_types) : Union[str, list[str]]
* Associations (associations) : list
* Fetch Settings (fetch_settings) :
    * Archived (archived) : bool
    * Fetch Mode (fetch_mode) : fetch_mode
    * Date From (date_from) : str
* Destination Settings (destination_settings) :
    * Load Mode (load_mode) : load_mode
* Override Parser Depth (override_parser_depth) : Optional[int]

### Object Properties (object_properties) values

    * all
    * base
    * custom

### Fetch Mode (fetch_mode) values

    * full_fetch
    * incremental_fetch

### Load Mode (load_mode) values

    * full_load
    * incremental_load

### Sample Configuration

```json
{
  "parameters": {
    "#private_app_token": "YOUR_PAT",
    "endpoints": {
      "contact": true,
      "pipeline": true,
      "form": true,
      "task": true,
      "deal_line_item": true,
      "deal": true,
      "ticket": true,
      "email_statistic": true,
      "product": true,
      "campaign": true,
      "note": true,
      "owner": true,
      "email_event": true,
      "meeting": true,
      "quote": true,
      "email": true,
      "company": true,
      "contact_list": true,
      "call": true,
      "custom_object": true
    },
    "associations": [
      {
        "to_object": "meeting",
        "from_object": "contact"
      }
    ],
    "fetch_settings": {
      "archived": false,
      "fetch_mode": "full_fetch"
    },
    "destination_settings": {
      "load_mode": "incremental_load"
    },
    "additional_properties": {
      "custom_object_types": ["my_custom_object_type"],
      "object_properties": "custom",
      "email_event_types": [
        "DEFERRED",
        "CLICK",
        "DROPPED",
        "DELIVERED",
        "PROCESSED",
        "OPEN",
        "BOUNCE",
        "SENT"
      ],
      "note_properties": "hs_object_id, hs_body_preview, hs_engagement_source, hs_created_by_user_id, hs_modified_by, hs_engagement_source_id, hs_user_ids_of_all_owners",
      "product_properties": "amount, description, discount, hs_sku, hs_url, hubspot_owner_id, name, price, quantity, recurringbillingfrequency, tax",
      "ticket_properties": "hs_object_id, hs_created_by_user_id, closed_date, created_by, createdate, hs_lastactivitydate, hs_pipeline, hs_resolution, hs_ticket_id, hs_ticket_priority",
      "deal_properties": "point_of_contact, product_of_interest, dealname, amount, dealstage, pipeline, closedate, hs_lastmodifieddate,hs_createdate, createdate, hs_deal_stage_probability, hs_deal_stage_probability_shadow, hs_object_id, amount_in_home_currency, days_to_close, hs_exchange_rate, hs_forecast_amount, hs_forecast_probability, hs_is_closed, hs_is_closed_won, hs_is_deal_split, hs_mrr, hs_projected_amount, hs_projected_amount_in_home_currency",
      "company_hidden": "true",
      "task_properties": "hs_object_id, hs_task_subject, hs_task_type, hs_body_preview, hs_created_by_user_id, hs_engagement_source, hs_task_for_object_type, hs_task_last_contact_outreach, hs_task_last_sales_activity_timestamp, hs_task_priority, hs_task_send_default_reminder, hs_task_status",
      "contact_properties": "hs_facebookid, hs_linkedinid, ip_city, ip_country, ip_country_code, newsletter_opt_in, firstname, linkedin_profile, lastname, email, mobilephone, phone, city, country, region, jobtitle, company, website, numemployees, industry, associatedcompanyid, hs_lead_status, lastmodifieddate, source, hs_email_optout, twitterhandle, lead_type, hubspot_owner_id, notes_last_updated, hs_analytics_source, opt_in, createdate, hs_twitterid, lifecyclestage",
      "call_properties": "hs_call_title, hs_call_status, hs_createdate, hs_lastmodifieddate, hs_object_id, hs_body_preview, hs_created_by, hs_created_by_user_id, hs_engagement_source, hubspot_owner_idm, hs_user_ids_of_all_owners",
      "line_item_properties": "name, price, quantity, createdate, hs_object_id, amount, hs_acv, hs_arr, hs_created_by_user_id, hs_margin, hs_margin_acv, hs_margin_arr, hs_margin_mrr, hs_margin_tcv, hs_mrr, hs_position_on_quote, hs_pre_discount_amount, hs_total_discount, hs_updated_by_user_id",
      "company_properties": "about_us, name, phone, facebook_company_page, city, country, website, industry, annualrevenue, linkedin_company_page, hs_lastmodifieddate, hubspot_owner_id, notes_last_updated, description, createdate, numberofemployees, hs_lead_status, founded_year, twitterhandle, linkedinbio",
      "email_properties": "hubspot_owner_id, hubspot_team_id, hubspot_owner_assigneddate, hs_created_by, hs_createdate, hs_email_bcc_email, hs_email_bcc_firstname, hs_email_bcc_lastname, hs_email_cc_email, hs_email_cc_firstname, hs_email_cc_lastname, hs_email_from_email, hs_email_from_firstname, hs_email_from_lastname, hs_email_headers",
      "quote_properties": "hs_quote_number, hs_object_id, hs_allowed_payment_methods, hs_collect_billing_address, hs_created_by_user_id, hs_language, hs_locale, hs_payment_status, hs_quote_total_preference, hs_template_type, hs_test_mode, hs_sender_firstname, hs_title, hs_expiration_date, hs_quote_amount, hs_status",
      "meeting_properties": "hubspot_owner_id, hs_user_ids_of_all_owners, hs_meeting_start_time,hs_meeting_end_time, hs_body_preview_is_truncated, hs_created_by, hs_created_by_user_id, hs_engagement_source, hs_createdate, hs_lastmodifieddate, hs_object_id, hs_timestamp"
    }
  },
  "action": "run"
}

```

## Output

The component outputs each of the crm objects into their separate table. E.g. Contact data is saved into contact.csv

Development
-----------

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to
your custom path in the `docker-compose.yml` file:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Clone this repository, init the workspace and run the component with following
command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
git clone https://bitbucket.org/kds_consulting_team/kds-team.ex-hubspot-v2/src/master/ kds-team.ex-hubspot-v2
cd kds-team.ex-hubspot-v2
docker-compose build
docker-compose run --rm dev
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Run the test suite and lint check using this command:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker-compose run --rm test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Integration
===========

For information about deployment and integration with KBC, please refer to the
[deployment section of developers
documentation](https://developers.keboola.com/extend/component/deployment/)



================================================
File: Dockerfile
================================================
FROM python:3.11-slim
ENV PYTHONIOENCODING utf-8

COPY /src /code/src/
COPY /tests /code/tests/
COPY /scripts /code/scripts/
COPY requirements.txt /code/requirements.txt
COPY flake8.cfg /code/flake8.cfg
COPY deploy.sh /code/deploy.sh

# install gcc to be able to build packages - e.g. required by regex, dateparser, also required for pandas
RUN apt-get update && apt-get install -y build-essential

RUN pip install flake8

RUN pip install -r /code/requirements.txt

WORKDIR /code/


CMD ["python", "-u", "/code/src/component.py"]



================================================
File: LICENSE.md
================================================
The MIT License (MIT)

Copyright (c) 2018 Keboola DS, http://keboola.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files, to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


================================================
File: TEMPLATE_README.md
================================================
# KBC Component Python template

Python template for KBC Component creation. Defines the default structure and all Bitbucket pipeline CI scripts for automatic deployment.

Use as a starting point when creating a new component.

Example uses [keboola.component](https://pypi.org/project/keboola.component) library providing useful methods for KBC related tasks 
and boilerplate methods often needed by components, for more details see [documentation](https://github.com/keboola/python-component/blob/main/README.md)

*NOTE: Previously the template was based on top of the deprecated [keboola-python-util-lib library](https://bitbucket.org/kds_consulting_team/keboola-python-util-lib/src/master/)*

**Table of contents:**  
  
[TOC]

# Recommended component architecture
It is recommended to use the [keboola.component library](https://pypi.org/project/keboola.component), 
for each component. Major advantage is that it reduces the boilerplate code replication, the developer can focus on core component logic 
and not on boilerplate tasks. If anything is missing in the library, please fork and create a pull request with additional changes, 
so we can all benefit from it

**Base components on [CommonInterface](https://htmlpreview.github.io/?https://raw.githubusercontent.com/keboola/python-component/main/docs/api-html/component/interface.html#keboola.component.interface.CommonInterface)**

- No need to write configuration processing and validation code each time
- No need to setup logging environment manually
- No need to write code to store manifests, write statefile, retrieve dates based on relative period, and many more.
- The main focus can be the core component logic, which increases the code readability for new comers.

**Base Client on [HtttpClient](https://pypi.org/project/keboola.http-client/)**

- No need to write HTTP request handling over and over again
- Covers basic authentication, retry strategy, headers, default parameters


## Architecture using the template

![picture](docs/imgs/architecture.png)

## Example component
This template contains functional example of an [hello-world component](https://bitbucket.org/kds_consulting_team/kbc-python-template/src/master/src/component.py), 
it can be run with [sample configuration](https://bitbucket.org/kds_consulting_team/kbc-python-template/src/master/data/) and it produces valid results. 
It is advisable to use this structure as a base for new components. Especially the `component.py` module, which should only 
contain the base logic necessary for communication with KBC interface, processing parameters, collecting results
 and calling targeted API service methods. 


# Creating a new component
Clone this repository into new folder and remove git history
```bash
git clone https://bitbucket.org/kds_consulting_team/kbc-python-template.git my-new-component
cd my-new-component
rm -rf .git
git init
git remote add origin PATH_TO_YOUR_BB_REPO
git add .
git commit -m 'initial'
git push -u origin master
```

**Method #2:**

Copy the contents of the template folder into your clone empty repository

```bash
git clone PATH_TO_YOUR_BB_REPO my-new-component
# now copy the contents of the template into the my-new-component dir
cd my-new-component
git add .
git commit -m 'initial'
git push -u origin master
```

# Setting up the CI
 - Bitbucket: Enable [pipelines](https://confluence.atlassian.com/bitbucket/get-started-with-bitbucket-pipelines-792298921.html) in the repository.
    - For Github: Check that the [workflows are enabled](https://docs.github.com/en/actions/managing-workflow-runs/disabling-and-enabling-a-workflow).
    The actions are present in `.github/workflows/` folder. 
 - Set `KBC_DEVELOPERPORTAL_APP` env variable (dev portal app id)
 
 In case it is not set on the account level, set also other required dev portal env variables:
 
 - `KBC_DEVELOPERPORTAL_PASSWORD` - service account password
 - `KBC_DEVELOPERPORTAL_USERNAME` - service account username
 - `KBC_DEVELOPERPORTAL_VENDOR` - dev portal vendor
 - `KBC_STORAGE_TOKEN` - (optional) in case you wish to run KBC automated tests
  
 
 ![picture](docs/imgs/ci_variable.png)
 
The script execution is defined in three stages:

## Default stage
This script is executed on push to any branch except the master branch. It executes basic build and code quality steps. Following steps are performed:
Build docker image
Execute flake8 lint tests
Execute python unittest
(Optional) Push image with tag :test into the AWS repository for manual testing in KBC
If any of the above steps results in non 0 status, the build will fail. It is impossible to merge branches that fail to build into the master branch.

## Master stage
This script is executed on any push or change in the master branch. It performs every step as the default stage. Additionally, 
the `./scripts/update_dev_portal_properties.sh` script is executed. 
This script propagates all changes in the Component configuration files (component_config folder) to the Developer portal.
Currently these Dev Portal configuration parameters are supported:

 - `configSchema.json`
 - `configRowSchema.json`
 - `component_short_description.md`
 - `component_long_description.md`    

The choice to include this script directly in the master branch was made to simplify ad-hoc changes of the component configuration parameters. For instance if you wish to slightly modify the configuration schema without affecting the code itself, it is possible to simply push the changes directly into the master and these will be automatically propagated to the production without rebuilding the image itself. Solely Developer Portal configuration metadata is deployed at this stage.

## Tagged commit stage
Whenever a tagged commit is added, or tag created this script gets executed. This is a deployment phase, so a successful build results in new code being deployed in KBC production.
At this stage all steps present in the default and master stage are executed. Additionally, 
`deploy.sh` script that pushes the newly built image / tag into the ECR repository and KBC production is executed.
The deploy script is executed only after all tests and proper build steps passed. 
Moreover, the `deploy.sh` script will be executed **only in the master branch**. In other words if you create a tagged commit in another branch, the pipeline gets triggered but deployment script will fail, because it is not triggered within a master branch. This is to prevent accidental deployment from a feature branch.

 
# GELF logging

The template automatically chooses between STDOUT and GELF logger based on the Developer Portal configuration.

To fully leverage the benefits such as outputting the `Stack Trace` into the log event detail (available by clicking on the log event) 
log exceptions using `logger.exception(ex)`.

**TIP:** When the logger verbosity is set to `verbose` you may leverage `extra` fields to log the detailed message in the detail of the log event by adding extra fields to you messages:

```python
logging.error(f'{error}. See log detail for full query. ',
                         extra={"failed_query": json.dumps(query)})
```

Recommended [GELF logger setup](https://developers.keboola.com/extend/common-interface/logging/#setting-up) (Developer Portal) to allow debug mode logging:

```json
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}
``` 
 
# Development
 
This example contains runnable container with simple unittest. For local testing it is useful to include `data` folder in the root
and use docker-compose commands to run the container or execute tests. 

If required, change local data folder (the `CUSTOM_FOLDER` placeholder) path to your custom path:
```yaml
    volumes:
      - ./:/code
      - ./CUSTOM_FOLDER:/data
```

Clone this repository, init the workspace and run the component with following command:

```
git clone https://bitbucket.org:kds_consulting_team/kbc-python-template.git my-new-component
cd my-new-component
docker-compose build
docker-compose run --rm dev
```

Run the test suite and lint check using this command:

```
docker-compose run --rm test
```

## Testing

The preset pipeline scripts contain sections allowing pushing testing image into the ECR repository and automatic 
testing in a dedicated project. These sections are by default commented out. 

**Running KBC tests on deploy step, before deployment**

Uncomment following section in the deployment step in `bitbucket-pipelines.yml` file:

```yaml
            # push test image to ECR - uncomment when initialised
            # - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
            # - docker tag $APP_IMAGE:latest $REPOSITORY:test
            # - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
            # - docker push $REPOSITORY:test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP BASE_KBC_CONFIG test
            # - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP KBC_CONFIG_1 test
            - ./scripts/update_dev_portal_properties.sh
            - ./deploy.sh
```

Make sure that you have `KBC_STORAGE_TOKEN` env. variable set, containing appropriate storage token with access 
to your KBC project. Also make sure to create a functional testing configuration and replace the `BASE_KBC_CONFIG` placeholder with its id.

**Pushing testing image for manual KBC tests**

In some cases you may wish to execute a testing version of your component manually prior to publishing. For instance to test various
configurations on it. For that it may be convenient to push the `test` image on every push either to master, or any branch.

To achieve that simply uncomment appropriate sections in `bitbucket-pipelines.yml` file, either in master branch step or in `default` step.

```yaml
            # push test image to ecr - uncomment for testing before deployment
#            - echo 'Pushing test image to repo. [tag=test]'
#            - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
#            - docker tag $APP_IMAGE:latest $REPOSITORY:test
#            - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
#            - docker push $REPOSITORY:test
```
 
 Once the build is finished, you may run such configuration in any KBC project as many times as you want by using [run-job](https://kebooladocker.docs.apiary.io/#reference/run/create-a-job-with-image/run-job) API call, using the `test` image tag.

# Integration

For information about deployment and integration with KBC, please refer to the [deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/) 


================================================
File: deploy.sh
================================================
#!/bin/sh
set -e

env

# compatibility with travis and bitbucket
if [ ! -z ${BITBUCKET_TAG} ]
then
	echo "assigning bitbucket tag"
	export TAG="$BITBUCKET_TAG"
elif [ ! -z ${TRAVIS_TAG} ]
then
	echo "assigning travis tag"
	export TAG="$TRAVIS_TAG"
elif [ ! -z ${GITHUB_TAG} ]
then
	echo "assigning github tag"
	export TAG="$GITHUB_TAG"
else
	echo No Tag is set!
	exit 1
fi

echo "Tag is '${TAG}'"

#check if deployment is triggered only in master
if [ ${BITBUCKET_BRANCH} != "master" ]; then
               echo Deploy on tagged commit can be only executed in master!
               exit 1
fi

# Obtain the component repository and log in
echo "Obtain the component repository and log in"
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

echo "Set credentials"
eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
echo "Push to the repository"
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TAG} is not allowed."
fi



================================================
File: docker-compose.yml
================================================
version: "2"
services:
  # for development purposes
  dev:
    build: .
    volumes:
        - ./:/code
        - ./data:/data
    environment:
      - KBC_DATADIR=./data
  test:
    # Use to run flake8 and unittests checks
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - KBC_DATADIR=./data
    command:
      - /bin/sh
      - /code/scripts/build_n_test.sh


================================================
File: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    example
    venv
max-line-length = 120

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting



================================================
File: requirements.txt
================================================
keboola.component==1.6.8
keboola.utils
keboola.http-client==1.0.0
keboola.csvwriter==1.0.1
mock~=4.0.3
freezegun~=1.2.2
hubspot-api-client==11.0.0
requests~=2.32.0
urllib3~=1.26.12
dateparser==1.1.8
retry==0.9.2
# https://github.com/bakobako/dataconf/zipball/main#egg=dataconf
dataconf~=3.3.0


================================================
File: component_config/component_long_description.md
================================================
This component uses the HubSpot API to extract data of the CRM objects from Hubspot


================================================
File: component_config/component_short_description.md
================================================
The HubSpot CRM helps companies grow traffic, convert leads, get insights to close more deals, etc


================================================
File: component_config/configRowSchema.json
================================================
{
    "type": "object",
    "title": "Configuration",
    "id": "rootschema",
    "required": [
        "endpoints",
        "additional_properties",
        "associations",
        "fetch_settings",
        "destination_settings"
    ],
    "properties": {
        "endpoints": {
            "type": "object",
            "title": "Endpoints",
            "format": "grid-strict",
            "propertyOrder": 10,
            "properties": {
                "campaign": {
                    "title": "Campaign",
                    "format": "checkbox",
                    "type": "boolean",
                    "default": true,
                    "options": {
                        "grid_columns": 3
                    }
                },
                "contact": {
                    "title": "Contact",
                    "format": "checkbox",
                    "type": "boolean",
                    "default": true,
                    "options": {
                        "grid_columns": 3
                    }
                },
                "company": {
                    "title": "Company",
                    "format": "checkbox",
                    "type": "boolean",
                    "default": true,
                    "options": {
                        "grid_columns": 3
                    }
                },
                "deal": {
                    "title": "Deal",
                    "format": "checkbox",
                    "type": "boolean",
                    "default": true,
                    "options": {
                        "grid_columns": 3
                    }
                },
                "line_item": {
                    "title": "Line item",
                    "format": "checkbox",
                    "type": "boolean",
                    "default": true,
                    "options": {
                        "grid_columns": 3
                    }
                },
                "quote": {
                    "title": "Quote",
                    "format": "checkbox",
                    "type": "boolean",
                    "default": true,
                    "options": {
                        "grid_columns": 3
                    }
                },
                "product": {
                    "title": "Product",
                    "format": "checkbox",
                    "type": "boolean",
                    "default": true,
                    "options": {
                        "grid_columns": 3
                    }
                },
                "owner": {
                    "title": "Owner",
                    "format": "checkbox",
                    "type": "boolean",
                    "default": true,
                    "options": {
                        "grid_columns": 3
                    }
                },
                "ticket": {
                    "title": "Ticket",
                    "format": "checkbox",
                    "type": "boolean",
                    "default": true,
                    "options": {
                        "grid_columns": 3
                    }
                },
                "contact_list": {
                    "title": "Contact list",
                    "format": "checkbox",
                    "type": "boolean",
                    "default": true,
                    "options": {
                        "grid_columns": 3
                    }
                },
                "email_event": {
                    "title": "Email event",
                    "format": "checkbox",
                    "type": "boolean",
                    "default": true,
                    "options": {
                        "grid_columns": 3
                    }
                },
                "form": {
                    "title": "Form",
                    "format": "checkbox",
                    "type": "boolean",
                    "default": true,
                    "options": {
                        "grid_columns": 3
                    }
                },
                "pipeline": {
                    "title": "Pipeline",
                    "format": "checkbox",
                    "type": "boolean",
                    "default": true,
                    "options": {
                        "grid_columns": 3
                    }
                },
                "note": {
                    "title": "Note",
                    "format": "checkbox",
                    "type": "boolean",
                    "default": true,
                    "options": {
                        "grid_columns": 3
                    }
                },
                "call": {
                    "title": "Call",
                    "format": "checkbox",
                    "type": "boolean",
                    "default": true,
                    "options": {
                        "grid_columns": 3
                    }
                },
                "task": {
                    "title": "Task",
                    "format": "checkbox",
                    "type": "boolean",
                    "default": true,
                    "options": {
                        "grid_columns": 3
                    }
                },
                "meeting": {
                    "title": "Meeting",
                    "format": "checkbox",
                    "type": "boolean",
                    "default": true,
                    "options": {
                        "grid_columns": 3
                    }
                },
                "email": {
                    "title": "Email",
                    "format": "checkbox",
                    "type": "boolean",
                    "default": true,
                    "options": {
                        "grid_columns": 3
                    }
                },
                "email_statistic": {
                    "title": "Email statistic",
                    "format": "checkbox",
                    "type": "boolean",
                    "default": true,
                    "options": {
                        "grid_columns": 3
                    }
                },
                "custom_object": {
                    "title": "Custom object",
                    "format": "checkbox",
                    "type": "boolean",
                    "default": false,
                    "options": {
                        "grid_columns": 3
                    }
                }
            }
        },
        "additional_properties": {
            "title": "Object Properties",
            "type": "object",
            "propertyOrder": 20,
            "properties": {
                "object_properties": {
                    "title": "Property Fetch Mode",
                    "propertyOrder": 10,
                    "required": true,
                    "type": "string",
                    "enum": [
                        "all",
                        "base",
                        "custom"
                    ],
                    "options": {
                        "enum_titles": [
                            "Fetch All Properties",
                            "Fetch Base Properties",
                            "Fetch Custom Properties"
                        ]
                    },
                    "default": "base"
                },
                "fetch_property_history": {
                    "type": "boolean",
                    "title": "Fetch Property History",
                    "format": "checkbox",
                    "default": false,
                    "options": {
                        "dependencies": {
                            "object_properties": "custom"
                        }
                    },
                    "description": "If set, property histories of all properties will be fetched",
                    "propertyOrder": 12
                },
                "email_event_types": {
                    "type": "array",
                    "title": "Email Event Types",
                    "format": "checkbox",
                    "uniqueItems": true,
                    "description": "Select which event types you want to fetch data for",
                    "propertyOrder": 15,
                    "options": {
                        "dependencies": {
                            "email_event_hidden": "true"
                        }
                    },
                    "items": {
                        "type": "string",
                        "enum": [
                            "DEFERRED",
                            "CLICK",
                            "DROPPED",
                            "DELIVERED",
                            "PROCESSED",
                            "OPEN",
                            "BOUNCE",
                            "SENT"
                        ],
                        "options": {
                            "enum_titles": [
                                "Deferred",
                                "Click",
                                "Dropped",
                                "Delivered",
                                "Processed",
                                "Open",
                                "Bounce",
                                "Sent"
                            ]
                        }
                    },
                    "default": [
                        "DEFERRED",
                        "CLICK",
                        "DROPPED",
                        "DELIVERED",
                        "PROCESSED",
                        "OPEN",
                        "BOUNCE",
                        "SENT"
                    ]
                },
                "custom_object_types": {
                    "title": "Custom Object IDs",
                    "description": "Add custom object Ids",
                    "propertyOrder": 13,
                    "type": "array",
                    "format": "select",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    },
                    "options": {
                        "tags": true,
                        "dependencies": {
                            "custom_object_event_hidden": "true"
                        }
                    }
                },
                "contact_properties": {
                    "type": "array",
                    "format": "select",
                    "items": {
                        "enum": [],
                        "type": "string"
                    },
                    "title": "Contact - Additional Properties",
                    "default": [
                        "hs_facebookid",
                        "hs_linkedinid",
                        "ip_city",
                        "ip_country",
                        "ip_country_code",
                        "newsletter_opt_in",
                        "firstname",
                        "linkedin_profile",
                        "lastname",
                        "email",
                        "mobilephone",
                        "phone",
                        "city",
                        "country",
                        "region",
                        "jobtitle",
                        "company",
                        "website",
                        "numemployees",
                        "industry",
                        "associatedcompanyid",
                        "hs_lead_status",
                        "lastmodifieddate",
                        "source",
                        "hs_email_optout",
                        "twitterhandle",
                        "lead_type",
                        "hubspot_owner_id",
                        "notes_last_updated",
                        "hs_analytics_source",
                        "opt_in",
                        "createdate",
                        "hs_twitterid",
                        "lifecyclestage"
                    ],
                    "options": {
                        "dependencies": {
                            "object_properties": "custom",
                            "contact_hidden": "true"
                        },
                        "async": {
                            "label": "Re-load properties",
                            "action": "loadContactProperties"
                        }
                    },
                    "description": "Comma separated list of Contact properties. The values must match valid Contact properties, otherwise an empty value is returned. If left empty, default properties will be fetched.",
                    "uniqueItems": true,
                    "propertyOrder": 20
                },
                "contact_property_history": {
                    "title": "Contact - Property Histories",
                    "type": "array",
                    "propertyOrder": 21,
                    "format": "select",
                    "uniqueItems": true,
                    "items": {
                        "type": "string",
                        "watch": {
                            "dim": "additional_properties.contact_properties"
                        },
                        "enumSource": "dim"
                    },
                    "options": {
                        "dependencies": {
                            "fetch_property_history": true,
                            "contact_hidden": "true"
                        }
                    }
                },
                "company_properties": {
                    "type": "array",
                    "format": "select",
                    "items": {
                        "enum": [],
                        "type": "string"
                    },
                    "title": "Company - Additional Properties",
                    "default": [
                        "about_us",
                        "name",
                        "phone",
                        "facebook_company_page",
                        "city",
                        "country",
                        "website",
                        "industry",
                        "annualrevenue",
                        "linkedin_company_page",
                        "hs_lastmodifieddate",
                        "hubspot_owner_id",
                        "notes_last_updated",
                        "description",
                        "createdate",
                        "numberofemployees",
                        "hs_lead_status",
                        "founded_year",
                        "twitterhandle",
                        "linkedinbio"
                    ],
                    "options": {
                        "dependencies": {
                            "object_properties": "custom",
                            "company_hidden": "true"
                        },
                        "async": {
                            "label": "Re-load properties",
                            "action": "loadCompanyProperties"
                        }
                    },
                    "description": "Comma separated list of Company properties. The values must match valid Company properties, otherwise an empty value is returned. If left empty, default properties will be fetched.",
                    "uniqueItems": true,
                    "propertyOrder": 30
                },
                "company_property_history": {
                    "title": "Company - Property Histories",
                    "type": "array",
                    "propertyOrder": 31,
                    "format": "select",
                    "uniqueItems": true,
                    "items": {
                        "type": "string",
                        "watch": {
                            "dim": "additional_properties.company_properties"
                        },
                        "enumSource": "dim"
                    },
                    "options": {
                        "dependencies": {
                            "fetch_property_history": true,
                            "company_hidden": "true"
                        }
                    }
                },
                "deal_properties": {
                    "type": "array",
                    "format": "select",
                    "items": {
                        "enum": [],
                        "type": "string"
                    },
                    "title": "Deal - Additional Properties",
                    "default": [
                        "point_of_contact",
                        "product_of_interest",
                        "dealname",
                        "amount",
                        "dealstage",
                        "pipeline",
                        "closedate",
                        "hs_lastmodifieddate",
                        "hs_createdate",
                        "createdate",
                        "hs_deal_stage_probability",
                        "hs_deal_stage_probability_shadow",
                        "hs_object_id",
                        "amount_in_home_currency",
                        "days_to_close",
                        "hs_exchange_rate",
                        "hs_forecast_amount",
                        "hs_forecast_probability",
                        "hs_is_closed",
                        "hs_is_closed_won",
                        "hs_is_deal_split",
                        "hs_mrr",
                        "hs_projected_amount",
                        "hs_projected_amount_in_home_currency"
                    ],
                    "options": {
                        "dependencies": {
                            "object_properties": "custom",
                            "deal_hidden": "true"
                        },
                        "async": {
                            "label": "Re-load properties",
                            "action": "loadDealProperties"
                        }
                    },
                    "description": "Comma separated list of Deal properties. The values must match valid Deal properties, otherwise an empty value is returned. If left empty, default properties will be fetched.",
                    "uniqueItems": true,
                    "propertyOrder": 40
                },
                "deal_property_history": {
                    "title": "Deal - Property Histories",
                    "type": "array",
                    "propertyOrder": 41,
                    "format": "select",
                    "uniqueItems": true,
                    "items": {
                        "type": "string",
                        "watch": {
                            "dim": "additional_properties.deal_properties"
                        },
                        "enumSource": "dim"
                    },
                    "options": {
                        "dependencies": {
                            "fetch_property_history": true,
                            "deal_hidden": "true"
                        }
                    }
                },
                "line_item_properties": {
                    "type": "array",
                    "format": "select",
                    "items": {
                        "enum": [],
                        "type": "string"
                    },
                    "title": "Line Item - Additional Properties",
                    "default": [
                        "name",
                        "price",
                        "quantity",
                        "createdate",
                        "hs_object_id",
                        "amount",
                        "hs_acv",
                        "hs_arr",
                        "hs_created_by_user_id",
                        "hs_margin",
                        "hs_margin_acv",
                        "hs_margin_arr",
                        "hs_margin_mrr",
                        "hs_margin_tcv",
                        "hs_mrr",
                        "hs_position_on_quote",
                        "hs_pre_discount_amount",
                        "hs_total_discount",
                        "hs_updated_by_user_id"
                    ],
                    "options": {
                        "dependencies": {
                            "object_properties": "custom",
                            "line_item_hidden": "true"
                        },
                        "async": {
                            "label": "Re-load properties",
                            "action": "loadLineItemProperties"
                        }
                    },
                    "description": "Comma separated list of Line Item properties. The values must match valid Line Item properties, otherwise an empty value is returned. If left empty, default properties will be fetched.",
                    "uniqueItems": true,
                    "propertyOrder": 50
                },
                "line_item_property_history": {
                    "title": "Line Item - Property Histories",
                    "type": "array",
                    "propertyOrder": 51,
                    "format": "select",
                    "uniqueItems": true,
                    "items": {
                        "type": "string",
                        "watch": {
                            "dim": "additional_properties.line_item_properties"
                        },
                        "enumSource": "dim"
                    },
                    "options": {
                        "dependencies": {
                            "fetch_property_history": true,
                            "line_item_hidden": "true"
                        }
                    }
                },
                "product_properties": {
                    "type": "array",
                    "format": "select",
                    "items": {
                        "enum": [],
                        "type": "string"
                    },
                    "title": "Product - Additional Properties",
                    "default": [
                        "amount",
                        "description",
                        "discount",
                        "hs_sku",
                        "hs_url",
                        "hubspot_owner_id",
                        "name",
                        "price",
                        "quantity",
                        "recurringbillingfrequency",
                        "tax"
                    ],
                    "options": {
                        "dependencies": {
                            "object_properties": "custom",
                            "product_hidden": "true"
                        },
                        "async": {
                            "label": "Re-load properties",
                            "action": "loadProductProperties"
                        }
                    },
                    "description": "Comma separated list of Product properties. The values must match valid Product properties, otherwise an empty value is returned. If left empty, default properties will be fetched.",
                    "uniqueItems": true,
                    "propertyOrder": 60
                },
                "product_property_history": {
                    "title": "Product - Property Histories",
                    "type": "array",
                    "propertyOrder": 61,
                    "format": "select",
                    "uniqueItems": true,
                    "items": {
                        "type": "string",
                        "watch": {
                            "dim": "additional_properties.product_properties"
                        },
                        "enumSource": "dim"
                    },
                    "options": {
                        "dependencies": {
                            "fetch_property_history": true,
                            "product_hidden": "true"
                        }
                    }
                },
                "ticket_properties": {
                    "type": "array",
                    "format": "select",
                    "items": {
                        "enum": [],
                        "type": "string"
                    },
                    "title": "Ticket - Additional Properties",
                    "default": [
                        "hs_object_id",
                        "hs_created_by_user_id",
                        "closed_date",
                        "created_by",
                        "createdate",
                        "hs_lastactivitydate",
                        "hs_pipeline",
                        "hs_resolution",
                        "hs_ticket_id",
                        "hs_ticket_priority"
                    ],
                    "options": {
                        "dependencies": {
                            "object_properties": "custom",
                            "ticket_hidden": "true"
                        },
                        "async": {
                            "label": "Re-load properties",
                            "action": "loadTicketProperties"
                        }
                    },
                    "description": "Comma separated list of Ticket properties. The values must match valid Ticket properties, otherwise an empty value is returned. If left empty, default properties will be fetched.",
                    "uniqueItems": true,
                    "propertyOrder": 70
                },
                "ticket_property_history": {
                    "title": "Ticket - Property Histories",
                    "type": "array",
                    "propertyOrder": 71,
                    "format": "select",
                    "uniqueItems": true,
                    "items": {
                        "type": "string",
                        "watch": {
                            "dim": "additional_properties.ticket_properties"
                        },
                        "enumSource": "dim"
                    },
                    "options": {
                        "dependencies": {
                            "fetch_property_history": true,
                            "ticket_hidden": "true"
                        }
                    }
                },
                "quote_properties": {
                    "type": "array",
                    "format": "select",
                    "items": {
                        "enum": [],
                        "type": "string"
                    },
                    "title": "Quote - Additional Properties",
                    "default": [
                        "hs_quote_number",
                        "hs_object_id",
                        "hs_allowed_payment_methods",
                        "hs_collect_billing_address",
                        "hs_created_by_user_id",
                        "hs_language",
                        "hs_locale",
                        "hs_payment_status",
                        "hs_quote_total_preference",
                        "hs_template_type",
                        "hs_test_mode",
                        "hs_sender_firstname",
                        "hs_title",
                        "hs_expiration_date",
                        "hs_quote_amount",
                        "hs_status"
                    ],
                    "options": {
                        "dependencies": {
                            "object_properties": "custom",
                            "quote_hidden": "true"
                        },
                        "async": {
                            "label": "Re-load properties",
                            "action": "loadQuoteProperties"
                        }
                    },
                    "description": "Comma separated list of Quote properties. The values must match valid Quote properties, otherwise an empty value is returned. If left empty, default properties will be fetched.",
                    "uniqueItems": true,
                    "propertyOrder": 80
                },
                "quote_property_history": {
                    "title": "Quote - Property Histories",
                    "type": "array",
                    "propertyOrder": 81,
                    "format": "select",
                    "uniqueItems": true,
                    "items": {
                        "type": "string",
                        "watch": {
                            "dim": "additional_properties.quote_properties"
                        },
                        "enumSource": "dim"
                    },
                    "options": {
                        "dependencies": {
                            "fetch_property_history": true,
                            "quote_hidden": "true"
                        }
                    }
                },
                "call_properties": {
                    "type": "array",
                    "format": "select",
                    "items": {
                        "enum": [],
                        "type": "string"
                    },
                    "title": "Call - Additional Properties",
                    "default": [
                        "hs_call_title",
                        "hs_call_status",
                        "hs_createdate",
                        "hs_lastmodifieddate",
                        "hs_object_id",
                        "hs_body_preview",
                        "hs_created_by",
                        "hs_created_by_user_id",
                        "hs_engagement_source",
                        "hubspot_owner_idm",
                        "hs_user_ids_of_all_owners"
                    ],
                    "options": {
                        "dependencies": {
                            "object_properties": "custom",
                            "call_hidden": "true"
                        },
                        "async": {
                            "label": "Re-load properties",
                            "action": "loadCallProperties"
                        }
                    },
                    "description": "Comma separated list of Call properties. The values must match valid Call properties, otherwise an empty value is returned. If left empty, default properties will be fetched.",
                    "uniqueItems": true,
                    "propertyOrder": 90
                },
                "call_property_history": {
                    "title": "Call - Property Histories",
                    "type": "array",
                    "propertyOrder": 91,
                    "format": "select",
                    "uniqueItems": true,
                    "items": {
                        "type": "string",
                        "watch": {
                            "dim": "additional_properties.call_properties"
                        },
                        "enumSource": "dim"
                    },
                    "options": {
                        "dependencies": {
                            "fetch_property_history": true,
                            "call_hidden": "true"
                        }
                    }
                },
                "email_properties": {
                    "type": "array",
                    "format": "select",
                    "items": {
                        "enum": [],
                        "type": "string"
                    },
                    "title": "Email - Additional Properties",
                    "default": [
                        "hubspot_owner_id",
                        "hubspot_team_id",
                        "hubspot_owner_assigneddate",
                        "hs_created_by",
                        "hs_createdate",
                        "hs_email_bcc_email",
                        "hs_email_bcc_firstname",
                        "hs_email_bcc_lastname",
                        "hs_email_cc_email",
                        "hs_email_cc_firstname",
                        "hs_email_cc_lastname",
                        "hs_email_from_email",
                        "hs_email_from_firstname",
                        "hs_email_from_lastname",
                        "hs_email_headers"
                    ],
                    "options": {
                        "dependencies": {
                            "object_properties": "custom",
                            "email_hidden": "true"
                        },
                        "async": {
                            "label": "Re-load properties",
                            "action": "loadEmailProperties"
                        }
                    },
                    "description": "Comma separated list of Email properties. The values must match valid Email properties, otherwise an empty value is returned. If left empty, default properties will be fetched.",
                    "uniqueItems": true,
                    "propertyOrder": 100
                },
                "email_property_history": {
                    "title": "Email - Property Histories",
                    "type": "array",
                    "propertyOrder": 101,
                    "format": "select",
                    "uniqueItems": true,
                    "items": {
                        "type": "string",
                        "watch": {
                            "dim": "additional_properties.email_properties"
                        },
                        "enumSource": "dim"
                    },
                    "options": {
                        "dependencies": {
                            "fetch_property_history": true,
                            "email_hidden": "true"
                        }
                    }
                },
                "meeting_properties": {
                    "type": "array",
                    "format": "select",
                    "items": {
                        "enum": [],
                        "type": "string"
                    },
                    "title": "Meeting - Additional Properties",
                    "default": [
                        "hubspot_owner_id",
                        "hs_user_ids_of_all_owners",
                        "hs_meeting_start_time",
                        "hs_meeting_end_time",
                        "hs_body_preview_is_truncated",
                        "hs_created_by",
                        "hs_created_by_user_id",
                        "hs_engagement_source",
                        "hs_createdate",
                        "hs_lastmodifieddate",
                        "hs_object_id",
                        "hs_timestamp"
                    ],
                    "options": {
                        "dependencies": {
                            "object_properties": "custom",
                            "meeting_hidden": "true"
                        },
                        "async": {
                            "label": "Re-load properties",
                            "action": "loadMeetingProperties"
                        }
                    },
                    "description": "Comma separated list of Meetinf properties. The values must match valid Meeting properties, otherwise an empty value is returned. If left empty, default properties will be fetched.",
                    "uniqueItems": true,
                    "propertyOrder": 110
                },
                "meeting_property_history": {
                    "title": "Meeting - Property Histories",
                    "type": "array",
                    "propertyOrder": 111,
                    "format": "select",
                    "uniqueItems": true,
                    "items": {
                        "type": "string",
                        "watch": {
                            "dim": "additional_properties.meeting_properties"
                        },
                        "enumSource": "dim"
                    },
                    "options": {
                        "dependencies": {
                            "fetch_property_history": true,
                            "meeting_hidden": "true"
                        }
                    }
                },
                "note_properties": {
                    "type": "array",
                    "format": "select",
                    "items": {
                        "enum": [],
                        "type": "string"
                    },
                    "title": "Note - Additional Properties",
                    "default": [
                        "hs_object_id",
                        "hs_body_preview",
                        "hs_engagement_source",
                        "hs_created_by_user_id",
                        "hs_modified_by",
                        "hs_engagement_source_id",
                        "hs_user_ids_of_all_owners"
                    ],
                    "options": {
                        "dependencies": {
                            "object_properties": "custom",
                            "note_hidden": "true"
                        },
                        "async": {
                            "label": "Re-load properties",
                            "action": "loadNoteProperties"
                        }
                    },
                    "description": "Comma separated list of Note properties. The values must match valid Note properties, otherwise an empty value is returned. If left empty, default properties will be fetched.",
                    "uniqueItems": true,
                    "propertyOrder": 120
                },
                "note_property_history": {
                    "title": "Note - Property Histories",
                    "type": "array",
                    "propertyOrder": 121,
                    "format": "select",
                    "uniqueItems": true,
                    "items": {
                        "type": "string",
                        "watch": {
                            "dim": "additional_properties.note_properties"
                        },
                        "enumSource": "dim"
                    },
                    "options": {
                        "dependencies": {
                            "fetch_property_history": true,
                            "note_hidden": "true"
                        }
                    }
                },
                "task_properties": {
                    "type": "array",
                    "format": "select",
                    "items": {
                        "enum": [],
                        "type": "string"
                    },
                    "title": "Task - Additional Properties",
                    "default": [
                        "hs_object_id",
                        "hs_task_subject",
                        "hs_task_type",
                        "hs_body_preview",
                        "hs_created_by_user_id",
                        "hs_engagement_source",
                        "hs_task_for_object_type",
                        "hs_task_last_contact_outreach",
                        "hs_task_last_sales_activity_timestamp",
                        "hs_task_priority",
                        "hs_task_send_default_reminder",
                        "hs_task_status"
                    ],
                    "options": {
                        "dependencies": {
                            "object_properties": "custom",
                            "task_hidden": "true"
                        },
                        "async": {
                            "label": "Re-load properties",
                            "action": "loadTaskProperties"
                        }
                    },
                    "description": "Comma separated list of Task properties. The values must match valid Task properties, otherwise an empty value is returned. If left empty, default properties will be fetched.",
                    "uniqueItems": true,
                    "propertyOrder": 130
                },
                "task_property_history": {
                    "title": "Task - Property Histories",
                    "type": "array",
                    "propertyOrder": 131,
                    "format": "select",
                    "uniqueItems": true,
                    "items": {
                        "type": "string",
                        "watch": {
                            "dim": "additional_properties.task_properties"
                        },
                        "enumSource": "dim"
                    },
                    "options": {
                        "dependencies": {
                            "fetch_property_history": true,
                            "task_hidden": "true"
                        }
                    }
                },
                "campaign_hidden": {
                    "type": "string",
                    "watch": {
                        "campaign_hide": "rootschema.endpoints.campaign"
                    },
                    "options": {
                        "hidden": true
                    },
                    "template": "{{campaign_hide}}"
                },
                "contact_hidden": {
                    "type": "string",
                    "watch": {
                        "contact_hide": "rootschema.endpoints.contact"
                    },
                    "options": {
                        "hidden": true
                    },
                    "template": "{{contact_hide}}"
                },
                "company_hidden": {
                    "type": "string",
                    "watch": {
                        "company_hide": "rootschema.endpoints.company"
                    },
                    "options": {
                        "hidden": true
                    },
                    "template": "{{company_hide}}"
                },
                "deal_hidden": {
                    "type": "string",
                    "watch": {
                        "deal_hide": "rootschema.endpoints.deal"
                    },
                    "options": {
                        "hidden": true
                    },
                    "template": "{{deal_hide}}"
                },
                "line_item_hidden": {
                    "type": "string",
                    "watch": {
                        "line_item_hide": "rootschema.endpoints.line_item"
                    },
                    "options": {
                        "hidden": true
                    },
                    "template": "{{line_item_hide}}"
                },
                "quote_hidden": {
                    "type": "string",
                    "watch": {
                        "quote_hide": "rootschema.endpoints.quote"
                    },
                    "options": {
                        "hidden": true
                    },
                    "template": "{{quote_hide}}"
                },
                "product_hidden": {
                    "type": "string",
                    "watch": {
                        "product_hide": "rootschema.endpoints.product"
                    },
                    "options": {
                        "hidden": true
                    },
                    "template": "{{product_hide}}"
                },
                "owner_hidden": {
                    "type": "string",
                    "watch": {
                        "owner_hide": "rootschema.endpoints.owner"
                    },
                    "options": {
                        "hidden": true
                    },
                    "template": "{{owner_hide}}"
                },
                "ticket_hidden": {
                    "type": "string",
                    "watch": {
                        "ticket_hide": "rootschema.endpoints.ticket"
                    },
                    "options": {
                        "hidden": true
                    },
                    "template": "{{ticket_hide}}"
                },
                "contact_list_hidden": {
                    "type": "string",
                    "watch": {
                        "contact_list_hide": "rootschema.endpoints.contact_list"
                    },
                    "options": {
                        "hidden": true
                    },
                    "template": "{{contact_list_hide}}"
                },
                "email_event_hidden": {
                    "type": "string",
                    "watch": {
                        "email_event_hide": "rootschema.endpoints.email_event"
                    },
                    "options": {
                        "hidden": true
                    },
                    "template": "{{email_event_hide}}"
                },
                "custom_object_event_hidden": {
                    "type": "string",
                    "watch": {
                        "custom_object_event_hide": "rootschema.endpoints.custom_object"
                    },
                    "options": {
                        "hidden": true
                    },
                    "template": "{{custom_object_event_hide}}"
                },
                "form_hidden": {
                    "type": "string",
                    "watch": {
                        "form_hide": "rootschema.endpoints.form"
                    },
                    "options": {
                        "hidden": true
                    },
                    "template": "{{form_hide}}"
                },
                "pipeline_hidden": {
                    "type": "string",
                    "watch": {
                        "pipeline_hide": "rootschema.endpoints.pipeline"
                    },
                    "options": {
                        "hidden": true
                    },
                    "template": "{{pipeline_hide}}"
                },
                "note_hidden": {
                    "type": "string",
                    "watch": {
                        "note_hide": "rootschema.endpoints.note"
                    },
                    "options": {
                        "hidden": true
                    },
                    "template": "{{note_hide}}"
                },
                "call_hidden": {
                    "type": "string",
                    "watch": {
                        "call_hide": "rootschema.endpoints.call"
                    },
                    "options": {
                        "hidden": true
                    },
                    "template": "{{call_hide}}"
                },
                "task_hidden": {
                    "type": "string",
                    "watch": {
                        "task_hide": "rootschema.endpoints.task"
                    },
                    "options": {
                        "hidden": true
                    },
                    "template": "{{task_hide}}"
                },
                "meeting_hidden": {
                    "type": "string",
                    "watch": {
                        "meeting_hide": "rootschema.endpoints.meeting"
                    },
                    "options": {
                        "hidden": true
                    },
                    "template": "{{meeting_hide}}"
                },
                "email_hidden": {
                    "type": "string",
                    "watch": {
                        "email_hide": "rootschema.endpoints.email"
                    },
                    "options": {
                        "hidden": true
                    },
                    "template": "{{email_hide}}"
                },
                "email_statistic_hidden": {
                    "type": "string",
                    "watch": {
                        "email_statistic_hide": "rootschema.endpoints.email_statistic"
                    },
                    "options": {
                        "hidden": true
                    },
                    "template": "{{email_statistic_hide}}"
                }
            }
        },
        "associations": {
            "propertyOrder": 30,
            "type": "array",
            "format": "table",
            "title": "Object Associations",
            "uniqueItems": true,
            "items": {
                "type": "object",
                "title": "Object Association",
                "properties": {
                    "from_object": {
                        "type": "string",
                        "title": "From Object",
                        "required": true,
                        "enum": [
                            "campaign",
                            "contact",
                            "company",
                            "deal",
                            "quote",
                            "product",
                            "owner",
                            "ticket",
                            "form",
                            "pipeline",
                            "note",
                            "call",
                            "task",
                            "meeting",
                            "email"
                        ],
                        "default": "contact"
                    },
                    "to_object": {
                        "type": "string",
                        "title": "To Object",
                        "required": true,
                        "enum": [
                            "campaign",
                            "contact",
                            "company",
                            "deal",
                            "quote",
                            "product",
                            "owner",
                            "ticket",
                            "form",
                            "pipeline",
                            "note",
                            "call",
                            "task",
                            "meeting",
                            "email",
                            "line_item"
                        ],
                        "default": "meeting"
                    }
                }
            }
        },
        "fetch_settings": {
            "title": "Fetch Settings",
            "type": "object",
            "propertyOrder": 40,
            "properties": {
                "fetch_mode": {
                    "type": "string",
                    "required": true,
                    "enum": [
                        "full_fetch",
                        "incremental_fetch"
                    ],
                    "options": {
                        "enum_titles": [
                            "Full Fetch",
                            "Incremental Fetch"
                        ]
                    },
                    "default": "full_fetch",
                    "format": "checkbox",
                    "title": "Fetch Mode",
                    "description": "If Full fetch is used, all data will be fetched Hubspot every run. If incremental fetch is used, data will be fetched incrementally based on a specified relative or exact date. Hubspot API Endpoint for search (is it used for incremental fetching) is limited to 10,000 total results... more information is here <a href='https://developers.hubspot.com/docs/api/crm/search'>",
                    "propertyOrder": 20
                },
                "date_from": {
                    "type": "string",
                    "title": "Fetch From Date",
                    "options": {
                        "dependencies": {
                            "fetch_mode": [
                                "incremental_fetch"
                            ]
                        }
                    },
                    "default": "yesterday",
                    "description": "Date in YYYY-MM-DD format or relative date i.e. 5 days ago, 1 month ago, yesterday, etc. If left empty, all records are downloaded. You can also set this as `last run`, which will fetch data from the last run of the component; if no previous successful run exists, all data up to specified Date To will be downloaded.",
                    "propertyOrder": 30
                },
                "archived": {
                    "type": "boolean",
                    "title": "Archived",
                    "options": {
                        "dependencies": {
                            "fetch_mode": [
                                "full_fetch"
                            ]
                        }
                    },
                    "propertyOrder": 70,
                    "format": "checkbox",
                    "default": false,
                    "description": "If checked archived objects will be fetched. Only possible in Full fetching mode"
                },
                "associations_batch_size": {
                    "title": "Association batch size",
                    "type": "number",
                    "default": 100,
                    "description": "In case you are fetching complex associations and you are facing issues with receiving 524 timeout error, you can decrease the batch size. The default value is 100."
                }
            }
        },
        "destination_settings": {
            "title": "Destination",
            "type": "object",
            "propertyOrder": 50,
            "properties": {
                "load_mode": {
                    "type": "string",
                    "required": true,
                    "enum": [
                        "full_load",
                        "incremental_load"
                    ],
                    "options": {
                        "enum_titles": [
                            "Full Load",
                            "Incremental Load"
                        ]
                    },
                    "default": "incremental_load",
                    "format": "checkbox",
                    "title": "Load Mode",
                    "description": "If Full load is used, the destination table will be overwritten every run. If incremental load is used, data will be upserted into the destination table. Tables with a primary key will have rows updated, tables without a primary key will have rows appended.",
                    "propertyOrder": 20
                }
            }
        }
    }
}


================================================
File: component_config/configSchema.json
================================================
{
  "type": "object",
  "title": "Authentication Configuration",
  "required": [
    "#private_app_token"
  ],
  "properties": {
    "#private_app_token": {
      "type": "string",
      "title": "Private App Token",
      "format": "password",
      "propertyOrder": 10,
      "description": "Your private app token created <a href=\"https://developers.hubspot.com/docs/api/migrate-an-api-key-integration-to-a-private-app\">in Hubspot</a>"
    }
  }
}


================================================
File: component_config/configuration_description.md
================================================



================================================
File: component_config/documentationUrl.md
================================================



================================================
File: component_config/licenseUrl.md
================================================



================================================
File: component_config/logger
================================================
gelf


================================================
File: component_config/loggerConfiguration.json
================================================
{
  "verbosity": {
    "100": "normal",
    "200": "normal",
    "250": "normal",
    "300": "verbose",
    "400": "verbose",
    "500": "camouflage",
    "550": "camouflage",
    "600": "camouflage"
  },
  "gelf_server_type": "tcp"
}


================================================
File: component_config/sourceCodeUrl.md
================================================



================================================
File: component_config/sample-config/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-test.test",
          "destination": "test.csv",
          "limit": 50,
          "columns": [],
          "where_values": [],
          "where_operator": "eq"
        }
      ]
    },
    "output": {
      "files": [],
      "tables": []
    }
  },
  "parameters": {
    "#api_token": "demo",
    "period_from": "yesterday",
    "endpoints": [
      "deals",
      "companies"
    ],
    "company_properties": "",
    "deal_properties": "",
    "debug": true
  },
  "image_parameters": {
    "syrup_url": "https://syrup.keboola.com/"
  },
  "authorization": {
    "oauth_api": {
      "id": "OAUTH_API_ID",
      "credentials": {
        "id": "main",
        "authorizedFor": "Myself",
        "creator": {
          "id": "1234",
          "description": "me@keboola.com"
        },
        "created": "2016-01-31 00:13:30",
        "#data": "{\"refresh_token\":\"MCWBkfdK9m5YK*Oqahwm6XN6elMAEwcH5kYcK8Ku!bpiOgSDZN9MQIzunpMsh6LyKH0i!7OcwwwajuxPfvm2PrrWYSs*HerDr2ZSJ39pqHJcvwUNIvHdtcgFFr3Em*yhn3GKBwM2p9UrjtgdAriSDny5YgUYGuI3gYJY1ypD*wBaAOzzeeXZx6CdgjruJ7gboTAngbWk3CzO9rORIwXAAlGUH6ZgBQJL3AwkYVMRFV4BvIvDAMF*0DcGDyrcyYDw9X3vYn*Wy!OqgrenKCGowdJk0C0136SUv4PJI383y76UMim6Q7KGDj7Lf!K2N2FDbxsz2iZKZTBr2vHx8pEC1oBc$\"}",
        "oauthVersion": "2.0",
        "appKey": "000000004C184A49",
        "#appSecret": "vBAYak49pVK1zghHAgDH4tCSCNlT-CiN"
      }
    }
  }
}



================================================
File: component_config/sample-config/in/state.json
================================================
{"data_delta": "10222018"}


================================================
File: component_config/sample-config/in/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
File: component_config/sample-config/in/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"



================================================
File: component_config/sample-config/in/tables/test.csv.manifest
================================================
{
    "id": "in.c-test.test",
    "uri": "https:\/\/connection.keboola.com\/v2\/storage\/tables\/in.c-test.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2018-03-02T15:36:50+0100",
    "last_change_date": "2018-03-02T15:36:54+0100",
    "last_import_date": "2018-03-02T15:36:54+0100",
    "rows_count": 0,
    "data_size_bytes": 0,
    "is_alias": false,
    "attributes": [],
    "columns": [
        "Type",
        "Campaign_Name",
        "Status",
        "Start_Date",
        "End_Date",
        "Location",
        "Eventbrite_link"
    ],
    "metadata": [
        {
            "id": "18271581",
            "key": "KBC.createdBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271582",
            "key": "KBC.createdBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271583",
            "key": "KBC.createdBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271584",
            "key": "KBC.lastUpdatedBy.component.id",
            "value": "transformation",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271585",
            "key": "KBC.lastUpdatedBy.configuration.id",
            "value": "361585608",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        },
        {
            "id": "18271586",
            "key": "KBC.lastUpdatedBy.configurationRow.id",
            "value": "361585762",
            "provider": "system",
            "timestamp": "2018-03-02T15:37:02+0100"
        }
    ],
    "column_metadata": {
        "Type": [],
        "Campaign_Name": [],
        "Status": [],
        "Start_Date": [],
        "End_Date": [],
        "Location": [],
        "Eventbrite_link": []
    }
}


================================================
File: component_config/sample-config/out/files/order1.xml
================================================
<?xml version='1.0' ?>
<root_el>
    <orders>
        <order>
            <id>1</id>
            <date>2018-01-01</date>
            <cust_name>David</cust_name>	
            <order-item>
                <price currency="CZK">100</price>
                <item>Umbrella</item>
            </order-item>
            <order-item>
                <price currency="CZK">200</price>
                <item>Rain Coat</item>
            </order-item>
        </order>
    </orders>
</root_el>


================================================
File: component_config/sample-config/out/tables/test.csv
================================================
"Type","Campaign_Name","Status","Start_Date","End_Date","Location","Eventbrite_link"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","How to become data driven startup","Complete","2015-10-13","2015-10-13","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711425377"
"Event","How to become data driven startup","Complete","2015-11-04","2015-11-04","United Kingdom","https://www.eventbrite.co.uk/e/how-to-become-data-driven-startup-registration-18711426380"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-01-14","2016-01-14","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20152992142"
"Event","DATAGIRLS PRESENT: HOW TO BECOME DATA-DRIVEN","Complete","2016-02-25","2016-02-25","United Kingdom","https://www.eventbrite.co.uk/e/datagirls-present-how-to-become-data-driven-tickets-20967439175"
"Event","Data Tools for Startups","Complete","2016-03-17","2016-03-17","United Kingdom","https://www.eventbrite.co.uk/e/data-tools-for-startups-tickets-21257426535"
"Event","Data Festival London 2016","Complete","2016-06-24","2016-06-26","United Kingdom","https://www.eventbrite.co.uk/e/data-festival-london-2016-tickets-25192608771"
"Event","Becoming data driven in the high street fashion","Complete","2016-10-12","2016-10-12","United Kingdom","https://www.eventbrite.co.uk/e/becoming-data-driven-in-the-high-street-fashion-tickets-27481268213"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola DataBrunch - Amazon Go a ako s ním v maloobchode “bojovať”","Complete","2017-03-09","2017-03-09","Slovakia","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-ako-s-nim-v-maloobchode-bojovat-tickets-31827553068"
"Event","Keboola DataBrunch - Amazon Go a jak s nim v maloobchodě “bojovat”","Complete","2017-03-29","2017-03-29","Czech Republic","https://www.eventbrite.co.uk/e/keboola-databrunch-amazon-go-a-jak-s-nim-v-maloobchode-bojovat-tickets-32182393405"
"Event","The Data Foundry present: DATAGIRLS Weekend","Complete","2016-10-14","2016-10-16","United Kingdom","https://www.eventbrite.co.uk/e/the-data-foundry-present-datagirls-weekend-tickets-27350069795"
"Event","[NLP] How to analyse text data for knowledge discovery","Complete","2017-04-10","2017-04-10","United Kingdom","https://www.eventbrite.co.uk/e/nlp-how-to-analyse-text-data-for-knowledge-discovery-tickets-32320274812"
"Event","Keboola Data Brunch - KPIs and AmazonGo, budoucnost retailu? ","Complete","2017-06-27","2017-06-27","Czech Republic","https://www.eventbrite.co.uk/e/keboola-data-brunch-kpis-amazongo-budoucnost-retailu-tickets-35257195220"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"
"Event","Conversion Rate Optimisation in Travel Industry","Complete","2018-01-30","2018-01-30","United Kingdom","https://www.eventbrite.co.uk/e/conversion-rate-optimisation-in-travel-industry-tickets-38951076719"
"Event","Learn how to #DoMoreWithData with DataGirls","Complete","2017-10-01","2017-10-01","United Kingdom","https://www.eventbrite.co.uk/e/learn-how-to-domorewithdata-with-datagirls-tickets-36777944823"
"Event","Are You Using Data to Understand Your Customers? ","Complete","2018-02-27","2018-02-27","United Kingdom","https://www.eventbrite.co.uk/e/are-you-using-data-to-understand-your-customers-tickets-42000160611"




================================================
File: scripts/build_n_run.ps1
================================================
echo Building component...
$COMP_TAG = Read-Host -Prompt 'Input Docker tag name:'
docker build -rm -t $COMP_TAG ../

echo Running component...
Write-host "Would you like to use default data folder? (../data)" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes use: " (join-path (Split-Path -Path (Get-Location).Path) "data"); $DATA_PATH = (join-path (Split-Path -Path (Get-Location).Path) "data") } 
       N {Write-Host "No, I'll specify myself"; $DATA_PATH = Read-Host -Prompt 'Input data folder path:'} 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 

Write-host "Would you like to execute the container to Bash, skipping the execution?" -ForegroundColor Yellow 
    $Readhost = Read-Host " ( y / n ) " 
    Switch ($ReadHost) 
     { 
       Y {Write-host "Yes, get me to the bash"; docker run -ti -v $DATA_PATH`:/data --entrypoint=//bin//bash $COMP_TAG} 
       N {Write-Host "No, execute the app normally"; 
		    echo $DATA_PATH
			docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG
	   } 
       Default {Write-Host "Default, run app"; docker run -v $DATA_PATH`:/data -e KBC_DATADIR=/data $COMP_TAG} 
     } 





================================================
File: scripts/build_n_test.sh
================================================
#!/bin/sh
set -e

flake8 --config=flake8.cfg
python -m unittest discover


================================================
File: scripts/run.bat
================================================
@echo off

echo Running component...
docker run -v %cd%:/data -e KBC_DATADIR=/data comp-tag


================================================
File: scripts/run_kbc_tests.ps1
================================================
echo "Preparing KBC test image"
# set env vars
$KBC_DEVELOPERPORTAL_USERNAME  = Read-Host -Prompt 'Input your service account user name'
$KBC_DEVELOPERPORTAL_PASSWORD  = Read-Host -Prompt 'Input your service account pass'
$KBC_DEVELOPERPORTAL_VENDOR = 'esnerda'
$KBC_DEVELOPERPORTAL_APP = 'esnerda.ex-gusto-export'
$BASE_KBC_CONFIG = '455568423'
$KBC_STORAGE_TOKEN = Read-Host -Prompt 'Input your storage token'


#build app
$APP_IMAGE='keboola-comp-test'
docker build ..\ --tag=$APP_IMAGE
docker images
docker -v
#docker run $APP_IMAGE flake8 --config=./deployment/flake8.cfg
echo "Running unit-tests..."
docker run $APP_IMAGE python -m unittest discover

docker pull quay.io/keboola/developer-portal-cli-v2:latest
$REPOSITORY= docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP

docker tag $APP_IMAGE`:latest $REPOSITORY`:test

echo 'running login'
$(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME=$KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD=$KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)

echo 'pushing test image'
docker push $REPOSITORY`:test

echo 'running test config in KBC'
docker run --rm -e KBC_STORAGE_TOKEN=$KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $BASE_KBC_CONFIG test



================================================
File: scripts/update_dev_portal_properties.sh
================================================
#!/usr/bin/env bash

set -e
# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest


# Update properties in Keboola Developer Portal
echo "Updating long description"
value=`cat component_config/component_long_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} longDescription --value="$value"
else
    echo "longDescription is empty!"
    exit 1
fi

echo "Updating config schema"
value=`cat component_config/configSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationSchema --value="$value"
else
    echo "configurationSchema is empty!"
fi

echo "Updating row config schema"
value=`cat component_config/configRowSchema.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationRowSchema --value="$value"
else
    echo "configurationRowSchema is empty!"
fi


echo "Updating config description"

value=`cat component_config/configuration_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} configurationDescription --value="$value"
else
    echo "configurationDescription is empty!"
fi


echo "Updating short description"

value=`cat component_config/component_short_description.md`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} shortDescription --value="$value"
else
    echo "shortDescription is empty!"
fi

echo "Updating logger settings"

value=`cat component_config/logger`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} logger --value="$value"
else
    echo "logger type is empty!"
fi

echo "Updating logger configuration"
value=`cat component_config/loggerConfiguration.json`
echo "$value"
if [ ! -z "$value" ]
then
    docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} loggerConfiguration --value="$value"
else
    echo "loggerConfiguration is empty!"
fi


================================================
File: scripts/developer_portal/fn_actions_md_update.sh
================================================
#!/bin/bash

# Set the path to the Python script file
PYTHON_FILE="src/component.py"
# Set the path to the Markdown file containing actions
MD_FILE="component_config/actions.md"

# Check if the file exists before creating it
if [ ! -e "$MD_FILE" ]; then
    touch "$MD_FILE"
else
    echo "File already exists: $MD_FILE"
    exit 1
fi

# Get all occurrences of lines containing @sync_action('XXX') from the .py file
SYNC_ACTIONS=$(grep -o -E "@sync_action\(['\"][^'\"]*['\"]\)" "$PYTHON_FILE" | sed "s/@sync_action(\(['\"]\)\([^'\"]*\)\(['\"]\))/\2/" | sort | uniq)

# Check if any sync actions were found
if [ -n "$SYNC_ACTIONS" ]; then
    # Iterate over each occurrence of @sync_action('XXX')
    for sync_action in $SYNC_ACTIONS; do
        EXISTING_ACTIONS+=("$sync_action")
    done

    # Convert the array to JSON format
    JSON_ACTIONS=$(printf '"%s",' "${EXISTING_ACTIONS[@]}")
    JSON_ACTIONS="[${JSON_ACTIONS%,}]"

    # Update the content of the actions.md file
    echo "$JSON_ACTIONS" > "$MD_FILE"
else
    echo "No sync actions found. Not creating the file."
fi


================================================
File: scripts/developer_portal/update_properties.sh
================================================
#!/usr/bin/env bash

set -e

# Check if the KBC_DEVELOPERPORTAL_APP environment variable is set
if [ -z "$KBC_DEVELOPERPORTAL_APP" ]; then
    echo "Error: KBC_DEVELOPERPORTAL_APP environment variable is not set."
    exit 1
fi

# Pull the latest version of the developer portal CLI Docker image
docker pull quay.io/keboola/developer-portal-cli-v2:latest

# Function to update a property for the given app ID
update_property() {
    local app_id="$1"
    local prop_name="$2"
    local file_path="$3"

    if [ ! -f "$file_path" ]; then
        echo "File '$file_path' not found. Skipping update for property '$prop_name' of application '$app_id'."
        return
    fi

    # shellcheck disable=SC2155
    local value=$(<"$file_path")

    echo "Updating $prop_name for $app_id"
    echo "$value"

    if [ -n "$value" ]; then
        docker run --rm \
            -e KBC_DEVELOPERPORTAL_USERNAME \
            -e KBC_DEVELOPERPORTAL_PASSWORD \
            quay.io/keboola/developer-portal-cli-v2:latest \
            update-app-property "$KBC_DEVELOPERPORTAL_VENDOR" "$app_id" "$prop_name" --value="$value"
        echo "Property $prop_name updated successfully for $app_id"
    else
        echo "$prop_name is empty for $app_id, skipping..."
    fi
}

app_id="$KBC_DEVELOPERPORTAL_APP"

update_property "$app_id" "isDeployReady" "component_config/isDeployReady.md"
update_property "$app_id" "longDescription" "component_config/component_long_description.md"
update_property "$app_id" "configurationSchema" "component_config/configSchema.json"
update_property "$app_id" "configurationRowSchema" "component_config/configRowSchema.json"
update_property "$app_id" "configurationDescription" "component_config/configuration_description.md"
update_property "$app_id" "shortDescription" "component_config/component_short_description.md"
update_property "$app_id" "logger" "component_config/logger"
update_property "$app_id" "loggerConfiguration" "component_config/loggerConfiguration.json"
update_property "$app_id" "licenseUrl" "component_config/licenseUrl.md"
update_property "$app_id" "documentationUrl" "component_config/documentationUrl.md"
update_property "$app_id" "sourceCodeUrl" "component_config/sourceCodeUrl.md"
update_property "$app_id" "uiOptions" "component_config/uiOptions.md"

# Update the actions.md file
source "$(dirname "$0")/fn_actions_md_update.sh"
# update_property actions
update_property "$app_id" "actions" "component_config/actions.md"


================================================
File: src/component.py
================================================
import csv
import datetime
import logging
from typing import Callable, List, Union

import dateparser
from keboola.component import dao
from keboola.component.base import ComponentBase, sync_action
from keboola.component.dao import SupportedDataTypes
from keboola.component.exceptions import UserException
from keboola.component.sync_actions import SelectElement
from keboola.component.table_schema import FieldSchema, TableSchema
from keboola.csvwriter import ElasticDictWriter

from client import HubspotClient, HubspotClientException
from configuration import Configuration, FetchMode, ObjectProperties
from json_parser import FlattenJsonParser, DEFAULT_MAX_PARSE_DEPTH
from table_handler import TableHandler

DEFAULT_DATE_FROM = "1990-01-01"

COLUMN_NAME_SWAP = {"contact_list": {"listId": "id"}}


class Component(ComponentBase):

    def __init__(self):
        super().__init__()
        self.endpoint_func_mapping = {
            "campaign": self.get_campaigns,
            "contact": self.get_contacts,
            "company": self.get_companies,
            "deal": self.get_deals,
            "line_item": self.get_line_items,
            "deal_line_item": self.get_line_items,
            "quote": self.get_quotes,
            "product": self.get_products,
            "owner": self.get_owners,
            "ticket": self.get_tickets,
            "contact_list": self.get_contact_lists,
            "email_event": self.get_email_events,
            "form": self.get_forms,
            "pipeline": self.get_pipelines,
            "note": self.get_notes,
            "call": self.get_calls,
            "task": self.get_tasks,
            "meeting": self.get_meetings,
            "email": self.get_emails,
            "email_statistic": self.get_email_statistics
        }
        self.client: HubspotClient
        self._configuration: Configuration
        self.state: dict = {}
        self._table_handler_cache: dict = {}
        self._created_tables: dict = {}

    def run(self):
        self._init_configuration()
        self._validate_associations()
        self._validate_custom_objects()

        self.state = self.get_state_file()
        self.state["last_run"] = self._parse_date("now")

        self._init_client()

        for endpoint_name in self._configuration.endpoints.enabled:
            if endpoint_name == "custom_object":
                custom_object_types = self._configuration.additional_properties.custom_object_types
                for custom_object in custom_object_types:
                    self.get_custom_objects(custom_object)
                    self._created_tables[custom_object] = self._table_handler_cache[custom_object].table_definition
            else:
                self.process_endpoint(endpoint_name)
                self._created_tables[endpoint_name] = self._table_handler_cache[endpoint_name].table_definition
        self._close_table_handlers()

        for association in self._configuration.associations:
            self.process_association(association)
        self._close_table_handlers()
        self.write_state_file(self.state)

    def _validate_custom_objects(self):
        if self._configuration.endpoints.custom_object:
            if not self._configuration.additional_properties.custom_object_types:
                raise UserException("Custom object types must be specified in the configuration.")

    def _init_configuration(self):
        self.validate_configuration_parameters(Configuration.get_dataclass_required_parameters())
        self._configuration: Configuration = Configuration.load_from_dict(self.configuration.parameters)

    def _init_client(self):
        self.client = HubspotClient(access_token=self._configuration.pswd_private_app_token,
                                    association_batch_size=self._configuration.fetch_settings.associations_batch_size)

    @property
    def since_fetch_date(self) -> int:
        since_fetch_date: int = 0
        if self._configuration.fetch_settings.fetch_mode == FetchMode.INCREMENTAL_FETCH:
            since_fetch_date: int = int(self._parse_date(self._configuration.fetch_settings.date_from))

        return since_fetch_date

    @property
    def override_parser_depth(self):
        return self._configuration.override_parser_depth or DEFAULT_MAX_PARSE_DEPTH

    def process_endpoint(self, endpoint_name: str):
        try:
            self.endpoint_func_mapping[endpoint_name]()
        except HubspotClientException as e:
            raise UserException(e) from e

    def get_contacts(self) -> None:
        self._process_basic_crm_object("contact", self.client.get_contacts)

    def get_companies(self) -> None:
        self._process_basic_crm_object("company", self.client.get_companies)

    def get_deals(self) -> None:
        self._process_basic_crm_object("deal", self.client.get_deals)

    def get_line_items(self) -> None:
        self._process_basic_crm_object("line_item", self.client.get_line_items)

    def get_products(self) -> None:
        self._process_basic_crm_object("product", self.client.get_products)

    def get_quotes(self) -> None:
        self._process_basic_crm_object("quote", self.client.get_quotes)

    def get_notes(self):
        self._process_basic_crm_object("note", self.client.get_engagements_notes)

    def get_calls(self):
        self._process_basic_crm_object("call", self.client.get_engagements_calls)

    def get_tasks(self):
        self._process_basic_crm_object("task", self.client.get_engagements_tasks)

    def get_meetings(self):
        self._process_basic_crm_object("meeting", self.client.get_engagements_meetings)

    def get_emails(self):
        self._process_basic_crm_object("email", self.client.get_engagements_emails)

    def get_tickets(self) -> None:
        self._process_basic_crm_object("ticket", self.client.get_tickets)

    def get_campaigns(self) -> None:
        self._process_endpoint_with_custom_schema("campaign", self.client.get_campaigns)

    def get_contact_lists(self) -> None:
        self._process_endpoint_with_custom_schema("contact_list", self.client.get_contact_lists)

    def get_forms(self) -> None:
        self._process_endpoint_with_custom_schema("form", self.client.get_forms)

    def get_email_events(self) -> None:
        email_events = self._configuration.additional_properties.email_event_types
        self._process_endpoint_with_custom_schema("email_event", self.client.get_email_events,
                                                  email_events=email_events)

    def get_email_statistics(self) -> None:
        updated_since_timestamp = self.since_fetch_date
        self._process_endpoint_with_custom_schema("email_statistic", self.client.get_email_statistics,
                                                  updated_since=updated_since_timestamp)

    def get_owners(self) -> None:
        table_schema = self.get_table_schema_by_name("owner")
        self._init_table_handler("owner", table_schema)

        archived = self._configuration.fetch_settings.archived

        for page in self.client.get_owners(archived):
            for item in page:
                c = item.to_dict()
                self._table_handler_cache["owner"].writerow(c)

    def get_pipelines(self) -> None:
        pipeline_schema = self.get_table_schema_by_name("pipeline")
        self._init_table_handler("pipeline", pipeline_schema)

        pipeline_stage_schema = self.get_table_schema_by_name("pipeline_stage")
        self._init_table_handler("pipeline_stage", pipeline_stage_schema)

        self._get_specific_pipeline(self.client.get_deal_pipelines)
        self._get_specific_pipeline(self.client.get_ticket_pipelines)

    def _get_specific_pipeline(self, pipeline_generator: Callable) -> None:
        parser = FlattenJsonParser(max_parsing_depth=self.override_parser_depth)
        for ticket_pipeline in pipeline_generator():
            stages = ticket_pipeline.pop("stages")
            pipeline_id = ticket_pipeline.get("id")
            self._table_handler_cache["pipeline"].writerow(ticket_pipeline)
            for stage in stages:
                parsed_stage = parser.parse_row(stage)
                self._table_handler_cache["pipeline_stage"].writerow({"pipeline_id": pipeline_id, **parsed_stage})

    def get_custom_objects(self, custom_object) -> None:
        self._process_basic_crm_object(custom_object, self.client.get_custom_objects, custom_object=custom_object)

    def _process_basic_crm_object(self, object_name: str, data_generator: Callable, **kwargs) -> None:
        self._log_crm_object_fetching_message(object_name)

        additional_property_columns = self._get_additional_properties_to_fetch(object_name, **kwargs)

        table_schema = TableSchema(name=object_name, primary_keys=["id"], fields=additional_property_columns)

        self._init_table_handler(object_name, table_schema)

        incremental_fetch_mode = self._configuration.fetch_settings.fetch_mode != FetchMode.FULL_FETCH

        archived = self._configuration.fetch_settings.archived

        extra_arguments = {"object_properties": table_schema.field_names,
                           "archived": archived,
                           "incremental": incremental_fetch_mode,
                           "since_date": self.since_fetch_date,
                           **kwargs}

        if self._configuration.additional_properties.fetch_property_history:
            custom_props_str = getattr(self._configuration.additional_properties, f"{object_name}_property_history")
            properties_with_history = self._parse_properties(custom_props_str)
            extra_arguments["properties_with_history"] = properties_with_history
            self._init_property_history_table_handler()

        # If fetching archived also fetch non-archived objects
        if archived:
            self.fetch_and_write_to_table(object_name, data_generator, extra_arguments)

        extra_arguments["archived"] = False
        self.fetch_and_write_to_table(object_name, data_generator, extra_arguments)

    def _log_crm_object_fetching_message(self, object_name):
        logging_message = f"Downloading data of object {object_name}. "
        incremental_fetch_mode = self._configuration.fetch_settings.fetch_mode != FetchMode.FULL_FETCH
        if incremental_fetch_mode:
            logging_message = f"{logging_message}Fetching data incrementally, from the millisecond timestamp " \
                              f"{self.since_fetch_date}: " \
                              f"in UTC : {self._timestamp_to_datetime(self.since_fetch_date)}."
        else:
            logging_message = f"{logging_message} Fetching all data as Full Fetching mode is selected. "
            if self._configuration.fetch_settings.archived:
                logging_message = f"{logging_message}Fetching archived data."
        logging_message = f"{logging_message}Fetching " \
                          f"{self._configuration.additional_properties.object_properties.value} object properties"
        logging.info(logging_message)

    def _get_additional_properties_to_fetch(self, object_name, **kwargs) -> List[FieldSchema]:
        # for custom object is hard to dynamically define the properties it needs to fetch all
        if (self._configuration.additional_properties.object_properties == ObjectProperties.ALL
                or kwargs.get('custom_object')):
            columns_with_properties = self.get_all_object_columns_with_properties(object_name)
        elif self._configuration.additional_properties.object_properties == ObjectProperties.CUSTOM:
            columns_with_properties = self.get_specified_object_columns_with_properties(object_name)
        else:
            columns_with_properties = []

        # It is necessary to add id column if not present as it is not part of the object properties
        columns_with_properties = self._add_base_fields_to_field_schema_list(columns_with_properties)
        return columns_with_properties

    def get_all_object_columns_with_properties(self, object_name: str) -> List[FieldSchema]:
        obj_prop = self.client.get_crm_object_properties(object_name)
        return self._generate_field_schemas_from_properties(obj_prop)

    def get_specified_object_columns_with_properties(self, object_name: str) -> List[FieldSchema]:
        custom_props_str = getattr(self._configuration.additional_properties, f"{object_name}_properties")
        custom_props = self._parse_properties(custom_props_str)
        obj_prop = self.client.get_crm_object_properties(object_name)
        classified_object_properties = [obj_prop for obj_prop in obj_prop if obj_prop.get("name") in custom_props]
        return self._generate_field_schemas_from_properties(classified_object_properties)

    def _generate_field_schemas_from_properties(self, column_properties: List) -> List[FieldSchema]:
        columns = []
        for column_property in column_properties:
            keboola_type = self._convert_hubspot_type_to_keboola_base_type(column_property.get("type"))
            columns.append(FieldSchema(name=column_property.get("name"),
                                       base_type=keboola_type,
                                       description=column_property.get("description")))
        return columns

    def fetch_and_write_to_table(self, object_name: str, data_generator: Callable, data_generator_kwargs) -> None:
        for page in data_generator(**data_generator_kwargs):
            for item in page:
                c = item.to_dict()
                properties = {}

                if "properties" in c:
                    properties = c.pop("properties")

                if "associations" in c:
                    c.pop("associations")

                properties_with_history = None
                if "properties_with_history" in c:
                    properties_with_history = c.pop("properties_with_history")

                if properties_with_history and self._configuration.additional_properties.fetch_property_history:
                    property_history = self._process_property_history(object_name,
                                                                      c.get("id"),
                                                                      properties_with_history)
                    self._table_handler_cache["property_history"].writerows(property_history)

                self._table_handler_cache[object_name].writerow({**c, **properties})

    def _process_endpoint_with_custom_schema(self, schema_name: str, data_generator: Callable, **kwargs) -> None:
        logging.info(f"Downloading all {schema_name.replace('_', ' ')}s")
        schema = self.get_table_schema_by_name(schema_name)

        self._init_table_handler(schema_name, schema)

        parser = FlattenJsonParser(max_parsing_depth=self.override_parser_depth)

        for page in data_generator(**kwargs):
            parsed_data = parser.parse_data(page)
            self._table_handler_cache[schema_name].writerows(parsed_data)

    def _init_property_history_table_handler(self):
        table_schema = self.get_table_schema_by_name("property_history")
        self._init_table_handler("property_history", table_schema)

    def _init_table_handler(self, handler_name, table_schema):
        if handler_name not in self._table_handler_cache:
            incremental = self._configuration.destination_settings.load_mode != "full_load"

            table_definition = self.create_out_table_definition_from_schema(table_schema, incremental=incremental)

            self._add_columns_from_state_to_column_list(handler_name, table_definition)

            writer = ElasticDictWriter(table_definition.full_path, table_definition.column_names)
            self._table_handler_cache[handler_name] = TableHandler(table_definition, writer)

    def _add_columns_from_state_to_column_list(self, object_name: str, table_definition: dao.TableDefinition):
        columns_in_state = self.state.get(object_name, [])
        column_names = table_definition.column_names
        state_columns_not_in_column_names = [col for col in columns_in_state if col not in column_names]
        for column in state_columns_not_in_column_names:
            table_definition.add_column(column)

    def _close_table_handlers(self):
        for table_handler_name in self._table_handler_cache:
            self._close_table_handler(table_handler_name)
        self._table_handler_cache = {}

    def _close_table_handler(self, table_handler_name: str):
        table_handler = self._table_handler_cache[table_handler_name]

        table_handler.close_writer()
        final_field_names = table_handler.writer_fields
        missing_columns = [col for col in final_field_names if col not in table_handler.table_definition.column_names]
        table_handler.table_definition.add_columns(missing_columns)
        self.state[table_handler_name] = final_field_names

        table_handler.swap_column_names_in_table_definition(COLUMN_NAME_SWAP.get(table_handler_name, {}))

        prev_run_cols = self.state.get(table_handler_name, [])
        table_handler.redefine_table_column_metadata(prev_run_cols)
        self.write_manifest(table_handler.table_definition)

    def process_association(self, association):
        try:
            self.fetch_associations(from_object_type=association.from_object.value,
                                    to_object_type=association.to_object.value)
        except HubspotClientException as e:
            raise UserException(e) from e

    def fetch_associations(self, from_object_type: str, to_object_type: str, id_name: str = 'id'):
        logging.info(f"Fetching v4 associations from {from_object_type} to {to_object_type}")

        object_id_generator = self._get_object_ids(from_object_type, id_name)

        association_schema = self.get_table_schema_by_name("association")
        association_schema.name = f"{from_object_type}_to_{to_object_type}_association"

        self._init_table_handler(association_schema.name, association_schema)

        for page in self.client.get_associations_v4(object_id_generator, from_object_type=from_object_type,
                                                    to_object_type=to_object_type):
            parsed_page = self._parse_association_v4(page, from_object_type, to_object_type)
            self._table_handler_cache[association_schema.name].writerows(parsed_page)

    def _get_object_ids(self, object_type: str, id_name: str):
        table_definition = self._created_tables.get(object_type)

        with open(table_definition.full_path) as infile:
            reader = csv.DictReader(infile, fieldnames=table_definition.column_names)
            for line in reader:
                yield line.get(id_name)

    @staticmethod
    def _parse_association_v4(raw_data: List, from_object_type: str, to_object_type: str):
        parsed_data = []
        for associations in raw_data:
            from_id = associations._from.id  # noqa

            for association_to in associations.to:
                to_object_id = association_to.to_object_id
                association_types = association_to.association_types

                for association_type in association_types:
                    category = association_type.category
                    label = association_type.label
                    type_id = association_type.type_id

                    parsed_data.append({
                        "from_id": from_id,
                        "to_id": to_object_id,
                        "from_object_type": from_object_type,
                        "to_object_type": to_object_type,
                        "category": category,
                        "label": label,
                        "type_id": type_id
                    })

        return parsed_data

    def _parse_date(self, date_to_parse: str) -> int:
        if date_to_parse.lower() in {"last", "lastrun", "last run"}:
            state = self.get_state_file()
            # remove 1 hour / 3600000ms so there is no issue if data is being downloaded at the same time an object is
            # being inserted/ being updated
            return int(state.get("last_run", int(dateparser.parse(DEFAULT_DATE_FROM).timestamp() * 1000))) - 3600000
        try:
            parsed_timestamp = int(dateparser.parse(date_to_parse).timestamp() * 1000)
        except (AttributeError, TypeError) as err:
            raise UserException(f"Failed to parse date {date_to_parse}, make sure the date is either in YYYY-MM-DD "
                                f"format or relative date i.e. 5 days ago, 1 month ago, yesterday, etc.") from err
        return parsed_timestamp

    def _validate_associations(self) -> None:
        fetching_endpoints = [endpoint_name for endpoint_name, fetch_endpoint in
                              vars(self._configuration.endpoints).items() if
                              fetch_endpoint]

        endpoints_in_associations = [association.from_object for association in self._configuration.associations]
        for endpoint in endpoints_in_associations:
            if endpoint not in fetching_endpoints:
                raise UserException(f"All objects for which associations should be fetched must be present "
                                    f"in the selected endpoints to be downloaded. The object '{endpoint}' "
                                    f"is not specified in the objects to fetch : '{fetching_endpoints}.")

    @staticmethod
    def _parse_properties(properties: Union[str, List]) -> List:
        if isinstance(properties, str):
            # in case the user saves the config when the comma separated list is still in the properties
            # the "item1,item2" becomes ["item1,item2"] and this must be parsed
            properties = properties.strip()
            return properties.split(",") if properties else []
        elif len(properties) == 1 and properties[0].count(',') >= 1:
            return [p.strip() for p in properties[0].split(",")]
        return properties

    @staticmethod
    def _timestamp_to_datetime(time_in_millis: int) -> str:
        return str(datetime.datetime.fromtimestamp(time_in_millis / 1000.0, tz=datetime.timezone.utc))

    @staticmethod
    def _process_property_history(hs_object_name, hs_object_id, properties_with_history):
        history = []
        if not properties_with_history:
            properties_with_history = {}
        for property_history in properties_with_history:
            for history_event in properties_with_history[property_history]:
                parsed_history_event = {"hs_object": hs_object_name,
                                        "hs_object_id": hs_object_id,
                                        "hs_object_property_name": property_history,
                                        "source_id": history_event.source_id,
                                        "source_label": history_event.source_label,
                                        "source_type": history_event.source_type,
                                        "updated_by_user_id": history_event.updated_by_user_id,
                                        "value": history_event.value,
                                        "timestamp": history_event.timestamp}
                history.append(parsed_history_event)

        return history

    @staticmethod
    def _convert_hubspot_type_to_keboola_base_type(hubspot_type: str) -> SupportedDataTypes:
        type_conversions = {"number": SupportedDataTypes.NUMERIC,
                            "string": SupportedDataTypes.STRING,
                            "datetime": SupportedDataTypes.TIMESTAMP,
                            "date": SupportedDataTypes.DATE,
                            "enumeration": SupportedDataTypes.STRING,
                            "bool": SupportedDataTypes.BOOLEAN,
                            "phone_number": SupportedDataTypes.STRING,
                            "json": SupportedDataTypes.STRING}
        # TODO FIX JSON PARSING FOR CRM OBJECTS
        return type_conversions.get(hubspot_type, SupportedDataTypes.STRING)

    def _add_base_fields_to_field_schema_list(self, columns: List[FieldSchema]) -> List[FieldSchema]:
        for base_column in ["archived_at", "archived", "created_at", "updated_at", "id"]:
            self.insert_base_column(columns, base_column)
        return columns

    @staticmethod
    def insert_base_column(columns, column_name):
        column_exists = any(column_schema.name == column_name for column_schema in columns)
        if not column_exists:
            columns.insert(0, FieldSchema(name=column_name, description="", base_type=SupportedDataTypes.STRING))

    def _fetch_object_properties(self, object_name: str) -> List[SelectElement]:
        self._init_configuration()
        self._init_client()
        obj_prop = self.client.get_crm_object_properties(object_name)
        return [SelectElement(value=prop['name'], label=f'{prop["label"]} ({prop["name"]})') for prop in obj_prop]

    @sync_action('loadContactProperties')
    def load_contact_properties(self) -> List[SelectElement]:
        return self._fetch_object_properties("contact")

    @sync_action('loadCompanyProperties')
    def load_company_properties(self) -> List[SelectElement]:
        return self._fetch_object_properties("company")

    @sync_action('loadDealProperties')
    def load_deal_properties(self) -> List[SelectElement]:
        return self._fetch_object_properties("deal")

    @sync_action('loadLineItemProperties')
    def load_line_item_properties(self) -> List[SelectElement]:
        return self._fetch_object_properties("line_item")

    @sync_action('loadProductProperties')
    def load_product_properties(self) -> List[SelectElement]:
        return self._fetch_object_properties("product")

    @sync_action('loadTicketProperties')
    def load_ticket_properties(self) -> List[SelectElement]:
        return self._fetch_object_properties("ticket")

    @sync_action('loadQuoteProperties')
    def load_quote_properties(self) -> List[SelectElement]:
        return self._fetch_object_properties("quote")

    @sync_action('loadCallProperties')
    def load_call_properties(self) -> List[SelectElement]:
        return self._fetch_object_properties("call")

    @sync_action('loadEmailProperties')
    def load_email_properties(self) -> List[SelectElement]:
        return self._fetch_object_properties("email")

    @sync_action('loadMeetingProperties')
    def load_meeting_properties(self) -> List[SelectElement]:
        return self._fetch_object_properties("meeting")

    @sync_action('loadNoteProperties')
    def load_note_properties(self) -> List[SelectElement]:
        return self._fetch_object_properties("note")

    @sync_action('loadTaskProperties')
    def load_task_properties(self) -> List[SelectElement]:
        return self._fetch_object_properties("task")


if __name__ == "__main__":
    try:
        comp = Component()
        # this triggers the run method by default and is controlled by the configuration.action parameter
        comp.execute_action()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)



================================================
File: src/configuration.py
================================================
import dataclasses
import json
from dataclasses import dataclass, field
from enum import Enum
from typing import Union, Optional

import dataconf


class ConfigurationBase:
    @staticmethod
    def _convert_private_value(value: str):
        return value.replace('"#', '"pswd_')

    @staticmethod
    def _convert_private_value_inv(value: str):
        if value and value.startswith("pswd_"):
            return value.replace("pswd_", "#", 1)
        else:
            return value

    @classmethod
    def load_from_dict(cls, configuration: dict):
        """
        Initialize the configuration dataclass object from dictionary.
        Args:
            configuration: Dictionary loaded from json configuration.

        Returns:

        """
        json_conf = json.dumps(configuration)
        json_conf = ConfigurationBase._convert_private_value(json_conf)
        return dataconf.loads(json_conf, cls, ignore_unexpected=True)

    @classmethod
    def get_dataclass_required_parameters(cls) -> list[str]:
        """
        Return list of required parameters based on the dataclass definition (no default value)
        Returns: list[str]

        """
        return [cls._convert_private_value_inv(f.name)
                for f in dataclasses.fields(cls)
                if f.default == dataclasses.MISSING
                and f.default_factory == dataclasses.MISSING]


@dataclass
class Endpoints(ConfigurationBase):
    campaign: bool = False
    contact: bool = False
    company: bool = False
    deal: bool = False
    line_item: bool = False
    quote: bool = False
    product: bool = False
    owner: bool = False
    ticket: bool = False
    contact_list: bool = False
    email_event: bool = False
    form: bool = False
    pipeline: bool = False
    note: bool = False
    call: bool = False
    task: bool = False
    meeting: bool = False
    email: bool = False
    email_statistic: bool = False
    custom_object: bool = False

    @property
    def enabled(self):
        return [endpoint_name for endpoint_name, endpoint_is_enabled in vars(self).items() if endpoint_is_enabled]


class ObjectProperties(str, Enum):
    ALL = "all"
    BASE = "base"
    CUSTOM = "custom"


@dataclass
class AdditionalProperties(ConfigurationBase):
    fetch_property_history: bool = False
    email_event_types: Union[str, list[str]] = field(default_factory=list)
    custom_object_types: Union[str, list[str]] = field(default_factory=list)
    contact_properties: Union[str, list[str]] = field(default_factory=list)
    contact_property_history: Union[str, list[str]] = field(default_factory=list)
    company_properties: Union[str, list[str]] = field(default_factory=list)
    company_property_history: Union[str, list[str]] = field(default_factory=list)
    deal_properties: Union[str, list[str]] = field(default_factory=list)
    deal_property_history: Union[str, list[str]] = field(default_factory=list)
    line_item_properties: Union[str, list[str]] = field(default_factory=list)
    line_item_property_history: Union[str, list[str]] = field(default_factory=list)
    product_properties: Union[str, list[str]] = field(default_factory=list)
    product_property_history: Union[str, list[str]] = field(default_factory=list)
    ticket_properties: Union[str, list[str]] = field(default_factory=list)
    ticket_property_history: Union[str, list[str]] = field(default_factory=list)
    quote_properties: Union[str, list[str]] = field(default_factory=list)
    quote_property_history: Union[str, list[str]] = field(default_factory=list)
    call_properties: Union[str, list[str]] = field(default_factory=list)
    call_property_history: Union[str, list[str]] = field(default_factory=list)
    email_properties: Union[str, list[str]] = field(default_factory=list)
    email_property_history: Union[str, list[str]] = field(default_factory=list)
    meeting_properties: Union[str, list[str]] = field(default_factory=list)
    meeting_property_history: Union[str, list[str]] = field(default_factory=list)
    note_properties: Union[str, list[str]] = field(default_factory=list)
    note_property_history: Union[str, list[str]] = field(default_factory=list)
    task_properties: Union[str, list[str]] = field(default_factory=list)
    task_property_history: Union[str, list[str]] = field(default_factory=list)
    object_properties: ObjectProperties = ObjectProperties.BASE


class HubspotObject(str, Enum):
    CAMPAIGN = "campaign"
    CONTACT = "contact"
    COMPANY = "company"
    DEAL = "deal"
    QUOTE = "quote"
    PRODUCT = "product"
    OWNER = "owner"
    TICKET = "ticket"
    FORM = "form"
    PIPELINE = "pipeline"
    NOTE = "note"
    CALL = "call"
    TASK = "task"
    MEETING = "meeting"
    EMAIL = "email"
    LINE_ITEM = "line_item"
    CUSTOM_OBJECT = "custom_object"


@dataclass
class Association(ConfigurationBase):
    from_object: HubspotObject
    to_object: HubspotObject


class FetchMode(str, Enum):
    FULL_FETCH = "full_fetch"
    INCREMENTAL_FETCH = "incremental_fetch"


@dataclass
class FetchSettings(ConfigurationBase):
    archived: bool = False
    fetch_mode: FetchMode = FetchMode.FULL_FETCH
    date_from: str = "yesterday"
    associations_batch_size: int = 100


class LoadMode(str, Enum):
    FULL_LOAD = "full_load"
    INCREMENTAL_LOAD = "incremental_load"


@dataclass
class DestinationSettings(ConfigurationBase):
    load_mode: LoadMode = LoadMode.INCREMENTAL_LOAD


@dataclass
class Configuration(ConfigurationBase):
    pswd_private_app_token: str
    endpoints: Endpoints
    additional_properties: AdditionalProperties
    associations: list[Association]
    fetch_settings: FetchSettings
    destination_settings: DestinationSettings
    override_parser_depth: Optional[int] = None



================================================
File: src/json_parser.py
================================================
DEFAULT_MAX_PARSE_DEPTH = 2


class FlattenJsonParser:
    """
            Parser for parsing nested dictionaries. Initialize the parser with optional parameters. And use
            either parse_row to parse a single Dict, or parse_data to parse a list of dicts.

            by default, the parser will parse:

                 [{"nesting_0": "0",
                  "nesting_1": {"nesting_1": "1"},
                  "nesting_2": {"nesting_2": {"nesting_2": "2"}},
                  "nesting_3": {"nesting_3": {"nesting_3": {"nesting_3": "3"}}},
                  "nesting_4": {"nesting_4": {"nesting_4": {"nesting_4": {"nesting_4": "4"}}}}
                  }]

            as:

                 [{"nesting_0": "0",
                 "nesting_1_nesting_1": "1",
                 "nesting_2_nesting_2_nesting_2": "2",
                 "nesting_3_nesting_3_nesting_3": {"nesting_3": "3"},
                 "nesting_4_nesting_4_nesting_4": {"nesting_4": {"nesting_4": "4"}}}]


            Args:
                child_separator: The character that will be used to indicate the parsing of nested dictionaries.
                                 e.g. "address": {"house_number": "1"}  with child_separator set to "#" would be parsed
                                 as "address#house_number": "1"

                max_parsing_depth: The max depth indicates how deep the parser will parse nested dictionaries. After
                                   the max depth is reached, the rest of the nested dict will not be parsed and will
                                   be saved as is. The depth starts as 0, so an input dict of {"name" : "Tom"} is depth
                                   0.  {"address": {"house_number": "1"} } would be depth 1, and so on.

    """

    def __init__(self, child_separator: str = '_', max_parsing_depth=DEFAULT_MAX_PARSE_DEPTH):
        self.child_separator = child_separator
        self.max_parsing_depth = max_parsing_depth

    def parse_data(self, data):
        for i, row in enumerate(data):
            data[i] = self._flatten_row(row)
        return data

    def parse_row(self, row: dict):
        return self._flatten_row(row)

    @staticmethod
    def _construct_key(parent_key, separator, child_key):
        return "".join([parent_key, separator, child_key]) if parent_key else child_key

    def _flatten_row(self, nested_dict):
        if len(nested_dict) == 0:
            return {}
        flattened_dict = {}

        def _flatten(dict_object, name_with_parent='', current_depth=0):
            if isinstance(dict_object, dict) and current_depth <= self.max_parsing_depth:
                for key in dict_object:
                    new_parent_name = self._construct_key(name_with_parent, self.child_separator, key)
                    new_depth = current_depth + 1
                    _flatten(dict_object[key], name_with_parent=new_parent_name, current_depth=new_depth)
            else:
                flattened_dict[name_with_parent] = dict_object

        _flatten(nested_dict, current_depth=0)
        return flattened_dict



================================================
File: src/table_handler.py
================================================
import copy

from keboola.component.dao import TableDefinition
from keboola.csvwriter import ElasticDictWriter


class TableHandler:
    def __init__(self, table_definition: TableDefinition, writer: ElasticDictWriter):
        self.table_definition = table_definition
        self.writer = writer

    def redefine_table_column_metadata(self, state_columns):
        """
        Only saves metadata of columns that are not defined in the state.
        Purpose: when downloading many objects with all properties, rewriting the column metadata every time wastes
        SAPI resources and elongates the job run, as each column metadata has to be reset. Once a column is saved in
        the state we know that the metadata for the column has been saved, so we should only write metadata for new
        columns.
        """

        new_metadata = {}
        for col_name in self.table_definition.table_metadata.column_metadata:
            if col_name not in state_columns:
                new_metadata[col_name] = self.table_definition.table_metadata.column_metadata[col_name]
        self.table_definition.table_metadata.column_metadata = new_metadata

    def writerows(self, row_dicts):
        self.writer.writerows(row_dicts)

    def writerow(self, row):
        self.writer.writerow(row)

    def close_writer(self):
        self.writer.close()

    @property
    def writer_fields(self):
        return copy.copy(self.writer.fieldnames)

    def swap_column_names_in_table_definition(self, column_swaps: dict):

        columns = self.writer.fieldnames

        key_map = {}
        for i, column_name in enumerate(columns):
            if column_name in list(column_swaps.keys()):
                key_map[column_name] = column_swaps[column_name]
                columns[i] = column_swaps[column_name]

        column_metadata = self.table_definition.table_metadata.column_metadata
        self.table_definition.table_metadata.column_metadata = {key_map.get(k, k): v
                                                                for (k, v) in
                                                                column_metadata.items()}
        primary_keys = self.table_definition.primary_key
        new_primary_keys = []
        for primary_key in primary_keys:
            if primary_key in list(column_swaps.keys()):
                new_primary_keys.append(column_swaps[primary_key])
            else:
                new_primary_keys.append(primary_key)
        self.table_definition.primary_key = new_primary_keys

        columns = self.table_definition.columns
        new_columns = []
        for column in columns:
            if column in list(column_swaps.keys()):
                new_columns.append(column_swaps[column])
            else:
                new_columns.append(column)
        self.table_definition.columns = new_columns



================================================
File: src/client/__init__.py
================================================
from .client import HubspotClient, HubspotClientException  # noqa



================================================
File: src/client/client.py
================================================
import json
import logging
from json import JSONDecodeError
from typing import Dict, Generator, Iterator, List, Optional

import requests
from hubspot import HubSpot
from hubspot.crm import (companies, contacts, deals, line_items, owners,
                         pipelines, products, properties, quotes, tickets, objects)
from hubspot.crm.associations import BatchInputPublicObjectId
from hubspot.crm.objects import calls, emails, meetings, notes, tasks
from keboola.http_client import HttpClient
from urllib3.util.retry import Retry as urlibRetry

BASE_URL = "https://api.hubapi.com/"

ENDPOINT_CAMPAIGNS_BY_ID = "email/public/v1/campaigns/by-id"
ENDPOINT_CAMPAIGNS = "/email/public/v1/campaigns/"
ENDPOINTS_CONTACT_LISTS = "contacts/v1/lists/"
ENDPOINT_FORMS = "marketing/v3/forms/"
ENDPOINT_EMAIL_EVENTS = 'email/public/v1/events'
ENDPOINT_EMAIL_STATISTICS = 'marketing-emails/v1/emails/with-statistics'
ENDPOINT_CUSTOM_OBJECTS = 'crm/v3/objects'

HUBSPOT_API_SEARCH_LIMIT = 9999
PAGE_MAX_SIZE = 100
PAGE_WITH_HISTORY_MAX_SIZE = 50
DEFAULT_V1_LIMIT = 1000
BATCH_LIMIT = 100
MAX_RETRIES = 5
MAX_TIMEOUT = 10
DEFAULT_BACKOFF = 0.3
DEFAULT_ASSOCIATION_BATCH_SIZE = 100
EVENT_TYPES = ["DEFERRED", "CLICK", "DROPPED", "DELIVERED", "PROCESSED", "OPEN", "BOUNCE", "SENT"]


class HubspotClientException(Exception):
    pass


class HubspotClient(HttpClient):
    def __init__(self, access_token, association_batch_size: int = DEFAULT_ASSOCIATION_BATCH_SIZE):
        retry_settings = urlibRetry(
            total=MAX_RETRIES,
            status=MAX_RETRIES,
            backoff_factor=DEFAULT_BACKOFF,
            allowed_methods=frozenset({"HEAD", "GET", "PUT", "POST"}),
            status_forcelist=(429, 500, 502, 504),
        )
        self.client_v3 = HubSpot(access_token=access_token, retry=retry_settings)
        auth_header = {'Authorization': f'Bearer {access_token}'}
        super().__init__(BASE_URL, auth_header=auth_header, status_forcelist=(429, 500, 502, 504, 524))

        self.association_batch_size = association_batch_size
        if self.association_batch_size != DEFAULT_ASSOCIATION_BATCH_SIZE:
            logging.info(f"Association batch size set to {self.association_batch_size}")

    def get_crm_object_properties(self, object_type: str) -> List:
        try:
            return self.client_v3.crm.properties.core_api.get_all(object_type=object_type).to_dict().get("results")
        except properties.exceptions.ApiException as exc:
            self._raise_exception_from_status_code(exc.status, object_type, exc.body)

    def get_contacts(self, object_properties: List, incremental: bool = False, archived: bool = False,
                     since_date: str = None, since_property: str = "lastmodifieddate",
                     properties_with_history: Optional[List] = None) -> Generator:
        return self._fetch_object_data(properties=object_properties,
                                       properties_with_history=properties_with_history,
                                       endpoint_name="contact",
                                       search_request_object=contacts.PublicObjectSearchRequest,
                                       search_api=self.client_v3.crm.contacts.search_api.do_search,
                                       basic_api=self.client_v3.crm.contacts.basic_api,
                                       exception=contacts.ApiException,
                                       incremental=incremental,
                                       archived=archived,
                                       since_date=since_date,
                                       since_property=since_property)

    def get_companies(self, object_properties: List, incremental: bool = False, archived: bool = False,
                      since_date: str = None, since_property: str = "hs_lastmodifieddate",
                      properties_with_history: Optional[List] = None) -> Generator:
        return self._fetch_object_data(properties=object_properties,
                                       properties_with_history=properties_with_history,
                                       endpoint_name="company",
                                       search_request_object=companies.PublicObjectSearchRequest,
                                       search_api=self.client_v3.crm.companies.search_api.do_search,
                                       basic_api=self.client_v3.crm.companies.basic_api,
                                       exception=companies.ApiException,
                                       incremental=incremental,
                                       archived=archived,
                                       since_date=since_date,
                                       since_property=since_property)

    def get_deals(self, object_properties: List, incremental: bool = False, archived: bool = False,
                  since_date: str = None, since_property: str = "hs_lastmodifieddate",
                  properties_with_history: Optional[List] = None) -> Generator:
        return self._fetch_object_data(properties=object_properties,
                                       properties_with_history=properties_with_history,
                                       endpoint_name="deal",
                                       search_request_object=deals.PublicObjectSearchRequest,
                                       search_api=self.client_v3.crm.deals.search_api.do_search,
                                       basic_api=self.client_v3.crm.deals.basic_api,
                                       exception=deals.ApiException,
                                       incremental=incremental,
                                       archived=archived,
                                       since_date=since_date,
                                       since_property=since_property)

    def get_line_items(self, object_properties: List, incremental: bool = False, archived: bool = False,
                       since_date: str = None, since_property: str = "hs_lastmodifieddate",
                       properties_with_history: Optional[List] = None) -> Generator:
        return self._fetch_object_data(properties=object_properties,
                                       properties_with_history=properties_with_history,
                                       endpoint_name="line_item",
                                       search_request_object=line_items.PublicObjectSearchRequest,
                                       search_api=self.client_v3.crm.line_items.search_api.do_search,
                                       basic_api=self.client_v3.crm.line_items.basic_api,
                                       exception=line_items.ApiException,
                                       incremental=incremental,
                                       archived=archived,
                                       since_date=since_date,
                                       since_property=since_property)

    def get_products(self, object_properties: List, incremental: bool = False, archived: bool = False,
                     since_date: str = None, since_property: str = "hs_lastmodifieddate",
                     properties_with_history: Optional[List] = None) -> Generator:
        return self._fetch_object_data(properties=object_properties,
                                       properties_with_history=properties_with_history,
                                       endpoint_name="product",
                                       search_request_object=products.PublicObjectSearchRequest,
                                       search_api=self.client_v3.crm.products.search_api.do_search,
                                       basic_api=self.client_v3.crm.products.basic_api,
                                       exception=products.ApiException,
                                       incremental=incremental,
                                       archived=archived,
                                       since_date=since_date,
                                       since_property=since_property)

    def get_quotes(self, object_properties: List, incremental: bool = False, archived: bool = False,
                   since_date: str = None, since_property: str = "hs_lastmodifieddate",
                   properties_with_history: Optional[List] = None) -> Generator:
        if archived:
            logging.info("Cannot fetch archived objects of type quote, it is not yet supported")
            archived = False
        return self._fetch_object_data(properties=object_properties,
                                       properties_with_history=properties_with_history,
                                       endpoint_name="quote",
                                       search_request_object=quotes.PublicObjectSearchRequest,
                                       search_api=self.client_v3.crm.quotes.search_api.do_search,
                                       basic_api=self.client_v3.crm.quotes.basic_api,
                                       exception=quotes.ApiException,
                                       incremental=incremental,
                                       archived=archived,
                                       since_date=since_date,
                                       since_property=since_property)

    def get_tickets(self, object_properties: List, incremental: bool = False, archived: bool = False,
                    since_date: str = None, since_property: str = "hs_lastmodifieddate",
                    properties_with_history: Optional[List] = None) -> Generator:
        return self._fetch_object_data(properties=object_properties,
                                       properties_with_history=properties_with_history,
                                       endpoint_name="ticket",
                                       search_request_object=tickets.PublicObjectSearchRequest,
                                       search_api=self.client_v3.crm.tickets.search_api.do_search,
                                       basic_api=self.client_v3.crm.tickets.basic_api,
                                       exception=tickets.ApiException,
                                       incremental=incremental,
                                       archived=archived,
                                       since_date=since_date,
                                       since_property=since_property)

    def get_owners(self, archived: bool = False) -> Generator:
        return self._paginate_v3_object(self.client_v3.crm.owners.owners_api, "owner", exception=owners.ApiException,
                                        archived=archived)

    def get_deal_pipelines(self) -> List:
        try:
            return self.client_v3.crm.pipelines.pipelines_api.get_all(object_type="deals").to_dict().get("results")
        except pipelines.exceptions.ApiException as exc:
            self._raise_exception_from_status_code(exc.status, "pipelines", exc.body)

    def get_ticket_pipelines(self) -> List:
        try:
            return self.client_v3.crm.pipelines.pipelines_api.get_all(object_type="tickets").to_dict().get("results")
        except pipelines.exceptions.ApiException as exc:
            self._raise_exception_from_status_code(exc.status, "pipelines", exc.body)

    def get_engagements_notes(self, object_properties: List, incremental: bool = False, archived: bool = False,
                              since_date: str = None, since_property: str = "hs_lastmodifieddate",
                              properties_with_history: Optional[List] = None) -> Generator:
        if archived:
            logging.info("Cannot fetch archived objects of type 'note', it is not yet supported")
            archived = False
        return self._fetch_object_data(properties=object_properties,
                                       properties_with_history=properties_with_history,
                                       endpoint_name="note",
                                       search_request_object=notes.PublicObjectSearchRequest,
                                       search_api=self.client_v3.crm.objects.notes.search_api.do_search,
                                       basic_api=self.client_v3.crm.objects.notes.basic_api,
                                       exception=notes.ApiException,
                                       incremental=incremental,
                                       archived=archived,
                                       since_date=since_date,
                                       since_property=since_property)

    def get_engagements_calls(self, object_properties: List, incremental: bool = False, archived: bool = False,
                              since_date: str = None, since_property: str = "hs_lastmodifieddate",
                              properties_with_history: Optional[List] = None) -> Generator:
        if archived:
            logging.info("Cannot fetch archived objects of type 'call', it is not yet supported")
            archived = False
        return self._fetch_object_data(properties=object_properties,
                                       properties_with_history=properties_with_history,
                                       endpoint_name="call",
                                       search_request_object=calls.PublicObjectSearchRequest,
                                       search_api=self.client_v3.crm.objects.calls.search_api.do_search,
                                       basic_api=self.client_v3.crm.objects.calls.basic_api,
                                       exception=calls.ApiException,
                                       incremental=incremental,
                                       archived=archived,
                                       since_date=since_date,
                                       since_property=since_property)

    def get_engagements_tasks(self, object_properties: List, incremental: bool = False, archived: bool = False,
                              since_date: str = None, since_property: str = "hs_lastmodifieddate",
                              properties_with_history: Optional[List] = None) -> Generator:
        if archived:
            logging.info("Cannot fetch archived objects of type 'tasks', it is not yet supported")
            archived = False
        return self._fetch_object_data(properties=object_properties,
                                       properties_with_history=properties_with_history,
                                       endpoint_name="task",
                                       search_request_object=tasks.PublicObjectSearchRequest,
                                       search_api=self.client_v3.crm.objects.tasks.search_api.do_search,
                                       basic_api=self.client_v3.crm.objects.tasks.basic_api,
                                       exception=tasks.ApiException,
                                       incremental=incremental,
                                       archived=archived,
                                       since_date=since_date,
                                       since_property=since_property)

    def get_engagements_meetings(self, object_properties: List, incremental: bool = False, archived: bool = False,
                                 since_date: str = None, since_property: str = "hs_lastmodifieddate",
                                 properties_with_history: Optional[List] = None) -> Generator:
        if archived:
            logging.info("Cannot fetch archived objects of type 'meeting', it is not yet supported")
            archived = False
        return self._fetch_object_data(properties=object_properties,
                                       properties_with_history=properties_with_history,
                                       endpoint_name="meeting",
                                       search_request_object=meetings.PublicObjectSearchRequest,
                                       search_api=self.client_v3.crm.objects.meetings.search_api.do_search,
                                       basic_api=self.client_v3.crm.objects.meetings.basic_api,
                                       exception=meetings.ApiException,
                                       incremental=incremental,
                                       archived=archived,
                                       since_date=since_date,
                                       since_property=since_property)

    def get_engagements_emails(self, object_properties: List, incremental: bool = False, archived: bool = False,
                               since_date: str = None, since_property: str = "hs_lastmodifieddate",
                               properties_with_history: Optional[List] = None) -> Generator:
        if archived:
            logging.info("Cannot fetch archived objects of type 'email', it is not yet supported")
            archived = False
        return self._fetch_object_data(properties=object_properties,
                                       properties_with_history=properties_with_history,
                                       endpoint_name="email",
                                       search_request_object=emails.PublicObjectSearchRequest,
                                       search_api=self.client_v3.crm.objects.emails.search_api.do_search,
                                       basic_api=self.client_v3.crm.objects.emails.basic_api,
                                       exception=emails.ApiException,
                                       incremental=incremental,
                                       archived=archived,
                                       since_date=since_date,
                                       since_property=since_property)

    def get_campaigns(self) -> Generator:
        for campaign_page in self._get_paged_result_pages(ENDPOINT_CAMPAIGNS_BY_ID, {}, 'campaigns'):
            for campaign in campaign_page:
                yield [self.get_campaign_details(campaign.get('id'))]

    def get_campaign_details(self, campaign_id: str) -> Dict:
        try:
            req = self.get_raw(f"{ENDPOINT_CAMPAIGNS}/{campaign_id}", timeout=MAX_TIMEOUT)
        except ConnectionError as exc:
            raise HubspotClientException(f"Connection to Hubspot failed due :{exc}") from exc
        self._check_http_result(req, "campaigns")
        return req.json()

    def get_custom_objects(self, object_properties: List, incremental: bool = False, archived: bool = False,
                           since_date: str = None, since_property: str = "hs_lastmodifieddate",
                           properties_with_history: Optional[List] = None, custom_object: str = None) -> Generator:
        logging.info(f"Fetching Custom Object: {custom_object}")
        return self._fetch_object_data(properties=object_properties,
                                       properties_with_history=properties_with_history,
                                       endpoint_name=custom_object,
                                       search_request_object=objects.PublicObjectSearchRequest,
                                       search_api=self.client_v3.crm.objects.search_api.do_search,
                                       basic_api=self.client_v3.crm.objects.basic_api,
                                       exception=objects.ApiException,
                                       incremental=incremental,
                                       archived=archived,
                                       since_date=since_date,
                                       since_property=since_property,
                                       object_type=custom_object)

    def get_contact_lists(self) -> Generator:
        yield from self._get_paged_result_pages(ENDPOINTS_CONTACT_LISTS, {}, 'lists')

    def get_email_statistics(self, updated_since: Optional[int] = None) -> Generator:
        parameters = {"updated__gte": updated_since} if updated_since else {}
        yield from self._get_paged_result_pages(ENDPOINT_EMAIL_STATISTICS, parameters, 'objects')

    def get_email_events(self, email_events: List) -> Generator:
        if not email_events:
            email_events = EVENT_TYPES
        logging.info(f"Fetching email Events for events : {email_events}")
        for event in email_events:
            yield from self._get_paged_result_pages(ENDPOINT_EMAIL_EVENTS, {"eventType": event}, 'events')

    def get_forms(self) -> Generator:
        yield from self._get_paged_result_pages_v3(ENDPOINT_FORMS, {})

    def get_associations_v4(
            self,
            object_id_generator: Iterator,
            from_object_type: str,
            to_object_type: str
    ) -> Dict:
        batch_inputs = self._format_batch_inputs(object_id_generator)

        for input_chunk in self.divide_chunks(batch_inputs, self.association_batch_size):
            batch_input_chunk = BatchInputPublicObjectId(inputs=input_chunk)
            response = self.client_v3.crm.associations.v4.batch_api.get_page(
                from_object_type=from_object_type,
                to_object_type=to_object_type,
                batch_input_public_fetch_associations_batch_request=batch_input_chunk
            )
            yield response.results

    @staticmethod
    def _format_batch_inputs(object_ids):
        return [{"id": object_id} for object_id in object_ids]

    @staticmethod
    def divide_chunks(list_to_divide, list_len):
        for i in range(0, len(list_to_divide), list_len):
            yield list_to_divide[i:i + list_len]

    def _fetch_object_data(self, properties: List, endpoint_name: str, exception, basic_api, search_api,
                           search_request_object, since_date: str, since_property: str, incremental: bool = False,
                           archived: bool = False, properties_with_history: Optional[List] = None,
                           **kwargs) -> Generator:
        if incremental:
            filter_groups = [{"filters": [
                {"value": since_date, "propertyName": since_property, "operator": "GTE"}]}]
            sorts = [{"propertyName": since_property, "direction": "DESCENDING"}]
            search_request = search_request_object(filter_groups=filter_groups,
                                                   sorts=sorts,
                                                   properties=properties,
                                                   limit=BATCH_LIMIT,
                                                   after=0)
            total = self._paginate_v3_object_search_total(search_api,
                                                          endpoint_name,
                                                          search_request=search_request,
                                                          exception=exception,
                                                          **kwargs)
            if total < HUBSPOT_API_SEARCH_LIMIT:
                return self._paginate_v3_object_search(search_api,
                                                       endpoint_name,
                                                       search_request=search_request,
                                                       exception=exception,
                                                       **kwargs)
            else:
                logging.info(
                    f"Cannot fetch incrementally object {endpoint_name}"
                    f"with more than 10000 rows per interval! Switched to full fetch for this object."
                )

        return self._paginate_v3_object(basic_api,
                                        endpoint_name,
                                        exception=exception,
                                        properties=properties,
                                        properties_with_history=properties_with_history,
                                        archived=archived,
                                        **kwargs)

    def _paginate_v3_object(self, api_object, endpoint_name, exception, **kwargs) -> Generator:
        after = None
        while True:
            page = self._get_page_result(api_object, endpoint_name, after, exception, **kwargs)
            yield page.results
            if page.paging is None:
                break
            after = page.paging.next.after

    def _get_page_result(self, api_object, endpoint_name, after, exception, **kwargs):
        try:
            return api_object.get_page(after=after, limit=PAGE_WITH_HISTORY_MAX_SIZE, **kwargs)
        except exception as exc:
            self._raise_exception_from_status_code(exc.status, endpoint_name, exc.body)

    def _get_paged_result_pages(self, endpoint: str, parameters: Dict, res_obj_name: str, offset: str = None,
                                limit: int = DEFAULT_V1_LIMIT) -> Generator:
        has_more = True
        while has_more:
            parameters['offset'] = offset
            parameters['limit'] = limit
            data = []

            try:
                req = self.get_raw(endpoint, params=parameters, timeout=MAX_TIMEOUT)
            except ConnectionError as exc:
                raise HubspotClientException(f"Connection to Hubspot failed due :{exc}") from exc
            self._check_http_result(req, endpoint)
            req_response = self._parse_response_text(req, endpoint, parameters)
            if req_response.get('hasMore'):
                has_more = True
                offset = req_response['offset']
            else:
                has_more = False
            if req_response.get(res_obj_name):
                data = req_response[res_obj_name]
            else:
                logging.debug(f'Empty response {req_response}')

            yield data

    def _check_http_result(self, response: requests.Response, endpoint: str) -> None:
        reason = self._decode_response_reason(response.reason)
        self._raise_exception_from_status_code(response.status_code, endpoint, reason)

    @staticmethod
    def _raise_exception_from_status_code(status_code: int, endpoint: str, reason: str = ""):
        if status_code == 401:
            raise HubspotClientException(f'Unauthorized request, please make sure your credentials are valid. '
                                         f'\n {reason}')
        if status_code == 403:
            raise HubspotClientException(f'Unauthorized request, please make sure your credentials contain the correct '
                                         f'scopes. The request failed during endpoint "{endpoint}", '
                                         f'make sure you have the read access scope for this endpoint. '
                                         f'\n {reason}')
        elif 400 <= status_code < 600:
            raise HubspotClientException(f'Request to "{endpoint}" failed {status_code} Error : {reason}')

    @staticmethod
    def _decode_response_reason(reason: str) -> str:
        if isinstance(reason, bytes):
            # We attempt to decode utf-8 first because some servers choose to localize their reason strings.
            # If the string isn't utf-8, we fall back to iso-8859-1 for all other encodings.
            try:
                reason = reason.decode('utf-8')
            except UnicodeDecodeError:
                reason = reason.decode('iso-8859-1')
        else:
            reason = reason
        return reason

    @staticmethod
    def _parse_response_text(response: requests.Response, endpoint: str, parameters: Dict) -> Dict:
        try:
            return response.json()
        except JSONDecodeError as e:
            raise HubspotClientException(f'The HS API response is invalid. endpoint: {endpoint}, '
                                         f'parameters: {parameters}. '
                                         f'' f'Status: {response.status_code}. '
                                         f'' f'Response: {response.text[:250]}... {e}') from e

    def _get_paged_result_pages_v3(self, endpoint: str, parameters: Dict, limit: int = PAGE_MAX_SIZE):
        has_more = True
        while has_more:
            parameters['limit'] = limit
            req_response = self.get_raw(endpoint, params=parameters, timeout=MAX_TIMEOUT)

            self._check_http_result(req_response, endpoint)
            response, parameters, has_more = self._process_v3_response(req_response, parameters)

            results = []
            if response.get('results'):
                results = response['results']
            else:
                logging.debug(f'Empty response {response}')

            yield results

    @staticmethod
    def _process_v3_response(req_response: requests.Response, parameters: Dict):
        resp_text = str.encode(req_response.text, 'utf-8')
        response = json.loads(resp_text)

        if response.get('paging', {}).get('next', {}).get('after'):
            has_more = True
            after = response['paging']['next']['after']
            parameters['after'] = after
        else:
            has_more = False

        return response, parameters, has_more

    def _paginate_v3_object_search(self, search_callable, endpoint_name, search_request, exception, **kwargs):
        while True:
            page = self._get_search_result(search_callable, endpoint_name, search_request, exception, **kwargs)
            yield page.results
            if page.paging is None:
                break
            search_request.after = page.paging.next.after

    def _paginate_v3_object_search_total(self, search_callable, endpoint_name, search_request, exception, **kwargs):
        page = self._get_search_result(
            search_callable, endpoint_name, search_request, exception, **kwargs)
        return page.total

    def _get_search_result(self, search_callable, endpoint_name, search_request, exception, **kwargs):
        try:
            return search_callable(public_object_search_request=search_request, **kwargs)
        except exception as exc:
            self._raise_exception_from_status_code(exc.status, endpoint_name, exc.body)



================================================
File: src/schemas/association.json
================================================
{
  "name": "association",
  "description": "",
  "primary_keys": [
    "from_id",
    "to_id",
    "type_id"
  ],
  "fields": [
    {
      "name": "from_id",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "to_id",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "from_object_type",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "to_object_type",
      "description": "",
      "base_type": "STRING"
    },
        {
      "name": "category",
      "description": "",
      "base_type": "STRING"
    },
        {
      "name": "label",
      "description": "",
      "base_type": "STRING"
    },
        {
      "name": "type_id",
      "description": "",
      "base_type": "STRING"
    }
  ]
}


================================================
File: src/schemas/campaign.json
================================================
{
  "name": "campaign",
  "description": "",
  "primary_keys": [
    "id"
  ],
  "fields": [
    {
      "name": "id",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "counters_delivered",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "appId",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "subject",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "contentId",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "lastProcessingStateChangeAt",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "numIncluded",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "lastProcessingFinishedAt",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "processingState",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "appName",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "type",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "lastProcessingStartedAt",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "counters_sent",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "name",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "counters_processed",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "counters_open",
      "description": "",
      "base_type": "STRING"
    }
  ]
}


================================================
File: src/schemas/contact_list.json
================================================
{
  "name": "contact_list",
  "description": "",
  "primary_keys": [
      "listId"
  ],
  "fields": [
    {
      "name" : "listId",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name" : "portalId",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name" : "createdAt",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name" : "updatedAt",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name" : "name",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name" : "listType",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name" : "authorId",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name" : "filters",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name" : "teamIds",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "archived",
      "description": "",
      "base_type": "BOOLEAN"
    },
    {
      "name" : "dynamic",
      "description": "",
      "base_type": "BOOLEAN"
    },
    {
      "name" : "internal",
      "description": "",
      "base_type": "BOOLEAN"
    },
    {
      "name" : "readOnly",
      "description": "",
      "base_type": "BOOLEAN"
    }
  ]
}


================================================
File: src/schemas/email_event.json
================================================
{
  "name": "email_event",
  "description": "",
  "primary_keys": [
    "id"
  ],
  "fields": [
    {
      "name": "id",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "appId",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "smtpId",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "portalId",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "emailCampaignId",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "type",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "response",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "recipient",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "appName",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "sentBy_id",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "sentBy_created",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "created",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "attempt",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "browser_name",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "location_state",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "userAgent",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "browser_type",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "browser_family",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "browser_url",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "location_zipcode",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "location_city",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "filteredEvent",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "browser_producer",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "browser_version",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "deviceType",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "duration",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "location_country",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "browser_producerUrl",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "cc",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "bcc",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "from",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "replyTo",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "subject",
      "description": "",
      "base_type": "STRING"
    }
  ]
}


================================================
File: src/schemas/email_statistic.json
================================================
{
  "name": "email_statistic",
  "description": "",
  "primary_keys": [
    "id"
  ],
  "fields": [
    {
      "name": "id",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "name",
      "description": "",
      "base_type": "STRING"
    }
    ,
    {
      "name": "author",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "publishedById",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "authorName",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "subject",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "replyTo",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "customReplyTo",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "categoryId",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "emailType",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "language",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "url",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "archived",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "emailbodyPlaintext",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "absoluteUrl",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "portalId",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "contentAccessRuleIds",
      "description": "",
      "base_type": "STRING"
    }
  ]
}


================================================
File: src/schemas/form.json
================================================
{
  "name": "form",
  "description": "",
  "primary_keys": [
    "id"
  ],
  "fields": [
    {
      "name": "id",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "name",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "createdAt",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "updatedAt",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "archives",
      "description": "",
      "base_type": "BOOLEAN"
    }
  ]
}


================================================
File: src/schemas/owner.json
================================================
{
  "name": "owner",
  "description": "",
  "primary_keys": [
    "id"
  ],
  "fields": [
    {
      "name": "id",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "email",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "first_name",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "last_name",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "user_id",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "created_at",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "updated_at",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "archived",
      "description": "",
      "base_type": "BOOLEAN"
    },
    {
      "name": "teams_id",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "teams_name",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "teams_primary",
      "description": "",
      "base_type": "BOOLEAN"
    }
  ]
}


================================================
File: src/schemas/pipeline.json
================================================
{
  "name": "pipeline",
  "description": "",
  "primary_keys": [
    "id"
  ],
  "fields": [
    {
      "name": "id",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "label",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "display_order",
      "description": "",
      "base_type": "INTEGER"
    },
    {
      "name": "created_at",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "archived_at",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "updated_at",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "archived",
      "description": "",
      "base_type": "BOOLEAN"
    }
  ]
}


================================================
File: src/schemas/pipeline_stage.json
================================================
{
  "name": "pipeline_stage",
  "description": "",
  "primary_keys": [
    "id",
    "pipeline_id"
  ],
  "fields": [
    {
      "name": "id",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "pipeline_id",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "label",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "display_order",
      "description": "",
      "base_type": "INTEGER"
    },
    {
      "name": "created_at",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "archived_at",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "updated_at",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "archived",
      "description": "",
      "base_type": "BOOLEAN"
    },
    {
      "name": "archived",
      "description": "",
      "base_type": "BOOLEAN"
    }
  ]
}


================================================
File: src/schemas/property_history.json
================================================
{
  "name": "property_history",
  "description": "",
  "primary_keys": [
    "hs_object_id",
    "hs_object_property_name",
    "hs_object",
    "timestamp",
    "value",
    "source_label",
    "source_id",
    "updated_by_user_id",
    "source_type"
  ],
  "fields": [
    {
      "name": "hs_object_id",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "hs_object_property_name",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "hs_object",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "timestamp",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "value",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "source_label",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "source_id",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "updated_by_user_id",
      "description": "",
      "base_type": "STRING"
    },
    {
      "name": "source_type",
      "description": "",
      "base_type": "STRING"
    }
  ]
}


================================================
File: tests/__init__.py
================================================
import sys
import os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../src")


================================================
File: tests/test_component.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest
import mock
import os
from freezegun import freeze_time

from component import Component


class TestComponent(unittest.TestCase):

    # set global time to 2010-10-10 - affects functions like datetime.now()
    @freeze_time("2010-10-10")
    # set KBC_DATADIR env to non-existing dir
    @mock.patch.dict(os.environ, {'KBC_DATADIR': './non-existing-dir'})
    def test_run_no_cfg_fails(self):
        with self.assertRaises(ValueError):
            comp = Component()
            comp.run()


if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()



================================================
File: tests/test_parser.py
================================================
'''
Created on 12. 11. 2018

@author: esner
'''
import unittest

from json_parser import FlattenJsonParser


class TestParser(unittest.TestCase):

    def test_nesting(self):
        users = [
            {
                'name': 'John Doe',
                "nesting_0": "0",
                "nesting_1": {"nesting_1": "1"},
                "nesting_2": {"nesting_2": {"nesting_2": "2"}},
                "nesting_3": {"nesting_3": {"nesting_3": {"nesting_3": "3"}}},
                "nesting_4": {"nesting_4": {"nesting_4": {"nesting_4": {"nesting_4": "4"}}}},
                'address': {
                    'street': '123 Main St',
                    'city': 'Anytown',
                    'state': 'CA',
                    'zip': '12345'
                },
                'preferences': {
                    'color': 'blue',
                    'food': 'pizza',
                    'hobby': 'reading',
                    'email_preferences': {
                        'notify_on': ['new_message', 'newsletter']
                    }}
            }
        ]
        expected_parsed_data = [{"name": "John Doe",
                                 "nesting_0": "0",
                                 "nesting_1_nesting_1": "1",
                                 "nesting_2_nesting_2_nesting_2": "2",
                                 "nesting_3_nesting_3_nesting_3_nesting_3": "3",
                                 "nesting_4_nesting_4_nesting_4_nesting_4": {"nesting_4": "4"},
                                 "address_street": "123 Main St",
                                 "address_city": "Anytown",
                                 "address_state": "CA",
                                 "address_zip": "12345",
                                 "preferences_color": "blue",
                                 "preferences_food": "pizza",
                                 "preferences_hobby": "reading",
                                 "preferences_email_preferences_notify_on": ["new_message", "newsletter"]}]
        parser = FlattenJsonParser(max_parsing_depth=3)

        parsed_data = parser.parse_data(users)
        self.assertEqual(parsed_data, expected_parsed_data)


if __name__ == "__main__":
    unittest.main()



================================================
File: .github/workflows/push.yml
================================================
name: Keboola Component Build & Deploy Pipeline
on:
  push:
    branches:
      - 'feature/*'
      - 'bug/*'
    tags:
      - '*' # Skip the workflow on the main branch without tags

concurrency: ci-${{ github.ref }} # to avoid tag collisions in the ECR
env:
  # repository variables:
  KBC_DEVELOPERPORTAL_APP: "kds-team.ex-hubspot-v2" # replace with your component id
  KBC_DEVELOPERPORTAL_VENDOR: "kds-team" # replace with your vendor
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
  KBC_DEVELOPERPORTAL_USERNAME: "kds-team+github"

  # repository secrets:
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }} # recommended for pushing to ECR
  KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}

  # (Optional) Test KBC project: https://connection.keboola.com/admin/projects/0000
  KBC_TEST_PROJECT_CONFIGS: "" # space separated list of config ids
  KBC_STORAGE_TOKEN: ${{ secrets.KBC_STORAGE_TOKEN }} # required for running KBC tests

jobs:
  push_event_info:
    name: Push Event Info
    runs-on: ubuntu-latest
    outputs:
      app_image_tag: ${{ steps.tag.outputs.app_image_tag }}
      is_semantic_tag: ${{ steps.tag.outputs.is_semantic_tag }}
      is_default_branch: ${{ steps.default_branch.outputs.is_default_branch }}
      is_deploy_ready: ${{ steps.deploy_ready.outputs.is_deploy_ready }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Fetch all branches from remote repository
        run: git fetch --prune --unshallow --tags -f

      - name: Get current branch name
        id: current_branch
        run: |
          if [[ ${{ github.ref }} != "refs/tags/"* ]]; then
            branch_name=${{ github.ref_name }}
            echo "branch_name=$branch_name" | tee -a $GITHUB_OUTPUT
          else
            raw=$(git branch -r --contains ${{ github.ref }})
            branch="$(echo ${raw//origin\//} | tr -d '\n')"
            echo "branch_name=$branch" | tee -a $GITHUB_OUTPUT
          fi

      - name: Is current branch the default branch
        id: default_branch
        run: |
          echo "default_branch='${{ github.event.repository.default_branch }}'"
          if [ "${{ github.event.repository.default_branch }}" = "${{ steps.current_branch.outputs.branch_name }}" ]; then
             echo "is_default_branch=true" | tee -a $GITHUB_OUTPUT
          else
             echo "is_default_branch=false" | tee -a $GITHUB_OUTPUT
          fi

      - name: Set image tag
        id: tag
        run: |
          TAG="${GITHUB_REF##*/}"
          IS_SEMANTIC_TAG=$(echo "$TAG" | grep -q '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$' && echo true || echo false)
          echo "is_semantic_tag=$IS_SEMANTIC_TAG" | tee -a $GITHUB_OUTPUT
          echo "app_image_tag=$TAG" | tee -a $GITHUB_OUTPUT

      - name: Deploy-Ready check
        id: deploy_ready
        run: |
          if [[ "${{ steps.default_branch.outputs.is_default_branch }}" == "true" \
            && "${{ github.ref }}" == refs/tags/* \
            && "${{ steps.tag.outputs.is_semantic_tag }}" == "true" ]]; then
              echo "is_deploy_ready=true" | tee -a $GITHUB_OUTPUT
          else
              echo "is_deploy_ready=false" | tee -a $GITHUB_OUTPUT
          fi

  build:
    name: Docker Image Build
    runs-on: ubuntu-latest
    needs:
      - push_event_info
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest
          outputs: type=docker,dest=/tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - build
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest flake8 . --config=flake8.cfg
          echo "Running unit-tests..."
          docker run ${{ env.KBC_DEVELOPERPORTAL_APP }}:latest python -m unittest discover

  tests-kbc:
    name: Run KBC Tests
    needs:
      - push_event_info
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Set up environment variables
        run: |
          echo "KBC_TEST_PROJECT_CONFIGS=${KBC_TEST_PROJECT_CONFIGS}" >> $GITHUB_ENV
          echo "KBC_STORAGE_TOKEN=${{ secrets.KBC_STORAGE_TOKEN }}" >> $GITHUB_ENV

      - name: Run KBC test jobs
        if: env.KBC_TEST_PROJECT_CONFIGS != '' && env.KBC_STORAGE_TOKEN != ''
        uses: keboola/action-run-configs-parallel@master
        with:
          token: ${{ secrets.KBC_STORAGE_TOKEN }}
          componentId: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          configs: ${{ env.KBC_TEST_PROJECT_CONFIGS }}

  push:
    name: Docker Image Push
    runs-on: ubuntu-latest
    needs:
      - push_event_info
      - tests
      - tests-kbc
    env:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          path: /tmp

      - name: Load Image & Run Tests
        run: |
          docker load --input /tmp/${{ env.KBC_DEVELOPERPORTAL_APP }}.tar
          docker image ls -a

      - name: Docker login
        if: env.DOCKERHUB_TOKEN
        run: docker login --username "${{ env.DOCKERHUB_USER }}" --password "${{ env.DOCKERHUB_TOKEN }}"

      - name: Push image to ECR
        uses: keboola/action-push-to-ecr@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}
          push_latest: ${{ needs.push_event_info.outputs.is_deploy_ready }}
          source_image: ${{ env.KBC_DEVELOPERPORTAL_APP }}

  deploy:
    name: Deploy to KBC
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Set Developer Portal Tag
        uses: keboola/action-set-tag-developer-portal@master
        with:
          vendor: ${{ env.KBC_DEVELOPERPORTAL_VENDOR }}
          app_id: ${{ env.KBC_DEVELOPERPORTAL_APP }}
          username: ${{ env.KBC_DEVELOPERPORTAL_USERNAME }}
          password: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
          tag: ${{ needs.push_event_info.outputs.app_image_tag }}

  update_developer_portal_properties:
    name: Developer Portal Properties Update
    env:
      KBC_DEVELOPERPORTAL_PASSWORD: ${{ secrets.KBC_DEVELOPERPORTAL_PASSWORD }}
    needs:
      - push_event_info
      - build
      - push
    runs-on: ubuntu-latest
    if: needs.push_event_info.outputs.is_deploy_ready == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Update developer portal properties
        run: |
          chmod +x scripts/developer_portal/*.sh
          scripts/developer_portal/update_properties.sh

