Directory structure:
└── keboola-ex-azure-cost-management/
    ├── docker/
    │   ├── php-prod.ini
    │   └── composer-install.sh
    ├── .travis.yml
    ├── deployMultiple.sh
    ├── deploy.sh
    ├── phpcs.xml
    ├── docker-compose.yml
    ├── src/
    │   ├── Config.php
    │   ├── Extractor.php
    │   ├── Auth/
    │   │   ├── TokenProviderFactory.php
    │   │   ├── TokenDataManager.php
    │   │   ├── ServicePrincipalTokenProvider.php
    │   │   ├── RefreshTokenProvider.php
    │   │   └── TokenProvider.php
    │   ├── Component.php
    │   ├── Exception/
    │   │   ├── AccessTokenRefreshException.php
    │   │   ├── AccessTokenInitException.php
    │   │   ├── ExportRequestRetryException.php
    │   │   ├── UnexpectedColumnException.php
    │   │   ├── ExportRequestException.php
    │   │   └── InvalidAuthDataException.php
    │   ├── Csv/
    │   │   ├── ResponseWriterFactory.php
    │   │   ├── ResponseWriter.php
    │   │   ├── ColumnsParser.php
    │   │   └── Column.php
    │   ├── Api/
    │   │   ├── ApiFactory.php
    │   │   ├── Api.php
    │   │   ├── RequestFactory.php
    │   │   └── ClientFactory.php
    │   ├── run.php
    │   └── ConfigDefinition.php
    ├── .env.dist
    ├── composer.lock
    ├── phpstan.neon
    ├── utils/
    │   ├── oauth-app-registration.sh
    │   ├── oauth-app-detail.sh
    │   └── oauth-login.sh
    ├── tests/
    │   ├── phpunit/
    │   │   ├── ClientTest.php
    │   │   ├── ConfigTest.php
    │   │   ├── BaseTest.php
    │   │   ├── OAuthTest.php
    │   │   └── bootstrap.php
    │   └── functional/
    │       ├── service-principal-login/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   ├── destination-table.csv.manifest
    │       │   │           │   ├── .gitkeep
    │       │   │           │   └── destination-table.csv
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           └── config.json
    │       ├── export-time-frame-billing-month-to-date/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   ├── destination-table.csv.manifest
    │       │   │           │   ├── .gitkeep
    │       │   │           │   └── destination-table.csv
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           └── config.json
    │       ├── error-service-principal-login/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   ├── expected-stderr
    │       │   ├── source/
    │       │   │   └── data/
    │       │   │       └── config.json
    │       │   └── expected-code
    │       ├── export-incremental-false/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   ├── destination-table.csv.manifest
    │       │   │           │   ├── .gitkeep
    │       │   │           │   └── destination-table.csv
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           └── config.json
    │       ├── error-empty-config/
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   ├── expected-stderr
    │       │   ├── source/
    │       │   │   └── data/
    │       │   │       └── config.json
    │       │   └── expected-code
    │       ├── error-empty-parameters/
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   ├── expected-stderr
    │       │   ├── source/
    │       │   │   └── data/
    │       │   │       └── config.json
    │       │   └── expected-code
    │       ├── error-date-invalid/
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   ├── expected-stderr
    │       │   ├── source/
    │       │   │   └── data/
    │       │   │       └── config.json
    │       │   └── expected-code
    │       ├── export-granularity-none/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   ├── destination-table.csv.manifest
    │       │   │           │   ├── .gitkeep
    │       │   │           │   └── destination-table.csv
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           └── config.json
    │       ├── export-type-usage/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   ├── destination-table.csv.manifest
    │       │   │           │   ├── .gitkeep
    │       │   │           │   └── destination-table.csv
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           └── config.json
    │       ├── export-simple/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   ├── destination-table.csv.manifest
    │       │   │           │   ├── .gitkeep
    │       │   │           │   └── destination-table.csv
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           └── config.json
    │       ├── export-granularity-daily/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   ├── destination-table.csv.manifest
    │       │   │           │   ├── .gitkeep
    │       │   │           │   └── destination-table.csv
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           └── config.json
    │       ├── export-time-frame-month-to-date/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   ├── destination-table.csv.manifest
    │       │   │           │   ├── .gitkeep
    │       │   │           │   └── destination-table.csv
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           └── config.json
    │       ├── DatadirTest.php
    │       ├── export-time-frame-last-month/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   ├── destination-table.csv.manifest
    │       │   │           │   ├── .gitkeep
    │       │   │           │   └── destination-table.csv
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           └── config.json
    │       ├── error-subscription-not-found/
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   ├── expected-stderr
    │       │   ├── source/
    │       │   │   └── data/
    │       │   │       └── config.json
    │       │   └── expected-code
    │       ├── export-granularity-monthly/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   ├── destination-table.csv.manifest
    │       │   │           │   ├── .gitkeep
    │       │   │           │   └── destination-table.csv
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           └── config.json
    │       ├── error-date-in-the-future/
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   └── .gitkeep
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   ├── expected-stderr
    │       │   ├── source/
    │       │   │   └── data/
    │       │   │       └── config.json
    │       │   └── expected-code
    │       ├── export-type-amortized-cost/
    │       │   ├── expected-stdout
    │       │   ├── expected/
    │       │   │   └── data/
    │       │   │       └── out/
    │       │   │           ├── tables/
    │       │   │           │   ├── destination-table.csv.manifest
    │       │   │           │   ├── .gitkeep
    │       │   │           │   └── destination-table.csv
    │       │   │           └── files/
    │       │   │               └── .gitkeep
    │       │   └── source/
    │       │       └── data/
    │       │           └── config.json
    │       └── export-time-frame-last-billing-month/
    │           ├── expected-stdout
    │           ├── expected/
    │           │   └── data/
    │           │       └── out/
    │           │           ├── tables/
    │           │           │   ├── destination-table.csv.manifest
    │           │           │   ├── .gitkeep
    │           │           │   └── destination-table.csv
    │           │           └── files/
    │           │               └── .gitkeep
    │           └── source/
    │               └── data/
    │                   └── config.json
    ├── phpunit.xml.dist
    ├── composer.json
    ├── .dockerignore
    ├── Dockerfile
    └── README.md

================================================
File: /docker/php-prod.ini
================================================
; Recommended production values
display_errors = Off
display_startup_errors = Off
error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT
html_errors = On
log_errors = On
max_input_time = 60
output_buffering = 4096
register_argc_argv = Off
request_order = "GP"
session.gc_divisor = 1000
session.sid_bits_per_character = 5
short_open_tag = Off
track_errors = Off
variables_order = "GPCS"

; Custom
date.timezone = UTC
memory_limit = -1


================================================
File: /docker/composer-install.sh
================================================
#!/bin/sh

EXPECTED_SIGNATURE=$(curl -s https://composer.github.io/installer.sig)
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
ACTUAL_SIGNATURE=$(php -r "echo hash_file('SHA384', 'composer-setup.php');")

if [ "$EXPECTED_SIGNATURE" != "$ACTUAL_SIGNATURE" ]
then
    >&2 echo 'ERROR: Invalid installer signature'
    rm composer-setup.php
    exit 1
fi

php composer-setup.php --quiet --install-dir=/usr/local/bin/ --filename=composer
RESULT=$?
rm composer-setup.php
exit $RESULT


================================================
File: /.travis.yml
================================================
sudo: required

language: bash

services:
  - docker

before_script:
  - export APP_IMAGE=keboola-component
  - docker -v
  - docker build -t $APP_IMAGE .
  - docker run
    -e OAUTH_APP_NAME
    -e OAUTH_APP_ID
    -e OAUTH_APP_SECRET
    -e OAUTH_ACCESS_TOKEN
    -e OAUTH_REFRESH_TOKEN
    -e SERVICE_PRINCIPAL_TENANT
    -e SERVICE_PRINCIPAL_USERNAME
    -e SERVICE_PRINCIPAL_PASSWORD
    -e TEST_SUBSCRIPTION_ID
    $APP_IMAGE composer ci

  # push test image to ECR
  - docker pull quay.io/keboola/developer-portal-cli-v2:latest
  - export REPOSITORY=`docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-repository $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP`
  - docker tag $APP_IMAGE:latest $REPOSITORY:test
  - eval $(docker run --rm -e KBC_DEVELOPERPORTAL_USERNAME -e KBC_DEVELOPERPORTAL_PASSWORD -e KBC_DEVELOPERPORTAL_URL quay.io/keboola/developer-portal-cli-v2:latest ecr:get-login $KBC_DEVELOPERPORTAL_VENDOR $KBC_DEVELOPERPORTAL_APP)
  - docker push $REPOSITORY:test
  - docker pull quay.io/keboola/syrup-cli:latest


script:
  # run test job inside KBC
  - docker run --rm -e KBC_STORAGE_TOKEN quay.io/keboola/syrup-cli:latest run-job $KBC_DEVELOPERPORTAL_APP $KBC_APP_TEST_CONFIG_ID test

deploy:
  provider: script
  skip_cleanup: true
  script: ./deployMultiple.sh
  on:
    tags: true


================================================
File: /deployMultiple.sh
================================================
#!/bin/bash
set -e

# OAuth version
export KBC_DEVELOPERPORTAL_APP=keboola.ex-azure-cost-management
./deploy.sh

# Service Principal version, same code, different UI
export KBC_DEVELOPERPORTAL_APP=keboola.ex-azure-cost-management-sp
./deploy.sh


================================================
File: /deploy.sh
================================================
#!/bin/bash
set -e

# Obtain the component repository and log in
docker pull quay.io/keboola/developer-portal-cli-v2:latest
export REPOSITORY=`docker run --rm  \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP}`

eval $(docker run --rm \
    -e KBC_DEVELOPERPORTAL_USERNAME \
    -e KBC_DEVELOPERPORTAL_PASSWORD \
    quay.io/keboola/developer-portal-cli-v2:latest \
    ecr:get-login ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP})

# Push to the repository
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:${TRAVIS_TAG}
docker tag ${APP_IMAGE}:latest ${REPOSITORY}:latest
docker push ${REPOSITORY}:${TRAVIS_TAG}
docker push ${REPOSITORY}:latest

# Update the tag in Keboola Developer Portal -> Deploy to KBC
if echo ${TRAVIS_TAG} | grep -c '^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$'
then
    docker run --rm \
        -e KBC_DEVELOPERPORTAL_USERNAME \
        -e KBC_DEVELOPERPORTAL_PASSWORD \
        quay.io/keboola/developer-portal-cli-v2:latest \
        update-app-repository ${KBC_DEVELOPERPORTAL_VENDOR} ${KBC_DEVELOPERPORTAL_APP} ${TRAVIS_TAG} ecr ${REPOSITORY}
else
    echo "Skipping deployment to KBC, tag ${TRAVIS_TAG} is not allowed."
fi


================================================
File: /phpcs.xml
================================================
<?xml version="1.0"?>
<ruleset name="Project">
    <rule ref="vendor/keboola/coding-standard/src/ruleset.xml"/>
</ruleset>


================================================
File: /docker-compose.yml
================================================
version: '3'
services:
  dev:
    build: .
    volumes:
      - ./:/code
      - ./data:/data
    environment:
      - OAUTH_APP_NAME
      - OAUTH_APP_ID
      - OAUTH_APP_SECRET
      - OAUTH_ACCESS_TOKEN
      - OAUTH_REFRESH_TOKEN
      - SERVICE_PRINCIPAL_TENANT
      - SERVICE_PRINCIPAL_USERNAME
      - SERVICE_PRINCIPAL_PASSWORD
      - TEST_SUBSCRIPTION_ID


================================================
File: /src/Config.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureCostExtractor;

use Keboola\AzureCostExtractor\Exception\InvalidAuthDataException;
use Keboola\Component\Config\BaseConfig;
use Keboola\Component\JsonHelper;

class Config extends BaseConfig
{
    public function getMaxTries(): int
    {
        return (int) $this->getValue(['parameters', 'maxTries']);
    }

    public function getDestination(): string
    {
        return $this->getValue(['parameters', 'export', 'destination']);
    }

    public function getSubscriptionId(): string
    {
        return $this->getValue(['parameters', 'subscriptionId']);
    }

    public function getType(): string
    {
        return $this->getValue(['parameters', 'export', 'type']);
    }

    public function getAggregation(): string
    {
        return $this->getValue(['parameters', 'export', 'aggregation']);
    }

    public function getGranularity(): string
    {
        return $this->getValue(['parameters', 'export', 'granularity']);
    }

    public function isIncrementalLoad(): bool
    {
        return $this->getValue(['parameters', 'export', 'incremental']);
    }

    public function getTimeFrame(): string
    {
        return $this->getValue(['parameters', 'export', 'timeDimension', 'timeFrame']);
    }

    public function getTimeDimensionStart(): string
    {
        return $this->getValue(['parameters', 'export', 'timeDimension', 'start']);
    }

    public function getTimeDimensionEnd(): string
    {
        return $this->getValue(['parameters', 'export', 'timeDimension', 'end']);
    }

    public function getGroupingDimensions(): array
    {
        return $this->getValue(['parameters', 'export', 'groupingDimensions']);
    }

    public function hasServicePrincipal(): bool
    {
        return !empty($this->getValue(['parameters', 'servicePrincipal'], []));
    }

    public function getServicePrincipalTenant(): string
    {
        return $this->getValue(['parameters', 'servicePrincipal', 'tenant']);
    }

    public function getServicePrincipalUsername(): string
    {
        return $this->getValue(['parameters', 'servicePrincipal', 'username']);
    }

    public function getServicePrincipalPassword(): string
    {
        return $this->getValue(['parameters', 'servicePrincipal', '#password']);
    }

    public function getOAuthApiData(): array
    {
        $data = parent::getOAuthApiData();

        if (empty($data)) {
            return [];
        }

        if (!is_string($data)) {
            throw new InvalidAuthDataException('Value of "authorization.oauth_api.credentials.#data".');
        }

        try {
            return JsonHelper::decode($data);
        } catch (\Throwable $e) {
            throw new InvalidAuthDataException(sprintf(
                'Value of "authorization.oauth_api.credentials.#data" must be valid JSON, sample: "%s"',
                substr($data, 0, 16)
            ));
        }
    }
}


================================================
File: /src/Extractor.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureCostExtractor;

use Keboola\AzureCostExtractor\Csv\ResponseWriter;
use Psr\Log\LoggerInterface;
use Keboola\AzureCostExtractor\Api\RequestFactory;
use Keboola\AzureCostExtractor\Api\Api;

class Extractor
{
    private LoggerInterface $logger;

    private Config $config;

    private Api $api;

    private ResponseWriter $responseWriter;

    private RequestFactory $requestFactory;

    public function __construct(
        LoggerInterface $logger,
        Config $config,
        Api $api,
        ResponseWriter $responseWriter,
        RequestFactory $requestFactory
    ) {
        $this->logger = $logger;
        $this->config = $config;
        $this->api = $api;
        $this->responseWriter = $responseWriter;
        $this->requestFactory = $requestFactory;
    }

    public function extract(): void
    {
        $this->logger->info(sprintf('Export "%s" started.', $this->config->getDestination()));

        try {
            $this->doExtract();
        } finally {
            $this->responseWriter->finish();
        }
    }

    private function doExtract(): void
    {
        $responses = $this->api->send($this->requestFactory->create());
        foreach ($responses as $response) {
            $count = $this->responseWriter->writeResponse($response);
            if ($count) {
                $this->logger->info(sprintf('Written "%s" rows to the CSV file.', $count));
            } else {
                $this->logger->info('No rows in the response.');
            }
        }
    }
}


================================================
File: /src/Auth/TokenProviderFactory.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureCostExtractor\Auth;

use ArrayObject;
use Keboola\AzureCostExtractor\Config;
use Psr\Log\LoggerInterface;

class TokenProviderFactory
{
    private Config $config;

    private LoggerInterface $logger;

    private ArrayObject $stateObject;

    public function __construct(Config $config, LoggerInterface $logger, ArrayObject $stateObject)
    {
        $this->config = $config;
        $this->logger = $logger;
        $this->stateObject = $stateObject;
    }

    public function create(): TokenProvider
    {
        // Service principal login
        if ($this->config->hasServicePrincipal()) {
            $this->logger->info('Using Service Principal authentication.');
            return new ServicePrincipalTokenProvider(
                $this->config->getServicePrincipalTenant(),
                $this->config->getServicePrincipalUsername(),
                $this->config->getServicePrincipalPassword(),
            );
        }

        // OAuth Refresh Token login
        $this->logger->info('Using OAuth Refresh Token authentication.');
        $tokenDataManager = new TokenDataManager($this->config->getOAuthApiData(), $this->stateObject);
        return new RefreshTokenProvider(
            $this->config->getOAuthApiAppKey(),
            $this->config->getOAuthApiAppSecret(),
            $tokenDataManager
        );
    }
}


================================================
File: /src/Auth/TokenDataManager.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureCostExtractor\Auth;

use ArrayObject;
use Keboola\Component\JsonHelper;
use League\OAuth2\Client\Token\AccessToken;
use League\OAuth2\Client\Token\AccessTokenInterface;
use Keboola\AzureCostExtractor\Exception\AccessTokenInitException;

class TokenDataManager
{
    public const STATE_AUTH_DATA_KEY = '#refreshed_auth_data'; // # -> must be encrypted!

    private array $configAuthData;

    private ArrayObject $state;

    public function __construct(array $configAuthData, ArrayObject $state)
    {
        $this->configAuthData = $configAuthData;
        $this->state = $state;

        // Check required keys
        $missingKeys = array_diff(['access_token', 'refresh_token'], array_keys($this->configAuthData));
        if ($missingKeys) {
            throw new AccessTokenInitException(
                sprintf('Missing key "%s" in OAuth data array.', implode('", "', $missingKeys))
            );
        }
    }

    public function load(): iterable
    {
        // Load tokens from state.json
        $authDataJson = $this->state[self::STATE_AUTH_DATA_KEY] ?? null;
        if (is_string($authDataJson)) {
            yield new AccessToken(JsonHelper::decode($authDataJson));
        }

        // Or use default from the configuration
        yield new AccessToken($this->configAuthData);
    }

    public function store(AccessTokenInterface $newToken): void
    {
        // See AccessToken::jsonSerialize
        $this->state[self::STATE_AUTH_DATA_KEY] = json_encode($newToken);
    }
}


================================================
File: /src/Auth/ServicePrincipalTokenProvider.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureCostExtractor\Auth;

use Keboola\AzureCostExtractor\Exception\AccessTokenInitException;
use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
use League\OAuth2\Client\Provider\GenericProvider;
use League\OAuth2\Client\Token\AccessTokenInterface;

class ServicePrincipalTokenProvider implements TokenProvider
{
    private const AUTHORITY_URL = 'https://login.microsoftonline.com/%s';
    private const TOKEN_ENDPOINT = '/oauth2/v2.0/token';
    private const SCOPE = 'https://management.core.windows.net/.default';

    private string $tenantId;
    private string $username;
    private string $password;

    public function __construct(string $tenantId, string $username, string $password)
    {
        $this->tenantId = $tenantId;
        $this->username = $username;
        $this->password = $password;
    }

    public function get(): AccessTokenInterface
    {
        // OAuth 2.0 client credentials flow
        $provider = $this->createOAuthProvider();

        // It is needed to always refresh token, because original token expires after 1 hour
        try {
            $newToken = $provider->getAccessToken('client_credentials', ['scope' => self::SCOPE]);
        } catch (IdentityProviderException $e) {
            throw new AccessTokenInitException(
                'Service Principal OAuth login failed: ' . $e->getMessage(),
                0,
                $e
            );
        }

        return $newToken;
    }

    private function createOAuthProvider(): GenericProvider
    {
        return new GenericProvider([
            'clientId' => $this->username,
            'clientSecret' => $this->password,
            'urlAuthorize' => '',
            'urlAccessToken' => sprintf(self::AUTHORITY_URL, $this->tenantId) . self::TOKEN_ENDPOINT,
            'urlResourceOwnerDetails' => '',
        ]);
    }
}


================================================
File: /src/Auth/RefreshTokenProvider.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureCostExtractor\Auth;

use League\OAuth2\Client\Provider\Exception\IdentityProviderException;
use League\OAuth2\Client\Provider\GenericProvider;
use League\OAuth2\Client\Token\AccessToken;
use League\OAuth2\Client\Token\AccessTokenInterface;
use Keboola\AzureCostExtractor\Exception\AccessTokenRefreshException;

class RefreshTokenProvider implements TokenProvider
{
    private const AUTHORITY_URL = 'https://login.microsoftonline.com/common';
    private const AUTHORIZE_ENDPOINT = '/oauth2/v2.0/authorize';
    private const TOKEN_ENDPOINT = '/oauth2/v2.0/token';
    private const SCOPES = ['offline_access', 'https://management.core.windows.net/user_impersonation'];

    private string $appId;

    private string $appSecret;

    private TokenDataManager $dataManager;

    public function __construct(string $appId, string $appSecret, TokenDataManager $dataManager)
    {
        $this->appId = $appId;
        $this->appSecret = $appSecret;
        $this->dataManager = $dataManager;
    }

    public function get(): AccessTokenInterface
    {
        $provider = $this->createOAuthProvider($this->appId, $this->appSecret);
        $tokens = $this->dataManager->load();

        // It is needed to always refresh token, because original token expires after 1 hour
        $newToken = null;
        $exception = null;

        // Try token from stored state, and from the configuration.
        foreach ($tokens as $token) {
            try {
                $newToken = $provider->getAccessToken(
                    'refresh_token',
                    ['refresh_token' => $token->getRefreshToken()]
                );
                break;
            } catch (IdentityProviderException $exception) {
                // try next token
            }
        }

        if (!$newToken) {
            throw new AccessTokenRefreshException(
                'Microsoft OAuth API token refresh failed, ' .
                'please reset authorization in the extractor configuration.',
                0,
                $exception
            );
        }

        $this->dataManager->store($newToken);
        return $newToken;
    }

    private function createOAuthProvider(string $appId, string $appSecret): GenericProvider
    {
        return new GenericProvider([
            'clientId' => $appId,
            'clientSecret' => $appSecret,
            'urlAuthorize' => self::AUTHORITY_URL . self::AUTHORIZE_ENDPOINT,
            'urlAccessToken' => self::AUTHORITY_URL . self::TOKEN_ENDPOINT,
            'urlResourceOwnerDetails' => '',
            'scopes' => implode(' ', self::SCOPES),
        ]);
    }
}


================================================
File: /src/Auth/TokenProvider.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureCostExtractor\Auth;

use League\OAuth2\Client\Token\AccessTokenInterface;

interface TokenProvider
{
    public function get(): AccessTokenInterface;
}


================================================
File: /src/Component.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureCostExtractor;

use ArrayObject;
use Keboola\AzureCostExtractor\Auth\TokenProviderFactory;
use Keboola\AzureCostExtractor\Csv\ResponseWriterFactory;
use Psr\Log\LoggerInterface;
use Keboola\AzureCostExtractor\Api\ApiFactory;
use Keboola\AzureCostExtractor\Api\ClientFactory;
use Keboola\AzureCostExtractor\Api\RequestFactory;
use Keboola\Component\BaseComponent;

class Component extends BaseComponent
{
    private Extractor $extractor;

    private ArrayObject $stateObject;

    public function __construct(LoggerInterface $logger)
    {
        parent::__construct($logger);

        $logger = $this->getLogger();
        $config = $this->getConfig();

        $this->stateObject = new ArrayObject($this->getInputState());
        $tokenProviderFactory = new TokenProviderFactory($config, $logger, $this->stateObject);
        $tokenProvider = $tokenProviderFactory->create();
        $clientFactory = new ClientFactory($tokenProvider, $config->getSubscriptionId());
        $apiFactory = new ApiFactory($logger, $config, $clientFactory);
        $requestFactory = new RequestFactory($config);
        $responseWriterFactory = new ResponseWriterFactory($this->getManifestManager(), $config, $this->getDataDir());
        $this->extractor = new Extractor(
            $logger,
            $config,
            $apiFactory->create(),
            $responseWriterFactory->create(),
            $requestFactory
        );
    }

    public function execute(): void
    {
        try {
            parent::execute();
        } finally {
            $this->writeOutputStateToFile($this->stateObject->getArrayCopy());
        }
    }

    protected function run(): void
    {
        $this->extractor->extract();
    }

    public function getConfig(): Config
    {
        /** @var Config $config */
        $config = parent::getConfig();
        return $config;
    }

    protected function getConfigClass(): string
    {
        return Config::class;
    }

    protected function getConfigDefinitionClass(): string
    {
        return ConfigDefinition::class;
    }
}


================================================
File: /src/Exception/AccessTokenRefreshException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureCostExtractor\Exception;

use Keboola\CommonExceptions\UserExceptionInterface;

class AccessTokenRefreshException extends \Exception implements UserExceptionInterface
{

}


================================================
File: /src/Exception/AccessTokenInitException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureCostExtractor\Exception;

use Keboola\CommonExceptions\UserExceptionInterface;

class AccessTokenInitException extends \Exception implements UserExceptionInterface
{

}


================================================
File: /src/Exception/ExportRequestRetryException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureCostExtractor\Exception;

class ExportRequestRetryException extends ExportRequestException
{

}


================================================
File: /src/Exception/UnexpectedColumnException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureCostExtractor\Exception;

use Keboola\CommonExceptions\UserExceptionInterface;

class UnexpectedColumnException extends \Exception implements UserExceptionInterface
{

}


================================================
File: /src/Exception/ExportRequestException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureCostExtractor\Exception;

use Keboola\CommonExceptions\ApplicationExceptionInterface;

class ExportRequestException extends \Exception implements ApplicationExceptionInterface
{

}


================================================
File: /src/Exception/InvalidAuthDataException.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureCostExtractor\Exception;

use Keboola\CommonExceptions\ApplicationExceptionInterface;

class InvalidAuthDataException extends \Exception implements ApplicationExceptionInterface
{

}


================================================
File: /src/Csv/ResponseWriterFactory.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureCostExtractor\Csv;

use Keboola\AzureCostExtractor\Config;
use Keboola\Component\Manifest\ManifestManager;
use function Keboola\Utils\sanitizeColumnName as sanitize;

class ResponseWriterFactory
{
    private ManifestManager $manifestManager;

    private Config $config;

    private string $dataDir;

    public function __construct(ManifestManager $manifestManager, Config $config, string $dataDir)
    {
        $this->manifestManager = $manifestManager;
        $this->config = $config;
        $this->dataDir = rtrim($dataDir, '/');
    }

    public function create(): ResponseWriter
    {
        $csvPath = $this->dataDir . '/out/tables/' . $this->config->getDestination() . '.csv';
        $columnsParser = new ColumnsParser($this->config);
        return new ResponseWriter($csvPath, $this->config, $this->manifestManager, $columnsParser);
    }
}


================================================
File: /src/Csv/ResponseWriter.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureCostExtractor\Csv;

use Keboola\AzureCostExtractor\Config;
use Keboola\Component\Manifest\ManifestManager\Options\OutTableManifestOptions;
use Keboola\Component\Manifest\ManifestManager;
use Keboola\Csv\CsvWriter;

class ResponseWriter
{
    private string $csvPath;

    private CsvWriter $csvWriter;

    private Config $config;

    private ManifestManager $manifestManager;

    private ColumnsParser $columnsParser;

    private bool $initialized = false;

    /** @var Column[] */
    private array $columns;

    private int $count = 0;

    public function __construct(
        string $csvPath,
        Config $config,
        ManifestManager $manifestManager,
        ColumnsParser $columnsParser
    ) {
        $this->csvPath = $csvPath;
        $this->csvWriter = new CsvWriter($csvPath);
        $this->config = $config;
        $this->manifestManager = $manifestManager;
        $this->columnsParser = $columnsParser;
    }

    public function writeResponse(array $response): int
    {
        if (!$this->initialized) {
            $this->initialized = true;
            $this->columns = $this->columnsParser->parse($response);
        }

        return $this->writeRows($response['properties']['rows']);
    }

    public function finish(): void
    {
        // No rows -> no CSV file
        if ($this->count === 0) {
            @unlink($this->csvPath);
            return;
        }

        $this->writeManifest();
    }

    private function writeRows(array $rows): int
    {
        $count = 0;
        foreach ($rows as &$row) {
            $this->csvWriter->writeRow($this->mapRow($row));
            $count++;
            $this->count++;
        }

        return $count;
    }

    private function mapRow(array &$row): array
    {
        return array_map(
            fn(Column $column) => $column->mapValue((string) $row[$column->getIndex()]),
            $this->columns
        );
    }

    private function writeManifest(): void
    {
        $columns = $this->columns;
        $primaryKeys = array_filter($columns, fn(Column $column) => $column->isPrimaryKey());

        $options = new OutTableManifestOptions();
        $options->setIncremental($this->config->isIncrementalLoad());
        $options->setColumns(array_map(fn(Column $column) => $column->getName(), $columns));
        $options->setPrimaryKeyColumns(array_map(fn(Column $column) => $column->getName(), $primaryKeys));
        $this->manifestManager->writeTableManifest(basename($this->csvPath), $options);
    }
}


================================================
File: /src/Csv/ColumnsParser.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureCostExtractor\Csv;

use Keboola\AzureCostExtractor\Config;
use Keboola\AzureCostExtractor\Exception\UnexpectedColumnException;
use Keboola\Datatype\Definition\BaseType;

class ColumnsParser
{
    private Config $config;

    private array $groupingDimensions;

    public function __construct(Config $config)
    {
        $this->config = $config;
        $this->groupingDimensions = $config->getGroupingDimensions();
    }

    public function parse(array $response): array
    {
        // Map columns to objects
        $columns = [];
        foreach ($response['properties']['columns'] as $index => $data) {
            $name = $data['name'];
            $category = $this->parseCategory($name);
            $rawType = $data['type'];
            $type = $this->parseType($rawType);
            $columns[] = new Column($index, $name, $type, $category);
        }

        // Sort columns by category
        $this->sortColumns($columns);

        return $columns;
    }

    private function parseType(string $rawType): string
    {
        switch ($rawType) {
            case 'Number':
                return BaseType::NUMERIC;
            default:
                return BaseType::STRING;
        }
    }

    private function parseCategory(string $name): string
    {
        if ($name === 'Currency') {
            return Column::CATEGORY_CURRENCY;
        }

        if ($name === $this->config->getAggregation()) {
            return Column::CATEGORY_AGGREGATION;
        }

        if (in_array($name, $this->groupingDimensions, true)) {
            return Column::CATEGORY_GROUPING_DIMENSION;
        }

        if (strpos($name, 'Date') !== false ||
            strpos($name, 'Month') !== false
        ) {
            return Column::CATEGORY_TIME_DIMENSION;
        }

        throw new UnexpectedColumnException(sprintf('Found unexpected column "%s" in the API response.', $name));
    }

    private function sortColumns(array &$columns): void
    {
        usort($columns, function (Column $a, Column $b) {
            return $this->getColumnOrder($a) <=> $this->getColumnOrder($b);
        });
    }

    private function getColumnOrder(Column $column): int
    {
        switch ($column->getCategory()) {
            case Column::CATEGORY_TIME_DIMENSION:
                return 1;
            case Column::CATEGORY_GROUPING_DIMENSION:
                // Sort by the order in the config
                return 2 + (int) array_search($column->getName(), $this->groupingDimensions, true);
            case Column::CATEGORY_AGGREGATION:
                return 901;
            default:
                return 1000;
        }
    }
}


================================================
File: /src/Csv/Column.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureCostExtractor\Csv;

class Column
{
    public const CATEGORY_TIME_DIMENSION = 'time_dimension';
    public const CATEGORY_GROUPING_DIMENSION = 'grouping_dimension';
    public const CATEGORY_AGGREGATION = 'aggregation';
    public const CATEGORY_CURRENCY = 'currency';

    public const PRIMARY_KEY_CATEGORIES = [
        self::CATEGORY_TIME_DIMENSION,
        self::CATEGORY_GROUPING_DIMENSION,
    ];

    private int $index;

    private string $name;

    private string $type;

    private string $category;

    public function __construct(int $index, string $name, string $type, string $category)
    {
        $this->index = $index;
        $this->name = $name;
        $this->type = $type;
        $this->category = $category;
    }
    public function getIndex(): int
    {
        return $this->index;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function getType(): string
    {
        return $this->type;
    }

    public function getCategory(): string
    {
        return $this->category;
    }

    public function isPrimaryKey(): bool
    {
        return in_array($this->category, self::PRIMARY_KEY_CATEGORIES, true);
    }

    public function mapValue(string $value): string
    {

        if ($this->category === self::CATEGORY_TIME_DIMENSION) {
            // Convert date from 20201031 -> 2020-10-31
            if (preg_match('~^(\d{4})(\d{2})(\d{2})$~', $value, $m)) {
                return "$m[1]-$m[2]-$m[3]";
            }

            // Convert month from 2020-01-01T00:00:00 -> 2020-01
            if (strpos($this->name, 'Month') !== false &&
                preg_match('~^(\d{4}-\d{2})-01T00:00:00$~', $value, $m)
            ) {
                return "$m[1]";
            }
        }

        return $value;
    }
}


================================================
File: /src/Api/ApiFactory.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureCostExtractor\Api;

use GuzzleHttp\Client;
use Keboola\AzureCostExtractor\Config;
use Psr\Log\LoggerInterface;

class ApiFactory
{
    private Config $config;

    private LoggerInterface $logger;

    private ClientFactory $clientFactory;

    public function __construct(LoggerInterface $logger, Config $config, ClientFactory $clientFactory)
    {
        $this->logger = $logger;
        $this->config = $config;
        $this->clientFactory = $clientFactory;
    }

    public function create(): Api
    {
        return new Api($this->logger, $this->config, $this->clientFactory);
    }
}


================================================
File: /src/Api/Api.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureCostExtractor\Api;

use Generator;
use GuzzleHttp\Client;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Psr7\Uri;
use Keboola\AzureCostExtractor\Config;
use Throwable;
use Psr\Http\Message\ResponseInterface;
use Psr\Log\LoggerInterface;
use GuzzleHttp\Exception\RequestException;
use Retry\BackOff\ExponentialBackOffPolicy;
use Retry\Policy\SimpleRetryPolicy;
use Retry\RetryProxy;
use Keboola\AzureCostExtractor\Exception\ExportRequestRetryException;
use Keboola\AzureCostExtractor\Exception\ExportRequestException;
use Keboola\Component\JsonHelper;
use Keboola\Component\UserException;

class Api
{
    private LoggerInterface $logger;

    private Config $config;

    private ClientFactory $clientFactory;

    private Client $client;

    public function __construct(LoggerInterface $logger, Config $config, ClientFactory $clientFactory)
    {
        $this->logger = $logger;
        $this->config = $config;
        $this->clientFactory = $clientFactory;
        $this->login();
    }

    /**
     * Send request and load next pages, if "nextLink" is present in the response.
     * Returns decoded JSON body
     * @param Request $request
     * @return Generator|array[]
     */
    public function send(Request $request): Generator
    {
        $page = 1;
        while (true) {
            // Send request
            $response = $this->sendOneRequest($request);
            $body = JsonHelper::decode($response->getBody()->getContents());
            yield $body;

            // Load next page
            $nextLink = $body['properties']['nextLink'] ?? null;
            if ($nextLink) {
                $page++;
                $request = $request->withUri(new Uri($nextLink));
                $this->logger->info(sprintf('Loading the next results, page %s.', $page));
            } else {
                break;
            }
        }
    }

    public function sendOneRequest(Request $request): ResponseInterface
    {
        try {
            /** @var ResponseInterface $response */
            $response = $this->createRetryProxy()->call(function () use ($request) {
                return $this->doSendOneRequest($request);
            });
            return $response;
        } catch (ExportRequestException $e) {
            throw $this->isUserException($e) ? new UserException($e->getMessage(), $e->getCode(), $e) : $e;
        }
    }

    private function doSendOneRequest(Request $request): ResponseInterface
    {
        try {
            return $this->client->send($request);
        } catch (RequestException $e) {
            throw $this->processException($request, $e);
        }
    }

    private function processException(Request $request, RequestException $exception): Throwable
    {
        // Rewind body stream
        $requestBody = $request->getBody();
        $requestBody->rewind();

        // Format error from the response, or use exception message
        $error = $this->getMessageFromResponse($exception->getResponse()) ?:
            sprintf('message=%s', $exception->getMessage());

        // Format full exception message
        $msg = sprintf(
            'Export "%s" failed: http_code="%d", %s, request_body="%s", uri="%s"',
            $this->config->getDestination(),
            $exception->getCode(),
            $error,
            $requestBody->getContents(),
            $exception->getRequest()->getUri()
        );

        // In case of error 401 try to log in again, the token maybe expired
        if ($exception->getCode() === 401) {
            $this->logger->info('Unauthorized, trying to log in again.');

            // Failed login throw a user error
            $this->login();

            // If login passed -> retry
            return new ExportRequestRetryException($msg, $exception->getCode(), $exception);
        }

        if ($this->isRetryException($exception)) {
            return new ExportRequestRetryException($msg, $exception->getCode(), $exception);
        }

        return new ExportRequestException($msg, $exception->getCode(), $exception);
    }

    private function getMessageFromResponse(?ResponseInterface $response): ?string
    {
        if (!$response) {
            return null;
        }

        try {
            $responseBody = JsonHelper::decode($response->getBody()->getContents());
        } catch (Throwable $e) {
            // Ignore invalid JSON and other errors
            return null;
        }

        if (!isset($responseBody['error']['code'])) {
            return null;
        }

        if (!isset($responseBody['error']['message'])) {
            return null;
        }

        return sprintf(
            'error_code="%s", message="%s"',
            $responseBody['error']['code'],
            $responseBody['error']['message']
        );
    }

    private function isUserException(ExportRequestException $e): bool
    {
        return
            // Bad Request 400 (eg. bad date), Unauthorized 401, Forbidden 403, Not Found 404, Conflict 409
            in_array($e->getCode(), [400, 401, 403, 404, 409], true) ||
            // Server error 5xx
            ($e->getCode() >= 500 && $e->getCode() < 600);
    }


    private function isRetryException(RequestException $e): bool
    {
        // Don't retry Bad Request 400, Unauthorized 401, Forbidden 403, Not Found 404
        if (in_array($e->getCode(), [400, 401,403,404], true)) {
            return false;
        }

        return true;
    }

    private function createRetryProxy(): RetryProxy
    {
        $retryPolicy = new SimpleRetryPolicy($this->config->getMaxTries(), [ExportRequestRetryException::class]);
        $backOffPolicy = new ExponentialBackOffPolicy();
        return new RetryProxy(
            $retryPolicy,
            $backOffPolicy,
            $this->logger,
        );
    }

    private function login(): void
    {
        // (Re)Create client -> enforcing a new authorization
        $this->client = $this->clientFactory->create();
    }
}


================================================
File: /src/Api/RequestFactory.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureCostExtractor\Api;

use GuzzleHttp\Psr7\Request;
use Keboola\AzureCostExtractor\Config;
use Keboola\AzureCostExtractor\ConfigDefinition;
use Keboola\Component\JsonHelper;

class RequestFactory
{
    public const API_VERSION = '2019-11-01';

    private Config $config;

    public function __construct(Config $config)
    {
        $this->config = $config;
    }

    public function create(): Request
    {
        $method = 'POST';
        $uri = 'query?api-version=' . self::API_VERSION;
        $headers = ['Content-Type' => 'application/json'];
        return new Request($method, $uri, $headers, JsonHelper::encode($this->getBody()));
    }

    private function getBody(): array
    {
        $body = [
            'type' => $this->config->getType(),
            'timeframe' => $this->config->getTimeFrame(),
            'dataset' => [
                'granularity' => $this->config->getGranularity(),
                'grouping' => array_map(
                    fn(string $dimension) => [
                        'type' => 'Dimension',
                        'name' => $dimension,
                    ],
                    $this->config->getGroupingDimensions()
                ),
                'aggregation' => [
                    $this->config->getAggregation() => [
                        'name' => $this->config->getAggregation(),
                        'function' => 'Sum',
                    ],
                ],
            ],
        ];

        if ($this->config->getTimeFrame() === ConfigDefinition::TIME_FRAME_CUSTOM) {
            $body['timePeriod'] = [
                'from' => $this->config->getTimeDimensionStart(),
                'to' => $this->config->getTimeDimensionEnd(),
            ];
        }

        return $body;
    }
}


================================================
File: /src/Api/ClientFactory.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureCostExtractor\Api;

use GuzzleHttp\Client;
use Keboola\AzureCostExtractor\Auth\TokenProvider;

class ClientFactory
{
    private TokenProvider $tokenProvider;

    private string $subscriptionId;

    public function __construct(TokenProvider $tokenProvider, string $subscriptionId)
    {
        $this->tokenProvider = $tokenProvider;
        $this->subscriptionId = $subscriptionId;
    }

    public function create(): Client
    {
        $accessToken = $this->tokenProvider->get()->getToken();
        $scope = 'subscriptions/' . urlencode($this->subscriptionId);
        return new Client([
            'base_uri' => "https://management.azure.com/$scope/providers/Microsoft.CostManagement/",
            'headers' => [
                'Authorization' => "Bearer $accessToken",
            ],
        ]);
    }
}


================================================
File: /src/run.php
================================================
<?php

declare(strict_types=1);

use Keboola\Component\Logger;
use Keboola\CommonExceptions\UserExceptionInterface;
use Keboola\AzureCostExtractor\Component;

require __DIR__ . '/../vendor/autoload.php';

$logger = new Logger();
try {
    $app = new Component($logger);
    $app->execute();
    exit(0);
} catch (UserExceptionInterface $e) {
    $logger->error($e->getMessage());
    exit(1);
} catch (Throwable $e) {
    $logger->critical(
        get_class($e) . ':' . $e->getMessage(),
        [
            'errFile' => $e->getFile(),
            'errLine' => $e->getLine(),
            'errCode' => $e->getCode(),
            'errTrace' => $e->getTraceAsString(),
            'errPrevious' => is_object($e->getPrevious()) ? get_class($e->getPrevious()) : '',
        ]
    );
    exit(2);
}


================================================
File: /src/ConfigDefinition.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureCostExtractor;

use Keboola\Component\Config\BaseConfigDefinition;
use Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition;
use Symfony\Component\Config\Definition\Exception\InvalidConfigurationException;

class ConfigDefinition extends BaseConfigDefinition
{
    public const DEFAULT_MAX_TRIES = 5;
    public const TIME_FRAME_CUSTOM = 'Custom';
    public const TYPE_VALUES = [
        'ActualCost',
        'AmortizedCost',
        'Usage',
    ];
    public const AGGREGATION_VALUES = [
        'Cost',
        'CostUSD',
        'PreTaxCostUSD',
        'UsageQuantity',
        'PreTaxCost',
    ];
    public const GRANULARITY_VALUES = [
        'None',
        'Daily',
        'Monthly',
    ];
    public const TIME_FRAME_VALUES = [
        'WeekToDate',
        'MonthToDate',
        'BillingMonthToDate',
        'TheLastMonth',
        'TheLastBillingMonth',
        self::TIME_FRAME_CUSTOM,
    ];
    public const GROUPING_DIMENSION_VALUES = [
        'ServiceName',
        'ResourceGroupName',
        'ResourceLocation',
        'ResourceType',
        'ResourceId',
        'MeterCategory',
        'MeterSubCategory',
        'Meter',
        'ServiceTier',
        'BillingPeriod',
        'InvoiceNumber',
        'PartNumber',
        'PricingModel',
        'ChargeType',
        'PublisherType',
        'ReservationId',
        'ReservationName',
        'Frequency',
        'ResourceGuid',
    ];

    protected function getParametersDefinition(): ArrayNodeDefinition
    {
        $parametersNode = parent::getParametersDefinition();

        // @formatter:off
        /** @noinspection NullPointerExceptionInspection */
        $parametersNode
            ->isRequired()
            ->children()
                ->scalarNode('subscriptionId')->isRequired()->cannotBeEmpty()->end()
                ->integerNode('maxTries')->min(1)->defaultValue(self::DEFAULT_MAX_TRIES)->end()
                ->arrayNode('servicePrincipal')
                    ->children()
                        ->scalarNode('tenant')
                            ->isRequired()
                            ->cannotBeEmpty()
                        ->end()
                        ->scalarNode('username')
                            ->isRequired()
                            ->cannotBeEmpty()
                        ->end()
                        ->scalarNode('#password')
                            ->isRequired()
                            ->cannotBeEmpty()
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('export')
                    ->isRequired()
                    ->children()
                        ->scalarNode('destination')->isRequired()->cannotBeEmpty()->end()
                        ->enumNode('type')
                            ->values(self::TYPE_VALUES)
                            ->defaultValue('ActualCost')
                        ->end()
                        ->enumNode('aggregation')
                            ->values(self::AGGREGATION_VALUES)
                            ->defaultValue('Cost')
                        ->end()
                        ->enumNode('granularity')
                            ->values(self::GRANULARITY_VALUES)
                            ->defaultValue('Daily')
                        ->end()
                        ->booleanNode('incremental')
                            ->defaultValue(true)
                        ->end()
                        ->arrayNode('timeDimension')
                            ->addDefaultsIfNotSet()
                            ->children()
                                ->enumNode('timeFrame')
                                    ->values(self::TIME_FRAME_VALUES)
                                    ->defaultValue('MonthToDate')
                                ->end()
                                ->scalarNode('start')->defaultNull()->end()
                                ->scalarNode('end')->defaultNull()->end()
                            ->end()
                        ->end()
                        ->arrayNode('groupingDimensions')
                            ->isRequired()
                            ->requiresAtLeastOneElement()
                            ->enumPrototype()
                                ->values(self::GROUPING_DIMENSION_VALUES)
                            ->end()
                        ->end()
                    ->end()
               ->end()
            ->end();
        // @formatter:on

        $parametersNode->validate()->always(function (array $parameters): array {
            return $this->validate($parameters);
        });

        return $parametersNode;
    }

    protected function validate(array $parameters): array
    {
        $timeDimension = $parameters['export']['timeDimension'] ?? [];
        $timeFrame = $timeDimension['timeFrame'] ?? null;
        $customTimeFrame = $timeFrame === self::TIME_FRAME_CUSTOM;

        // Custom timeFrame, but missing start or end
        if ($customTimeFrame && (empty($timeDimension['start']) || empty($timeDimension['end']))) {
            throw new InvalidConfigurationException(sprintf(
                'Missing configuration parameters "parameters.export.timeDimension.start/end" for timeFrame="%s".',
                $timeFrame
            ));
        }

        // Not custom timeFrame, but start or end is set
        if (!$customTimeFrame && (!empty($timeDimension['start']) || !empty($timeDimension['end']))) {
            throw new InvalidConfigurationException(sprintf(
                'Configuration parameters "parameters.export.timeDimension.start/end" ' .
                'are not compatible with timeFrame="%s", please use timeFrame="%s".',
                $timeFrame,
                ConfigDefinition::TIME_FRAME_CUSTOM
            ));
        }

        foreach (['start', 'end'] as $key) {
            if (!empty($timeDimension[$key]) and !preg_match('~^\d{4}-\d{2}-\d{2}$~', $timeDimension[$key])) {
                throw new InvalidConfigurationException(sprintf(
                    'Invalid date "%s" in "parameters.export.timeDimension.%s", please use "YYYY-MM-DD" format.',
                    $timeDimension[$key],
                    $key
                ));
            }
        }

        return $parameters;
    }
}


================================================
File: /.env.dist
================================================
OAUTH_APP_NAME="Keboola Azure Cost Extractor"
OAUTH_APP_ID=
OAUTH_APP_SECRET=
OAUTH_ACCESS_TOKEN=
OAUTH_REFRESH_TOKEN=
SERVICE_PRINCIPAL_TENANT=
SERVICE_PRINCIPAL_USERNAME=
SERVICE_PRINCIPAL_PASSWORD=
TEST_SUBSCRIPTION_ID=


================================================
File: /composer.lock
================================================
{
    "_readme": [
        "This file locks the dependencies of your project to a known state",
        "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies",
        "This file is @generated automatically"
    ],
    "content-hash": "3a0b65c171fe284aa026de1bb734ebc3",
    "packages": [
        {
            "name": "guzzlehttp/guzzle",
            "version": "7.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/guzzle/guzzle.git",
                "reference": "0aa74dfb41ae110835923ef10a9d803a22d50e79"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/guzzle/guzzle/zipball/0aa74dfb41ae110835923ef10a9d803a22d50e79",
                "reference": "0aa74dfb41ae110835923ef10a9d803a22d50e79",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "guzzlehttp/promises": "^1.4",
                "guzzlehttp/psr7": "^1.7",
                "php": "^7.2.5 || ^8.0",
                "psr/http-client": "^1.0"
            },
            "provide": {
                "psr/http-client-implementation": "1.0"
            },
            "require-dev": {
                "ext-curl": "*",
                "php-http/client-integration-tests": "^3.0",
                "phpunit/phpunit": "^8.5.5 || ^9.3.5",
                "psr/log": "^1.1"
            },
            "suggest": {
                "ext-curl": "Required for CURL handler support",
                "ext-intl": "Required for Internationalized Domain Name (IDN) support",
                "psr/log": "Required for using the Log middleware"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "7.1-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "GuzzleHttp\\": "src/"
                },
                "files": [
                    "src/functions_include.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Michael Dowling",
                    "email": "mtdowling@gmail.com",
                    "homepage": "https://github.com/mtdowling"
                },
                {
                    "name": "Márk Sági-Kazár",
                    "email": "mark.sagikazar@gmail.com",
                    "homepage": "https://sagikazarmark.hu"
                }
            ],
            "description": "Guzzle is a PHP HTTP client library",
            "homepage": "http://guzzlephp.org/",
            "keywords": [
                "client",
                "curl",
                "framework",
                "http",
                "http client",
                "psr-18",
                "psr-7",
                "rest",
                "web service"
            ],
            "support": {
                "issues": "https://github.com/guzzle/guzzle/issues",
                "source": "https://github.com/guzzle/guzzle/tree/7.2.0"
            },
            "funding": [
                {
                    "url": "https://github.com/GrahamCampbell",
                    "type": "github"
                },
                {
                    "url": "https://github.com/Nyholm",
                    "type": "github"
                },
                {
                    "url": "https://github.com/alexeyshockov",
                    "type": "github"
                },
                {
                    "url": "https://github.com/gmponos",
                    "type": "github"
                }
            ],
            "time": "2020-10-10T11:47:56+00:00"
        },
        {
            "name": "guzzlehttp/promises",
            "version": "1.4.0",
            "source": {
                "type": "git",
                "url": "https://github.com/guzzle/promises.git",
                "reference": "60d379c243457e073cff02bc323a2a86cb355631"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/guzzle/promises/zipball/60d379c243457e073cff02bc323a2a86cb355631",
                "reference": "60d379c243457e073cff02bc323a2a86cb355631",
                "shasum": ""
            },
            "require": {
                "php": ">=5.5"
            },
            "require-dev": {
                "symfony/phpunit-bridge": "^4.4 || ^5.1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.4-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "GuzzleHttp\\Promise\\": "src/"
                },
                "files": [
                    "src/functions_include.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Michael Dowling",
                    "email": "mtdowling@gmail.com",
                    "homepage": "https://github.com/mtdowling"
                }
            ],
            "description": "Guzzle promises library",
            "keywords": [
                "promise"
            ],
            "support": {
                "issues": "https://github.com/guzzle/promises/issues",
                "source": "https://github.com/guzzle/promises/tree/1.4.0"
            },
            "time": "2020-09-30T07:37:28+00:00"
        },
        {
            "name": "guzzlehttp/psr7",
            "version": "1.7.0",
            "source": {
                "type": "git",
                "url": "https://github.com/guzzle/psr7.git",
                "reference": "53330f47520498c0ae1f61f7e2c90f55690c06a3"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/guzzle/psr7/zipball/53330f47520498c0ae1f61f7e2c90f55690c06a3",
                "reference": "53330f47520498c0ae1f61f7e2c90f55690c06a3",
                "shasum": ""
            },
            "require": {
                "php": ">=5.4.0",
                "psr/http-message": "~1.0",
                "ralouphie/getallheaders": "^2.0.5 || ^3.0.0"
            },
            "provide": {
                "psr/http-message-implementation": "1.0"
            },
            "require-dev": {
                "ext-zlib": "*",
                "phpunit/phpunit": "~4.8.36 || ^5.7.27 || ^6.5.14 || ^7.5.20 || ^8.5.8 || ^9.3.10"
            },
            "suggest": {
                "laminas/laminas-httphandlerrunner": "Emit PSR-7 responses"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.7-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "GuzzleHttp\\Psr7\\": "src/"
                },
                "files": [
                    "src/functions_include.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Michael Dowling",
                    "email": "mtdowling@gmail.com",
                    "homepage": "https://github.com/mtdowling"
                },
                {
                    "name": "Tobias Schultze",
                    "homepage": "https://github.com/Tobion"
                }
            ],
            "description": "PSR-7 message implementation that also provides common utility methods",
            "keywords": [
                "http",
                "message",
                "psr-7",
                "request",
                "response",
                "stream",
                "uri",
                "url"
            ],
            "support": {
                "issues": "https://github.com/guzzle/psr7/issues",
                "source": "https://github.com/guzzle/psr7/tree/1.7.0"
            },
            "time": "2020-09-30T07:37:11+00:00"
        },
        {
            "name": "keboola/common-exceptions",
            "version": "1.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/common-exceptions.git",
                "reference": "fb3ac03b92e7db56f1f4e1952d232ef8640a18d7"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/common-exceptions/zipball/fb3ac03b92e7db56f1f4e1952d232ef8640a18d7",
                "reference": "fb3ac03b92e7db56f1f4e1952d232ef8640a18d7",
                "shasum": ""
            },
            "require": {
                "php": "^7.1"
            },
            "require-dev": {
                "jakub-onderka/php-parallel-lint": "^1.0",
                "keboola/coding-standard": ">=7.0.2",
                "keboola/php-temp": "^1.0",
                "phpstan/phpstan-shim": "^0.10.6",
                "phpunit/phpunit": "^7.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\CommonExceptions\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Common exceptions shared between different applications",
            "support": {
                "source": "https://github.com/keboola/common-exceptions/tree/master"
            },
            "time": "2020-07-07T07:42:44+00:00"
        },
        {
            "name": "keboola/csv",
            "version": "2.2.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-csv.git",
                "reference": "eb5a835a855f1bf03ddaa330e7b22fc5fb6042d7"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-csv/zipball/eb5a835a855f1bf03ddaa330e7b22fc5fb6042d7",
                "reference": "eb5a835a855f1bf03ddaa330e7b22fc5fb6042d7",
                "shasum": ""
            },
            "require": {
                "php": ">=5.6"
            },
            "require-dev": {
                "ext-json": "*",
                "phpunit/phpunit": "^5.7",
                "squizlabs/php_codesniffer": "^3.2"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Csv\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Keboola CSV reader and writer",
            "homepage": "http://keboola.com",
            "keywords": [
                "csv",
                "rfc4180"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-csv/issues",
                "source": "https://github.com/keboola/php-csv/tree/master"
            },
            "time": "2020-07-28T09:27:05+00:00"
        },
        {
            "name": "keboola/php-component",
            "version": "8.1.2",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-component.git",
                "reference": "49af27d934f09be2e11ea1becb2c98e75032b36b"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-component/zipball/49af27d934f09be2e11ea1becb2c98e75032b36b",
                "reference": "49af27d934f09be2e11ea1becb2c98e75032b36b",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "keboola/common-exceptions": "^1.0",
                "monolog/monolog": "^2.0",
                "php": "^7.3",
                "symfony/config": "^5.0",
                "symfony/filesystem": "^5.0",
                "symfony/finder": "^5.0",
                "symfony/serializer": "^5.0"
            },
            "require-dev": {
                "devedge/sami-github": "^1.0",
                "jakub-onderka/php-parallel-lint": "^1.0",
                "keboola/coding-standard": ">=7.0.2",
                "keboola/php-temp": "^2.0",
                "phpstan/phpstan": "^0.12.14",
                "phpunit/phpunit": "^9.0"
            },
            "type": "project",
            "autoload": {
                "psr-4": {
                    "Keboola\\Component\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Helper classes for developing Keboola PHP components",
            "keywords": [
                "component",
                "docker",
                "keboola"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-component/issues",
                "source": "https://github.com/keboola/php-component/tree/8.1.2"
            },
            "time": "2020-04-30T11:08:47+00:00"
        },
        {
            "name": "keboola/php-datatypes",
            "version": "4.9.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-datatypes.git",
                "reference": "c70b78804e49472121a0f3604ef9740c8612beb6"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-datatypes/zipball/c70b78804e49472121a0f3604ef9740c8612beb6",
                "reference": "c70b78804e49472121a0f3604ef9740c8612beb6",
                "shasum": ""
            },
            "require": {
                "php": ">=5.6"
            },
            "require-dev": {
                "codeclimate/php-test-reporter": "~0.4",
                "php-parallel-lint/php-parallel-lint": "^1.1",
                "phpstan/phpstan": "~0.9",
                "phpunit/phpunit": "^5.0",
                "squizlabs/php_codesniffer": "^2.6"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Datatype\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "PHP datatypes for databases",
            "support": {
                "issues": "https://github.com/keboola/php-datatypes/issues",
                "source": "https://github.com/keboola/php-datatypes/tree/4.9.0"
            },
            "time": "2020-11-11T10:55:41+00:00"
        },
        {
            "name": "keboola/php-utils",
            "version": "4.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-utils.git",
                "reference": "f5be83a50b5c4858f5698747e8a795048a89c382"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-utils/zipball/f5be83a50b5c4858f5698747e8a795048a89c382",
                "reference": "f5be83a50b5c4858f5698747e8a795048a89c382",
                "shasum": ""
            },
            "require": {
                "keboola/sanitizer": "^0.1",
                "php": ">=5.6.0",
                "seld/jsonlint": "^1.4"
            },
            "require-dev": {
                "codeclimate/php-test-reporter": "~0.2",
                "phpunit/phpunit": "~5.0",
                "squizlabs/php_codesniffer": "~2.4"
            },
            "type": "library",
            "autoload": {
                "files": [
                    "src/Keboola/Utils/jsonDecode.php",
                    "src/Keboola/Utils/sanitizeUtf8.php",
                    "src/Keboola/Utils/objectToArray.php",
                    "src/Keboola/Utils/formatDateTime.php",
                    "src/Keboola/Utils/replaceDates.php",
                    "src/Keboola/Utils/replaceDatesInArray.php",
                    "src/Keboola/Utils/buildUrl.php",
                    "src/Keboola/Utils/httpBuildUrl.php",
                    "src/Keboola/Utils/returnBytes.php",
                    "src/Keboola/Utils/camelize.php",
                    "src/Keboola/Utils/getDataFromPath.php",
                    "src/Keboola/Utils/isValidDateTimeString.php",
                    "src/Keboola/Utils/flattenArray.php",
                    "src/Keboola/Utils/arrayToObject.php",
                    "src/Keboola/Utils/isEmptyObject.php",
                    "src/Keboola/Utils/stripInvalidUtf16.php",
                    "src/Keboola/Utils/toAscii.php",
                    "src/Keboola/Utils/sanitizeColumnName.php",
                    "src/Keboola/Utils/formatBytes.php"
                ],
                "psr-0": {
                    "Keboola\\Utils": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Misc utility functions",
            "keywords": [
                "utility"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-utils/issues",
                "source": "https://github.com/keboola/php-utils/tree/master"
            },
            "time": "2019-10-04T20:55:45+00:00"
        },
        {
            "name": "keboola/retry",
            "version": "0.5.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/retry.git",
                "reference": "afdb190a9186b30a27c75df2aaf24a6de07efebb"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/retry/zipball/afdb190a9186b30a27c75df2aaf24a6de07efebb",
                "reference": "afdb190a9186b30a27c75df2aaf24a6de07efebb",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1",
                "psr/log": "^1.1"
            },
            "replace": {
                "vkartaviy/retry": "*"
            },
            "require-dev": {
                "keboola/coding-standard": "^7.0",
                "phpstan/phpstan-shim": "^0.10",
                "phpunit/phpunit": "7.*"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Retry\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola Dev",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Library for repeatable and retryable operations",
            "keywords": [
                "backoff",
                "proxy",
                "repeat",
                "retry"
            ],
            "support": {
                "issues": "https://github.com/keboola/retry/issues",
                "source": "https://github.com/keboola/retry/tree/0.5.0"
            },
            "time": "2020-01-31T14:20:00+00:00"
        },
        {
            "name": "keboola/sanitizer",
            "version": "0.1.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/sanitizer.git",
                "reference": "6edda00cd177409a33f180b8f12bdad89bf893c5"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/sanitizer/zipball/6edda00cd177409a33f180b8f12bdad89bf893c5",
                "reference": "6edda00cd177409a33f180b8f12bdad89bf893c5",
                "shasum": ""
            },
            "require": {
                "php": ">=5.6"
            },
            "require-dev": {
                "jakub-onderka/php-parallel-lint": "^1.0",
                "phpunit/phpunit": "^5.7",
                "squizlabs/php_codesniffer": "^3.4"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Utils\\Sanitizer\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Column name sanitizer",
            "support": {
                "issues": "https://github.com/keboola/sanitizer/issues",
                "source": "https://github.com/keboola/sanitizer/tree/0.1.0"
            },
            "time": "2019-01-11T10:21:17+00:00"
        },
        {
            "name": "league/oauth2-client",
            "version": "2.6.0",
            "source": {
                "type": "git",
                "url": "https://github.com/thephpleague/oauth2-client.git",
                "reference": "badb01e62383430706433191b82506b6df24ad98"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/thephpleague/oauth2-client/zipball/badb01e62383430706433191b82506b6df24ad98",
                "reference": "badb01e62383430706433191b82506b6df24ad98",
                "shasum": ""
            },
            "require": {
                "guzzlehttp/guzzle": "^6.0 || ^7.0",
                "paragonie/random_compat": "^1 || ^2 || ^9.99",
                "php": "^5.6 || ^7.0 || ^8.0"
            },
            "require-dev": {
                "mockery/mockery": "^1.3",
                "php-parallel-lint/php-parallel-lint": "^1.2",
                "phpunit/phpunit": "^5.7 || ^6.0 || ^9.3",
                "squizlabs/php_codesniffer": "^2.3 || ^3.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-2.x": "2.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "League\\OAuth2\\Client\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Alex Bilbie",
                    "email": "hello@alexbilbie.com",
                    "homepage": "http://www.alexbilbie.com",
                    "role": "Developer"
                },
                {
                    "name": "Woody Gilk",
                    "homepage": "https://github.com/shadowhand",
                    "role": "Contributor"
                }
            ],
            "description": "OAuth 2.0 Client Library",
            "keywords": [
                "Authentication",
                "SSO",
                "authorization",
                "identity",
                "idp",
                "oauth",
                "oauth2",
                "single sign on"
            ],
            "support": {
                "issues": "https://github.com/thephpleague/oauth2-client/issues",
                "source": "https://github.com/thephpleague/oauth2-client/tree/2.6.0"
            },
            "time": "2020-10-28T02:03:40+00:00"
        },
        {
            "name": "monolog/monolog",
            "version": "2.1.1",
            "source": {
                "type": "git",
                "url": "https://github.com/Seldaek/monolog.git",
                "reference": "f9eee5cec93dfb313a38b6b288741e84e53f02d5"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/Seldaek/monolog/zipball/f9eee5cec93dfb313a38b6b288741e84e53f02d5",
                "reference": "f9eee5cec93dfb313a38b6b288741e84e53f02d5",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2",
                "psr/log": "^1.0.1"
            },
            "provide": {
                "psr/log-implementation": "1.0.0"
            },
            "require-dev": {
                "aws/aws-sdk-php": "^2.4.9 || ^3.0",
                "doctrine/couchdb": "~1.0@dev",
                "elasticsearch/elasticsearch": "^6.0",
                "graylog2/gelf-php": "^1.4.2",
                "php-amqplib/php-amqplib": "~2.4",
                "php-console/php-console": "^3.1.3",
                "php-parallel-lint/php-parallel-lint": "^1.0",
                "phpspec/prophecy": "^1.6.1",
                "phpunit/phpunit": "^8.5",
                "predis/predis": "^1.1",
                "rollbar/rollbar": "^1.3",
                "ruflin/elastica": ">=0.90 <3.0",
                "swiftmailer/swiftmailer": "^5.3|^6.0"
            },
            "suggest": {
                "aws/aws-sdk-php": "Allow sending log messages to AWS services like DynamoDB",
                "doctrine/couchdb": "Allow sending log messages to a CouchDB server",
                "elasticsearch/elasticsearch": "Allow sending log messages to an Elasticsearch server via official client",
                "ext-amqp": "Allow sending log messages to an AMQP server (1.0+ required)",
                "ext-mbstring": "Allow to work properly with unicode symbols",
                "ext-mongodb": "Allow sending log messages to a MongoDB server (via driver)",
                "graylog2/gelf-php": "Allow sending log messages to a GrayLog2 server",
                "mongodb/mongodb": "Allow sending log messages to a MongoDB server (via library)",
                "php-amqplib/php-amqplib": "Allow sending log messages to an AMQP server using php-amqplib",
                "php-console/php-console": "Allow sending log messages to Google Chrome",
                "rollbar/rollbar": "Allow sending log messages to Rollbar",
                "ruflin/elastica": "Allow sending log messages to an Elastic Search server"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Monolog\\": "src/Monolog"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Jordi Boggiano",
                    "email": "j.boggiano@seld.be",
                    "homepage": "http://seld.be"
                }
            ],
            "description": "Sends your logs to files, sockets, inboxes, databases and various web services",
            "homepage": "http://github.com/Seldaek/monolog",
            "keywords": [
                "log",
                "logging",
                "psr-3"
            ],
            "support": {
                "issues": "https://github.com/Seldaek/monolog/issues",
                "source": "https://github.com/Seldaek/monolog/tree/2.1.1"
            },
            "funding": [
                {
                    "url": "https://github.com/Seldaek",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/monolog/monolog",
                    "type": "tidelift"
                }
            ],
            "time": "2020-07-23T08:41:23+00:00"
        },
        {
            "name": "paragonie/random_compat",
            "version": "v9.99.100",
            "source": {
                "type": "git",
                "url": "https://github.com/paragonie/random_compat.git",
                "reference": "996434e5492cb4c3edcb9168db6fbb1359ef965a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/paragonie/random_compat/zipball/996434e5492cb4c3edcb9168db6fbb1359ef965a",
                "reference": "996434e5492cb4c3edcb9168db6fbb1359ef965a",
                "shasum": ""
            },
            "require": {
                "php": ">= 7"
            },
            "require-dev": {
                "phpunit/phpunit": "4.*|5.*",
                "vimeo/psalm": "^1"
            },
            "suggest": {
                "ext-libsodium": "Provides a modern crypto API that can be used to generate random bytes."
            },
            "type": "library",
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Paragon Initiative Enterprises",
                    "email": "security@paragonie.com",
                    "homepage": "https://paragonie.com"
                }
            ],
            "description": "PHP 5.x polyfill for random_bytes() and random_int() from PHP 7",
            "keywords": [
                "csprng",
                "polyfill",
                "pseudorandom",
                "random"
            ],
            "support": {
                "email": "info@paragonie.com",
                "issues": "https://github.com/paragonie/random_compat/issues",
                "source": "https://github.com/paragonie/random_compat"
            },
            "time": "2020-10-15T08:29:30+00:00"
        },
        {
            "name": "psr/http-client",
            "version": "1.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/http-client.git",
                "reference": "2dfb5f6c5eff0e91e20e913f8c5452ed95b86621"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/http-client/zipball/2dfb5f6c5eff0e91e20e913f8c5452ed95b86621",
                "reference": "2dfb5f6c5eff0e91e20e913f8c5452ed95b86621",
                "shasum": ""
            },
            "require": {
                "php": "^7.0 || ^8.0",
                "psr/http-message": "^1.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Http\\Client\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "http://www.php-fig.org/"
                }
            ],
            "description": "Common interface for HTTP clients",
            "homepage": "https://github.com/php-fig/http-client",
            "keywords": [
                "http",
                "http-client",
                "psr",
                "psr-18"
            ],
            "support": {
                "source": "https://github.com/php-fig/http-client/tree/master"
            },
            "time": "2020-06-29T06:28:15+00:00"
        },
        {
            "name": "psr/http-message",
            "version": "1.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/http-message.git",
                "reference": "f6561bf28d520154e4b0ec72be95418abe6d9363"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/http-message/zipball/f6561bf28d520154e4b0ec72be95418abe6d9363",
                "reference": "f6561bf28d520154e4b0ec72be95418abe6d9363",
                "shasum": ""
            },
            "require": {
                "php": ">=5.3.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Http\\Message\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "http://www.php-fig.org/"
                }
            ],
            "description": "Common interface for HTTP messages",
            "homepage": "https://github.com/php-fig/http-message",
            "keywords": [
                "http",
                "http-message",
                "psr",
                "psr-7",
                "request",
                "response"
            ],
            "support": {
                "source": "https://github.com/php-fig/http-message/tree/master"
            },
            "time": "2016-08-06T14:39:51+00:00"
        },
        {
            "name": "psr/log",
            "version": "1.1.3",
            "source": {
                "type": "git",
                "url": "https://github.com/php-fig/log.git",
                "reference": "0f73288fd15629204f9d42b7055f72dacbe811fc"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-fig/log/zipball/0f73288fd15629204f9d42b7055f72dacbe811fc",
                "reference": "0f73288fd15629204f9d42b7055f72dacbe811fc",
                "shasum": ""
            },
            "require": {
                "php": ">=5.3.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.1.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Psr\\Log\\": "Psr/Log/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "PHP-FIG",
                    "homepage": "http://www.php-fig.org/"
                }
            ],
            "description": "Common interface for logging libraries",
            "homepage": "https://github.com/php-fig/log",
            "keywords": [
                "log",
                "psr",
                "psr-3"
            ],
            "support": {
                "source": "https://github.com/php-fig/log/tree/1.1.3"
            },
            "time": "2020-03-23T09:12:05+00:00"
        },
        {
            "name": "ralouphie/getallheaders",
            "version": "3.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/ralouphie/getallheaders.git",
                "reference": "120b605dfeb996808c31b6477290a714d356e822"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/ralouphie/getallheaders/zipball/120b605dfeb996808c31b6477290a714d356e822",
                "reference": "120b605dfeb996808c31b6477290a714d356e822",
                "shasum": ""
            },
            "require": {
                "php": ">=5.6"
            },
            "require-dev": {
                "php-coveralls/php-coveralls": "^2.1",
                "phpunit/phpunit": "^5 || ^6.5"
            },
            "type": "library",
            "autoload": {
                "files": [
                    "src/getallheaders.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Ralph Khattar",
                    "email": "ralph.khattar@gmail.com"
                }
            ],
            "description": "A polyfill for getallheaders.",
            "support": {
                "issues": "https://github.com/ralouphie/getallheaders/issues",
                "source": "https://github.com/ralouphie/getallheaders/tree/develop"
            },
            "time": "2019-03-08T08:55:37+00:00"
        },
        {
            "name": "seld/jsonlint",
            "version": "1.8.3",
            "source": {
                "type": "git",
                "url": "https://github.com/Seldaek/jsonlint.git",
                "reference": "9ad6ce79c342fbd44df10ea95511a1b24dee5b57"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/Seldaek/jsonlint/zipball/9ad6ce79c342fbd44df10ea95511a1b24dee5b57",
                "reference": "9ad6ce79c342fbd44df10ea95511a1b24dee5b57",
                "shasum": ""
            },
            "require": {
                "php": "^5.3 || ^7.0 || ^8.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^4.8.35 || ^5.7 || ^6.0"
            },
            "bin": [
                "bin/jsonlint"
            ],
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Seld\\JsonLint\\": "src/Seld/JsonLint/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Jordi Boggiano",
                    "email": "j.boggiano@seld.be",
                    "homepage": "http://seld.be"
                }
            ],
            "description": "JSON Linter",
            "keywords": [
                "json",
                "linter",
                "parser",
                "validator"
            ],
            "support": {
                "issues": "https://github.com/Seldaek/jsonlint/issues",
                "source": "https://github.com/Seldaek/jsonlint/tree/1.8.3"
            },
            "funding": [
                {
                    "url": "https://github.com/Seldaek",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/seld/jsonlint",
                    "type": "tidelift"
                }
            ],
            "time": "2020-11-11T09:19:24+00:00"
        },
        {
            "name": "symfony/config",
            "version": "v5.1.8",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/config.git",
                "reference": "11baeefa4c179d6908655a7b6be728f62367c193"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/config/zipball/11baeefa4c179d6908655a7b6be728f62367c193",
                "reference": "11baeefa4c179d6908655a7b6be728f62367c193",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5",
                "symfony/deprecation-contracts": "^2.1",
                "symfony/filesystem": "^4.4|^5.0",
                "symfony/polyfill-ctype": "~1.8",
                "symfony/polyfill-php80": "^1.15"
            },
            "conflict": {
                "symfony/finder": "<4.4"
            },
            "require-dev": {
                "symfony/event-dispatcher": "^4.4|^5.0",
                "symfony/finder": "^4.4|^5.0",
                "symfony/messenger": "^4.4|^5.0",
                "symfony/service-contracts": "^1.1|^2",
                "symfony/yaml": "^4.4|^5.0"
            },
            "suggest": {
                "symfony/yaml": "To use the yaml reference dumper"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Config\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony Config Component",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/config/tree/v5.1.8"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2020-10-24T12:01:57+00:00"
        },
        {
            "name": "symfony/deprecation-contracts",
            "version": "v2.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/deprecation-contracts.git",
                "reference": "5fa56b4074d1ae755beb55617ddafe6f5d78f665"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/deprecation-contracts/zipball/5fa56b4074d1ae755beb55617ddafe6f5d78f665",
                "reference": "5fa56b4074d1ae755beb55617ddafe6f5d78f665",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.2-dev"
                },
                "thanks": {
                    "name": "symfony/contracts",
                    "url": "https://github.com/symfony/contracts"
                }
            },
            "autoload": {
                "files": [
                    "function.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "A generic function and convention to trigger deprecation notices",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/deprecation-contracts/tree/master"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2020-09-07T11:33:47+00:00"
        },
        {
            "name": "symfony/filesystem",
            "version": "v5.1.8",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/filesystem.git",
                "reference": "df08650ea7aee2d925380069c131a66124d79177"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/filesystem/zipball/df08650ea7aee2d925380069c131a66124d79177",
                "reference": "df08650ea7aee2d925380069c131a66124d79177",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5",
                "symfony/polyfill-ctype": "~1.8"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Filesystem\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony Filesystem Component",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/filesystem/tree/v5.1.8"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2020-10-24T12:01:57+00:00"
        },
        {
            "name": "symfony/finder",
            "version": "v5.1.8",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/finder.git",
                "reference": "e70eb5a69c2ff61ea135a13d2266e8914a67b3a0"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/finder/zipball/e70eb5a69c2ff61ea135a13d2266e8914a67b3a0",
                "reference": "e70eb5a69c2ff61ea135a13d2266e8914a67b3a0",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Finder\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony Finder Component",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/finder/tree/v5.1.8"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2020-10-24T12:01:57+00:00"
        },
        {
            "name": "symfony/polyfill-ctype",
            "version": "v1.20.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-ctype.git",
                "reference": "f4ba089a5b6366e453971d3aad5fe8e897b37f41"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-ctype/zipball/f4ba089a5b6366e453971d3aad5fe8e897b37f41",
                "reference": "f4ba089a5b6366e453971d3aad5fe8e897b37f41",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "suggest": {
                "ext-ctype": "For best performance"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "1.20-dev"
                },
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Polyfill\\Ctype\\": ""
                },
                "files": [
                    "bootstrap.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Gert de Pagter",
                    "email": "BackEndTea@gmail.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill for ctype functions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "ctype",
                "polyfill",
                "portable"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-ctype/tree/v1.20.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2020-10-23T14:02:19+00:00"
        },
        {
            "name": "symfony/polyfill-php80",
            "version": "v1.20.0",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/polyfill-php80.git",
                "reference": "e70aa8b064c5b72d3df2abd5ab1e90464ad009de"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/polyfill-php80/zipball/e70aa8b064c5b72d3df2abd5ab1e90464ad009de",
                "reference": "e70aa8b064c5b72d3df2abd5ab1e90464ad009de",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-main": "1.20-dev"
                },
                "thanks": {
                    "name": "symfony/polyfill",
                    "url": "https://github.com/symfony/polyfill"
                }
            },
            "autoload": {
                "psr-4": {
                    "Symfony\\Polyfill\\Php80\\": ""
                },
                "files": [
                    "bootstrap.php"
                ],
                "classmap": [
                    "Resources/stubs"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Ion Bazan",
                    "email": "ion.bazan@gmail.com"
                },
                {
                    "name": "Nicolas Grekas",
                    "email": "p@tchwork.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony polyfill backporting some PHP 8.0+ features to lower PHP versions",
            "homepage": "https://symfony.com",
            "keywords": [
                "compatibility",
                "polyfill",
                "portable",
                "shim"
            ],
            "support": {
                "source": "https://github.com/symfony/polyfill-php80/tree/v1.20.0"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2020-10-23T14:02:19+00:00"
        },
        {
            "name": "symfony/serializer",
            "version": "v5.1.8",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/serializer.git",
                "reference": "20d3c6c58c41344a427488c0d2902bfbfbe17ddb"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/serializer/zipball/20d3c6c58c41344a427488c0d2902bfbfbe17ddb",
                "reference": "20d3c6c58c41344a427488c0d2902bfbfbe17ddb",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5",
                "symfony/polyfill-ctype": "~1.8",
                "symfony/polyfill-php80": "^1.15"
            },
            "conflict": {
                "phpdocumentor/type-resolver": "<0.2.1",
                "symfony/dependency-injection": "<4.4",
                "symfony/property-access": "<4.4",
                "symfony/property-info": "<4.4",
                "symfony/yaml": "<4.4"
            },
            "require-dev": {
                "doctrine/annotations": "~1.0",
                "doctrine/cache": "~1.0",
                "phpdocumentor/reflection-docblock": "^3.2|^4.0",
                "symfony/cache": "^4.4|^5.0",
                "symfony/config": "^4.4|^5.0",
                "symfony/dependency-injection": "^4.4|^5.0",
                "symfony/error-handler": "^4.4|^5.0",
                "symfony/http-foundation": "^4.4|^5.0",
                "symfony/mime": "^4.4|^5.0",
                "symfony/property-access": "^4.4|^5.0",
                "symfony/property-info": "^4.4|^5.0",
                "symfony/validator": "^4.4|^5.0",
                "symfony/yaml": "^4.4|^5.0"
            },
            "suggest": {
                "doctrine/annotations": "For using the annotation mapping. You will also need doctrine/cache.",
                "doctrine/cache": "For using the default cached annotation reader and metadata cache.",
                "psr/cache-implementation": "For using the metadata cache.",
                "symfony/config": "For using the XML mapping loader.",
                "symfony/mime": "For using a MIME type guesser within the DataUriNormalizer.",
                "symfony/property-access": "For using the ObjectNormalizer.",
                "symfony/property-info": "To deserialize relations.",
                "symfony/yaml": "For using the default YAML mapping loader."
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Serializer\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony Serializer Component",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/serializer/tree/v5.1.8"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2020-10-24T12:01:57+00:00"
        }
    ],
    "packages-dev": [
        {
            "name": "doctrine/instantiator",
            "version": "1.4.0",
            "source": {
                "type": "git",
                "url": "https://github.com/doctrine/instantiator.git",
                "reference": "d56bf6102915de5702778fe20f2de3b2fe570b5b"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/doctrine/instantiator/zipball/d56bf6102915de5702778fe20f2de3b2fe570b5b",
                "reference": "d56bf6102915de5702778fe20f2de3b2fe570b5b",
                "shasum": ""
            },
            "require": {
                "php": "^7.1 || ^8.0"
            },
            "require-dev": {
                "doctrine/coding-standard": "^8.0",
                "ext-pdo": "*",
                "ext-phar": "*",
                "phpbench/phpbench": "^0.13 || 1.0.0-alpha2",
                "phpstan/phpstan": "^0.12",
                "phpstan/phpstan-phpunit": "^0.12",
                "phpunit/phpunit": "^7.0 || ^8.0 || ^9.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Doctrine\\Instantiator\\": "src/Doctrine/Instantiator/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Marco Pivetta",
                    "email": "ocramius@gmail.com",
                    "homepage": "https://ocramius.github.io/"
                }
            ],
            "description": "A small, lightweight utility to instantiate objects in PHP without invoking their constructors",
            "homepage": "https://www.doctrine-project.org/projects/instantiator.html",
            "keywords": [
                "constructor",
                "instantiate"
            ],
            "support": {
                "issues": "https://github.com/doctrine/instantiator/issues",
                "source": "https://github.com/doctrine/instantiator/tree/1.4.0"
            },
            "funding": [
                {
                    "url": "https://www.doctrine-project.org/sponsorship.html",
                    "type": "custom"
                },
                {
                    "url": "https://www.patreon.com/phpdoctrine",
                    "type": "patreon"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/doctrine%2Finstantiator",
                    "type": "tidelift"
                }
            ],
            "time": "2020-11-10T18:47:58+00:00"
        },
        {
            "name": "keboola/coding-standard",
            "version": "9.0.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/phpcs-standard.git",
                "reference": "bcf9ac5f664aa3bf816902438c0a8a9187cd4ebb"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/phpcs-standard/zipball/bcf9ac5f664aa3bf816902438c0a8a9187cd4ebb",
                "reference": "bcf9ac5f664aa3bf816902438c0a8a9187cd4ebb",
                "shasum": ""
            },
            "require": {
                "slevomat/coding-standard": "^4.8.6",
                "squizlabs/php_codesniffer": "^3.2"
            },
            "type": "phpcodesniffer-standard",
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Keboola coding standard",
            "support": {
                "issues": "https://github.com/keboola/phpcs-standard/issues",
                "source": "https://github.com/keboola/phpcs-standard/tree/master"
            },
            "time": "2019-10-16T11:14:48+00:00"
        },
        {
            "name": "keboola/datadir-tests",
            "version": "5.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/datadir-tests.git",
                "reference": "9b2bf6d1495973e43b48a267469cb990dfe44520"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/datadir-tests/zipball/9b2bf6d1495973e43b48a267469cb990dfe44520",
                "reference": "9b2bf6d1495973e43b48a267469cb990dfe44520",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "keboola/php-temp": "^2.0",
                "php": "^7.3",
                "phpunit/phpunit": "^9.0",
                "symfony/filesystem": "^5.0",
                "symfony/finder": "^5.0",
                "symfony/process": "^5.0"
            },
            "require-dev": {
                "jakub-onderka/php-parallel-lint": "^1.0",
                "keboola/coding-standard": "^9.0",
                "phpstan/phpstan": "^0.12.14"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\DatadirTests\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Tool for functional testing of Keboola Connection components",
            "support": {
                "issues": "https://github.com/keboola/datadir-tests/issues",
                "source": "https://github.com/keboola/datadir-tests/tree/5.2.0"
            },
            "time": "2020-09-10T12:31:35+00:00"
        },
        {
            "name": "keboola/php-temp",
            "version": "2.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/keboola/php-temp.git",
                "reference": "cbdb4dd0dfe548d7bffd74a0e66294981aea49ce"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/keboola/php-temp/zipball/cbdb4dd0dfe548d7bffd74a0e66294981aea49ce",
                "reference": "cbdb4dd0dfe548d7bffd74a0e66294981aea49ce",
                "shasum": ""
            },
            "require": {
                "php": ">=7.1",
                "symfony/filesystem": ">2.8"
            },
            "require-dev": {
                "infection/infection": "^0.12",
                "jakub-onderka/php-parallel-lint": "^1.0",
                "keboola/coding-standard": "^8.0",
                "phpstan/phpstan-shim": "^0.11",
                "phpunit/phpunit": "^7.0|^8.0"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Keboola\\Temp\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Keboola",
                    "email": "devel@keboola.com"
                }
            ],
            "description": "Temp library handles application temporary files",
            "keywords": [
                "filesystem",
                "temp"
            ],
            "support": {
                "issues": "https://github.com/keboola/php-temp/issues",
                "source": "https://github.com/keboola/php-temp/tree/2.0.1"
            },
            "time": "2019-04-26T07:18:24+00:00"
        },
        {
            "name": "myclabs/deep-copy",
            "version": "1.10.1",
            "source": {
                "type": "git",
                "url": "https://github.com/myclabs/DeepCopy.git",
                "reference": "969b211f9a51aa1f6c01d1d2aef56d3bd91598e5"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/myclabs/DeepCopy/zipball/969b211f9a51aa1f6c01d1d2aef56d3bd91598e5",
                "reference": "969b211f9a51aa1f6c01d1d2aef56d3bd91598e5",
                "shasum": ""
            },
            "require": {
                "php": "^7.1 || ^8.0"
            },
            "replace": {
                "myclabs/deep-copy": "self.version"
            },
            "require-dev": {
                "doctrine/collections": "^1.0",
                "doctrine/common": "^2.6",
                "phpunit/phpunit": "^7.1"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "DeepCopy\\": "src/DeepCopy/"
                },
                "files": [
                    "src/DeepCopy/deep_copy.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Create deep copies (clones) of your objects",
            "keywords": [
                "clone",
                "copy",
                "duplicate",
                "object",
                "object graph"
            ],
            "support": {
                "issues": "https://github.com/myclabs/DeepCopy/issues",
                "source": "https://github.com/myclabs/DeepCopy/tree/1.x"
            },
            "funding": [
                {
                    "url": "https://tidelift.com/funding/github/packagist/myclabs/deep-copy",
                    "type": "tidelift"
                }
            ],
            "time": "2020-06-29T13:22:24+00:00"
        },
        {
            "name": "nikic/php-parser",
            "version": "v4.10.2",
            "source": {
                "type": "git",
                "url": "https://github.com/nikic/PHP-Parser.git",
                "reference": "658f1be311a230e0907f5dfe0213742aff0596de"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/nikic/PHP-Parser/zipball/658f1be311a230e0907f5dfe0213742aff0596de",
                "reference": "658f1be311a230e0907f5dfe0213742aff0596de",
                "shasum": ""
            },
            "require": {
                "ext-tokenizer": "*",
                "php": ">=7.0"
            },
            "require-dev": {
                "ircmaxell/php-yacc": "^0.0.7",
                "phpunit/phpunit": "^6.5 || ^7.0 || ^8.0 || ^9.0"
            },
            "bin": [
                "bin/php-parse"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.9-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "PhpParser\\": "lib/PhpParser"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Nikita Popov"
                }
            ],
            "description": "A PHP parser written in PHP",
            "keywords": [
                "parser",
                "php"
            ],
            "support": {
                "issues": "https://github.com/nikic/PHP-Parser/issues",
                "source": "https://github.com/nikic/PHP-Parser/tree/v4.10.2"
            },
            "time": "2020-09-26T10:30:38+00:00"
        },
        {
            "name": "phar-io/manifest",
            "version": "2.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/phar-io/manifest.git",
                "reference": "85265efd3af7ba3ca4b2a2c34dbfc5788dd29133"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phar-io/manifest/zipball/85265efd3af7ba3ca4b2a2c34dbfc5788dd29133",
                "reference": "85265efd3af7ba3ca4b2a2c34dbfc5788dd29133",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-phar": "*",
                "ext-xmlwriter": "*",
                "phar-io/version": "^3.0.1",
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0.x-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Heuer",
                    "email": "sebastian@phpeople.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "Developer"
                }
            ],
            "description": "Component for reading phar.io manifest information from a PHP Archive (PHAR)",
            "support": {
                "issues": "https://github.com/phar-io/manifest/issues",
                "source": "https://github.com/phar-io/manifest/tree/master"
            },
            "time": "2020-06-27T14:33:11+00:00"
        },
        {
            "name": "phar-io/version",
            "version": "3.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/phar-io/version.git",
                "reference": "c6bb6825def89e0a32220f88337f8ceaf1975fa0"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phar-io/version/zipball/c6bb6825def89e0a32220f88337f8ceaf1975fa0",
                "reference": "c6bb6825def89e0a32220f88337f8ceaf1975fa0",
                "shasum": ""
            },
            "require": {
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Heuer",
                    "email": "sebastian@phpeople.de",
                    "role": "Developer"
                },
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "Developer"
                }
            ],
            "description": "Library for handling version information and constraints",
            "support": {
                "issues": "https://github.com/phar-io/version/issues",
                "source": "https://github.com/phar-io/version/tree/master"
            },
            "time": "2020-06-27T14:39:04+00:00"
        },
        {
            "name": "php-parallel-lint/php-parallel-lint",
            "version": "v1.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/php-parallel-lint/PHP-Parallel-Lint.git",
                "reference": "474f18bc6cc6aca61ca40bfab55139de614e51ca"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/php-parallel-lint/PHP-Parallel-Lint/zipball/474f18bc6cc6aca61ca40bfab55139de614e51ca",
                "reference": "474f18bc6cc6aca61ca40bfab55139de614e51ca",
                "shasum": ""
            },
            "require": {
                "ext-json": "*",
                "php": ">=5.4.0"
            },
            "replace": {
                "grogy/php-parallel-lint": "*",
                "jakub-onderka/php-parallel-lint": "*"
            },
            "require-dev": {
                "nette/tester": "^1.3 || ^2.0",
                "php-parallel-lint/php-console-highlighter": "~0.3",
                "squizlabs/php_codesniffer": "~3.0"
            },
            "suggest": {
                "php-parallel-lint/php-console-highlighter": "Highlight syntax in code snippet"
            },
            "bin": [
                "parallel-lint"
            ],
            "type": "library",
            "autoload": {
                "classmap": [
                    "./"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-2-Clause"
            ],
            "authors": [
                {
                    "name": "Jakub Onderka",
                    "email": "ahoj@jakubonderka.cz"
                }
            ],
            "description": "This tool check syntax of PHP files about 20x faster than serial check.",
            "homepage": "https://github.com/php-parallel-lint/PHP-Parallel-Lint",
            "support": {
                "issues": "https://github.com/php-parallel-lint/PHP-Parallel-Lint/issues",
                "source": "https://github.com/php-parallel-lint/PHP-Parallel-Lint/tree/master"
            },
            "time": "2020-04-04T12:18:32+00:00"
        },
        {
            "name": "phpdocumentor/reflection-common",
            "version": "2.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/phpDocumentor/ReflectionCommon.git",
                "reference": "1d01c49d4ed62f25aa84a747ad35d5a16924662b"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpDocumentor/ReflectionCommon/zipball/1d01c49d4ed62f25aa84a747ad35d5a16924662b",
                "reference": "1d01c49d4ed62f25aa84a747ad35d5a16924662b",
                "shasum": ""
            },
            "require": {
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-2.x": "2.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "phpDocumentor\\Reflection\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Jaap van Otterdijk",
                    "email": "opensource@ijaap.nl"
                }
            ],
            "description": "Common reflection classes used by phpdocumentor to reflect the code structure",
            "homepage": "http://www.phpdoc.org",
            "keywords": [
                "FQSEN",
                "phpDocumentor",
                "phpdoc",
                "reflection",
                "static analysis"
            ],
            "support": {
                "issues": "https://github.com/phpDocumentor/ReflectionCommon/issues",
                "source": "https://github.com/phpDocumentor/ReflectionCommon/tree/2.x"
            },
            "time": "2020-06-27T09:03:43+00:00"
        },
        {
            "name": "phpdocumentor/reflection-docblock",
            "version": "5.2.2",
            "source": {
                "type": "git",
                "url": "https://github.com/phpDocumentor/ReflectionDocBlock.git",
                "reference": "069a785b2141f5bcf49f3e353548dc1cce6df556"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpDocumentor/ReflectionDocBlock/zipball/069a785b2141f5bcf49f3e353548dc1cce6df556",
                "reference": "069a785b2141f5bcf49f3e353548dc1cce6df556",
                "shasum": ""
            },
            "require": {
                "ext-filter": "*",
                "php": "^7.2 || ^8.0",
                "phpdocumentor/reflection-common": "^2.2",
                "phpdocumentor/type-resolver": "^1.3",
                "webmozart/assert": "^1.9.1"
            },
            "require-dev": {
                "mockery/mockery": "~1.3.2"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "phpDocumentor\\Reflection\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Mike van Riel",
                    "email": "me@mikevanriel.com"
                },
                {
                    "name": "Jaap van Otterdijk",
                    "email": "account@ijaap.nl"
                }
            ],
            "description": "With this component, a library can provide support for annotations via DocBlocks or otherwise retrieve information that is embedded in a DocBlock.",
            "support": {
                "issues": "https://github.com/phpDocumentor/ReflectionDocBlock/issues",
                "source": "https://github.com/phpDocumentor/ReflectionDocBlock/tree/master"
            },
            "time": "2020-09-03T19:13:55+00:00"
        },
        {
            "name": "phpdocumentor/type-resolver",
            "version": "1.4.0",
            "source": {
                "type": "git",
                "url": "https://github.com/phpDocumentor/TypeResolver.git",
                "reference": "6a467b8989322d92aa1c8bf2bebcc6e5c2ba55c0"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpDocumentor/TypeResolver/zipball/6a467b8989322d92aa1c8bf2bebcc6e5c2ba55c0",
                "reference": "6a467b8989322d92aa1c8bf2bebcc6e5c2ba55c0",
                "shasum": ""
            },
            "require": {
                "php": "^7.2 || ^8.0",
                "phpdocumentor/reflection-common": "^2.0"
            },
            "require-dev": {
                "ext-tokenizer": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-1.x": "1.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "phpDocumentor\\Reflection\\": "src"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Mike van Riel",
                    "email": "me@mikevanriel.com"
                }
            ],
            "description": "A PSR-5 based resolver of Class names, Types and Structural Element Names",
            "support": {
                "issues": "https://github.com/phpDocumentor/TypeResolver/issues",
                "source": "https://github.com/phpDocumentor/TypeResolver/tree/1.4.0"
            },
            "time": "2020-09-17T18:55:26+00:00"
        },
        {
            "name": "phpspec/prophecy",
            "version": "1.12.1",
            "source": {
                "type": "git",
                "url": "https://github.com/phpspec/prophecy.git",
                "reference": "8ce87516be71aae9b956f81906aaf0338e0d8a2d"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpspec/prophecy/zipball/8ce87516be71aae9b956f81906aaf0338e0d8a2d",
                "reference": "8ce87516be71aae9b956f81906aaf0338e0d8a2d",
                "shasum": ""
            },
            "require": {
                "doctrine/instantiator": "^1.2",
                "php": "^7.2 || ~8.0, <8.1",
                "phpdocumentor/reflection-docblock": "^5.2",
                "sebastian/comparator": "^3.0 || ^4.0",
                "sebastian/recursion-context": "^3.0 || ^4.0"
            },
            "require-dev": {
                "phpspec/phpspec": "^6.0",
                "phpunit/phpunit": "^8.0 || ^9.0 <9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.11.x-dev"
                }
            },
            "autoload": {
                "psr-4": {
                    "Prophecy\\": "src/Prophecy"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Konstantin Kudryashov",
                    "email": "ever.zet@gmail.com",
                    "homepage": "http://everzet.com"
                },
                {
                    "name": "Marcello Duarte",
                    "email": "marcello.duarte@gmail.com"
                }
            ],
            "description": "Highly opinionated mocking framework for PHP 5.3+",
            "homepage": "https://github.com/phpspec/prophecy",
            "keywords": [
                "Double",
                "Dummy",
                "fake",
                "mock",
                "spy",
                "stub"
            ],
            "support": {
                "issues": "https://github.com/phpspec/prophecy/issues",
                "source": "https://github.com/phpspec/prophecy/tree/1.12.1"
            },
            "time": "2020-09-29T09:10:42+00:00"
        },
        {
            "name": "phpstan/phpstan",
            "version": "0.12.54",
            "source": {
                "type": "git",
                "url": "https://github.com/phpstan/phpstan.git",
                "reference": "45c7b999a4b7dd9ac5558bdaaf23dcebbef88223"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/phpstan/phpstan/zipball/45c7b999a4b7dd9ac5558bdaaf23dcebbef88223",
                "reference": "45c7b999a4b7dd9ac5558bdaaf23dcebbef88223",
                "shasum": ""
            },
            "require": {
                "php": "^7.1|^8.0"
            },
            "conflict": {
                "phpstan/phpstan-shim": "*"
            },
            "bin": [
                "phpstan",
                "phpstan.phar"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "0.12-dev"
                }
            },
            "autoload": {
                "files": [
                    "bootstrap.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "PHPStan - PHP Static Analysis Tool",
            "support": {
                "issues": "https://github.com/phpstan/phpstan/issues",
                "source": "https://github.com/phpstan/phpstan/tree/0.12.54"
            },
            "funding": [
                {
                    "url": "https://github.com/ondrejmirtes",
                    "type": "github"
                },
                {
                    "url": "https://www.patreon.com/phpstan",
                    "type": "patreon"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/phpstan/phpstan",
                    "type": "tidelift"
                }
            ],
            "time": "2020-11-05T13:36:26+00:00"
        },
        {
            "name": "phpunit/php-code-coverage",
            "version": "9.2.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-code-coverage.git",
                "reference": "6b20e2055f7c29b56cb3870b3de7cc463d7add41"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/6b20e2055f7c29b56cb3870b3de7cc463d7add41",
                "reference": "6b20e2055f7c29b56cb3870b3de7cc463d7add41",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-libxml": "*",
                "ext-xmlwriter": "*",
                "nikic/php-parser": "^4.10.2",
                "php": ">=7.3",
                "phpunit/php-file-iterator": "^3.0.3",
                "phpunit/php-text-template": "^2.0.2",
                "sebastian/code-unit-reverse-lookup": "^2.0.2",
                "sebastian/complexity": "^2.0",
                "sebastian/environment": "^5.1.2",
                "sebastian/lines-of-code": "^1.0",
                "sebastian/version": "^3.0.1",
                "theseer/tokenizer": "^1.2.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-pcov": "*",
                "ext-xdebug": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "9.2-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library that provides collection, processing, and rendering functionality for PHP code coverage information.",
            "homepage": "https://github.com/sebastianbergmann/php-code-coverage",
            "keywords": [
                "coverage",
                "testing",
                "xunit"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-code-coverage/issues",
                "source": "https://github.com/sebastianbergmann/php-code-coverage/tree/9.2.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-30T10:46:41+00:00"
        },
        {
            "name": "phpunit/php-file-iterator",
            "version": "3.0.5",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-file-iterator.git",
                "reference": "aa4be8575f26070b100fccb67faabb28f21f66f8"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-file-iterator/zipball/aa4be8575f26070b100fccb67faabb28f21f66f8",
                "reference": "aa4be8575f26070b100fccb67faabb28f21f66f8",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "FilterIterator implementation that filters files based on a list of suffixes.",
            "homepage": "https://github.com/sebastianbergmann/php-file-iterator/",
            "keywords": [
                "filesystem",
                "iterator"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-file-iterator/issues",
                "source": "https://github.com/sebastianbergmann/php-file-iterator/tree/3.0.5"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:57:25+00:00"
        },
        {
            "name": "phpunit/php-invoker",
            "version": "3.1.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-invoker.git",
                "reference": "5a10147d0aaf65b58940a0b72f71c9ac0423cc67"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-invoker/zipball/5a10147d0aaf65b58940a0b72f71c9ac0423cc67",
                "reference": "5a10147d0aaf65b58940a0b72f71c9ac0423cc67",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "ext-pcntl": "*",
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-pcntl": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.1-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Invoke callables with a timeout",
            "homepage": "https://github.com/sebastianbergmann/php-invoker/",
            "keywords": [
                "process"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-invoker/issues",
                "source": "https://github.com/sebastianbergmann/php-invoker/tree/3.1.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:58:55+00:00"
        },
        {
            "name": "phpunit/php-text-template",
            "version": "2.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-text-template.git",
                "reference": "5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-text-template/zipball/5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28",
                "reference": "5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Simple template engine.",
            "homepage": "https://github.com/sebastianbergmann/php-text-template/",
            "keywords": [
                "template"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-text-template/issues",
                "source": "https://github.com/sebastianbergmann/php-text-template/tree/2.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T05:33:50+00:00"
        },
        {
            "name": "phpunit/php-timer",
            "version": "5.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/php-timer.git",
                "reference": "5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/php-timer/zipball/5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2",
                "reference": "5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Utility class for timing",
            "homepage": "https://github.com/sebastianbergmann/php-timer/",
            "keywords": [
                "timer"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/php-timer/issues",
                "source": "https://github.com/sebastianbergmann/php-timer/tree/5.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:16:10+00:00"
        },
        {
            "name": "phpunit/phpunit",
            "version": "9.4.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/phpunit.git",
                "reference": "9fa359ff5ddaa5eb2be2bedb08a6a5787a5807ab"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/phpunit/zipball/9fa359ff5ddaa5eb2be2bedb08a6a5787a5807ab",
                "reference": "9fa359ff5ddaa5eb2be2bedb08a6a5787a5807ab",
                "shasum": ""
            },
            "require": {
                "doctrine/instantiator": "^1.3.1",
                "ext-dom": "*",
                "ext-json": "*",
                "ext-libxml": "*",
                "ext-mbstring": "*",
                "ext-xml": "*",
                "ext-xmlwriter": "*",
                "myclabs/deep-copy": "^1.10.1",
                "phar-io/manifest": "^2.0.1",
                "phar-io/version": "^3.0.2",
                "php": ">=7.3",
                "phpspec/prophecy": "^1.12.1",
                "phpunit/php-code-coverage": "^9.2",
                "phpunit/php-file-iterator": "^3.0.5",
                "phpunit/php-invoker": "^3.1.1",
                "phpunit/php-text-template": "^2.0.3",
                "phpunit/php-timer": "^5.0.2",
                "sebastian/cli-parser": "^1.0.1",
                "sebastian/code-unit": "^1.0.6",
                "sebastian/comparator": "^4.0.5",
                "sebastian/diff": "^4.0.3",
                "sebastian/environment": "^5.1.3",
                "sebastian/exporter": "^4.0.3",
                "sebastian/global-state": "^5.0.1",
                "sebastian/object-enumerator": "^4.0.3",
                "sebastian/resource-operations": "^3.0.3",
                "sebastian/type": "^2.3",
                "sebastian/version": "^3.0.2"
            },
            "require-dev": {
                "ext-pdo": "*",
                "phpspec/prophecy-phpunit": "^2.0.1"
            },
            "suggest": {
                "ext-soap": "*",
                "ext-xdebug": "*"
            },
            "bin": [
                "phpunit"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "9.4-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ],
                "files": [
                    "src/Framework/Assert/Functions.php"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "The PHP Unit Testing framework.",
            "homepage": "https://phpunit.de/",
            "keywords": [
                "phpunit",
                "testing",
                "xunit"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/phpunit/issues",
                "source": "https://github.com/sebastianbergmann/phpunit/tree/9.4.3"
            },
            "funding": [
                {
                    "url": "https://phpunit.de/donate.html",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-11-10T12:53:30+00:00"
        },
        {
            "name": "sebastian/cli-parser",
            "version": "1.0.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/cli-parser.git",
                "reference": "442e7c7e687e42adc03470c7b668bc4b2402c0b2"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/cli-parser/zipball/442e7c7e687e42adc03470c7b668bc4b2402c0b2",
                "reference": "442e7c7e687e42adc03470c7b668bc4b2402c0b2",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library for parsing CLI options",
            "homepage": "https://github.com/sebastianbergmann/cli-parser",
            "support": {
                "issues": "https://github.com/sebastianbergmann/cli-parser/issues",
                "source": "https://github.com/sebastianbergmann/cli-parser/tree/1.0.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T06:08:49+00:00"
        },
        {
            "name": "sebastian/code-unit",
            "version": "1.0.8",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/code-unit.git",
                "reference": "1fc9f64c0927627ef78ba436c9b17d967e68e120"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/code-unit/zipball/1fc9f64c0927627ef78ba436c9b17d967e68e120",
                "reference": "1fc9f64c0927627ef78ba436c9b17d967e68e120",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Collection of value objects that represent the PHP code units",
            "homepage": "https://github.com/sebastianbergmann/code-unit",
            "support": {
                "issues": "https://github.com/sebastianbergmann/code-unit/issues",
                "source": "https://github.com/sebastianbergmann/code-unit/tree/1.0.8"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:08:54+00:00"
        },
        {
            "name": "sebastian/code-unit-reverse-lookup",
            "version": "2.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/code-unit-reverse-lookup.git",
                "reference": "ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/code-unit-reverse-lookup/zipball/ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5",
                "reference": "ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Looks up which function or method a line of code belongs to",
            "homepage": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/",
            "support": {
                "issues": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/issues",
                "source": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/tree/2.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:30:19+00:00"
        },
        {
            "name": "sebastian/comparator",
            "version": "4.0.6",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/comparator.git",
                "reference": "55f4261989e546dc112258c7a75935a81a7ce382"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/comparator/zipball/55f4261989e546dc112258c7a75935a81a7ce382",
                "reference": "55f4261989e546dc112258c7a75935a81a7ce382",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/diff": "^4.0",
                "sebastian/exporter": "^4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Volker Dusch",
                    "email": "github@wallbash.com"
                },
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@2bepublished.at"
                }
            ],
            "description": "Provides the functionality to compare PHP values for equality",
            "homepage": "https://github.com/sebastianbergmann/comparator",
            "keywords": [
                "comparator",
                "compare",
                "equality"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/comparator/issues",
                "source": "https://github.com/sebastianbergmann/comparator/tree/4.0.6"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T15:49:45+00:00"
        },
        {
            "name": "sebastian/complexity",
            "version": "2.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/complexity.git",
                "reference": "739b35e53379900cc9ac327b2147867b8b6efd88"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/complexity/zipball/739b35e53379900cc9ac327b2147867b8b6efd88",
                "reference": "739b35e53379900cc9ac327b2147867b8b6efd88",
                "shasum": ""
            },
            "require": {
                "nikic/php-parser": "^4.7",
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library for calculating the complexity of PHP code units",
            "homepage": "https://github.com/sebastianbergmann/complexity",
            "support": {
                "issues": "https://github.com/sebastianbergmann/complexity/issues",
                "source": "https://github.com/sebastianbergmann/complexity/tree/2.0.2"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T15:52:27+00:00"
        },
        {
            "name": "sebastian/diff",
            "version": "4.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/diff.git",
                "reference": "3461e3fccc7cfdfc2720be910d3bd73c69be590d"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/diff/zipball/3461e3fccc7cfdfc2720be910d3bd73c69be590d",
                "reference": "3461e3fccc7cfdfc2720be910d3bd73c69be590d",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3",
                "symfony/process": "^4.2 || ^5"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Kore Nordmann",
                    "email": "mail@kore-nordmann.de"
                }
            ],
            "description": "Diff implementation",
            "homepage": "https://github.com/sebastianbergmann/diff",
            "keywords": [
                "diff",
                "udiff",
                "unidiff",
                "unified diff"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/diff/issues",
                "source": "https://github.com/sebastianbergmann/diff/tree/4.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:10:38+00:00"
        },
        {
            "name": "sebastian/environment",
            "version": "5.1.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/environment.git",
                "reference": "388b6ced16caa751030f6a69e588299fa09200ac"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/environment/zipball/388b6ced16caa751030f6a69e588299fa09200ac",
                "reference": "388b6ced16caa751030f6a69e588299fa09200ac",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-posix": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.1-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Provides functionality to handle HHVM/PHP environments",
            "homepage": "http://www.github.com/sebastianbergmann/environment",
            "keywords": [
                "Xdebug",
                "environment",
                "hhvm"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/environment/issues",
                "source": "https://github.com/sebastianbergmann/environment/tree/5.1.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:52:38+00:00"
        },
        {
            "name": "sebastian/exporter",
            "version": "4.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/exporter.git",
                "reference": "d89cc98761b8cb5a1a235a6b703ae50d34080e65"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/exporter/zipball/d89cc98761b8cb5a1a235a6b703ae50d34080e65",
                "reference": "d89cc98761b8cb5a1a235a6b703ae50d34080e65",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/recursion-context": "^4.0"
            },
            "require-dev": {
                "ext-mbstring": "*",
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Volker Dusch",
                    "email": "github@wallbash.com"
                },
                {
                    "name": "Adam Harvey",
                    "email": "aharvey@php.net"
                },
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@gmail.com"
                }
            ],
            "description": "Provides the functionality to export PHP variables for visualization",
            "homepage": "http://www.github.com/sebastianbergmann/exporter",
            "keywords": [
                "export",
                "exporter"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/exporter/issues",
                "source": "https://github.com/sebastianbergmann/exporter/tree/4.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T05:24:23+00:00"
        },
        {
            "name": "sebastian/global-state",
            "version": "5.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/global-state.git",
                "reference": "a90ccbddffa067b51f574dea6eb25d5680839455"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/global-state/zipball/a90ccbddffa067b51f574dea6eb25d5680839455",
                "reference": "a90ccbddffa067b51f574dea6eb25d5680839455",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/object-reflector": "^2.0",
                "sebastian/recursion-context": "^4.0"
            },
            "require-dev": {
                "ext-dom": "*",
                "phpunit/phpunit": "^9.3"
            },
            "suggest": {
                "ext-uopz": "*"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "5.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Snapshotting of global state",
            "homepage": "http://www.github.com/sebastianbergmann/global-state",
            "keywords": [
                "global state"
            ],
            "support": {
                "issues": "https://github.com/sebastianbergmann/global-state/issues",
                "source": "https://github.com/sebastianbergmann/global-state/tree/5.0.2"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T15:55:19+00:00"
        },
        {
            "name": "sebastian/lines-of-code",
            "version": "1.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/lines-of-code.git",
                "reference": "acf76492a65401babcf5283296fa510782783a7a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/lines-of-code/zipball/acf76492a65401babcf5283296fa510782783a7a",
                "reference": "acf76492a65401babcf5283296fa510782783a7a",
                "shasum": ""
            },
            "require": {
                "nikic/php-parser": "^4.6",
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "1.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library for counting the lines of code in PHP source code",
            "homepage": "https://github.com/sebastianbergmann/lines-of-code",
            "support": {
                "issues": "https://github.com/sebastianbergmann/lines-of-code/issues",
                "source": "https://github.com/sebastianbergmann/lines-of-code/tree/1.0.2"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T17:03:56+00:00"
        },
        {
            "name": "sebastian/object-enumerator",
            "version": "4.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/object-enumerator.git",
                "reference": "5c9eeac41b290a3712d88851518825ad78f45c71"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/object-enumerator/zipball/5c9eeac41b290a3712d88851518825ad78f45c71",
                "reference": "5c9eeac41b290a3712d88851518825ad78f45c71",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3",
                "sebastian/object-reflector": "^2.0",
                "sebastian/recursion-context": "^4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Traverses array structures and object graphs to enumerate all referenced objects",
            "homepage": "https://github.com/sebastianbergmann/object-enumerator/",
            "support": {
                "issues": "https://github.com/sebastianbergmann/object-enumerator/issues",
                "source": "https://github.com/sebastianbergmann/object-enumerator/tree/4.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:12:34+00:00"
        },
        {
            "name": "sebastian/object-reflector",
            "version": "2.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/object-reflector.git",
                "reference": "b4f479ebdbf63ac605d183ece17d8d7fe49c15c7"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/object-reflector/zipball/b4f479ebdbf63ac605d183ece17d8d7fe49c15c7",
                "reference": "b4f479ebdbf63ac605d183ece17d8d7fe49c15c7",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Allows reflection of object attributes, including inherited and non-public ones",
            "homepage": "https://github.com/sebastianbergmann/object-reflector/",
            "support": {
                "issues": "https://github.com/sebastianbergmann/object-reflector/issues",
                "source": "https://github.com/sebastianbergmann/object-reflector/tree/2.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:14:26+00:00"
        },
        {
            "name": "sebastian/recursion-context",
            "version": "4.0.4",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/recursion-context.git",
                "reference": "cd9d8cf3c5804de4341c283ed787f099f5506172"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/recursion-context/zipball/cd9d8cf3c5804de4341c283ed787f099f5506172",
                "reference": "cd9d8cf3c5804de4341c283ed787f099f5506172",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "4.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                },
                {
                    "name": "Jeff Welch",
                    "email": "whatthejeff@gmail.com"
                },
                {
                    "name": "Adam Harvey",
                    "email": "aharvey@php.net"
                }
            ],
            "description": "Provides functionality to recursively process PHP variables",
            "homepage": "http://www.github.com/sebastianbergmann/recursion-context",
            "support": {
                "issues": "https://github.com/sebastianbergmann/recursion-context/issues",
                "source": "https://github.com/sebastianbergmann/recursion-context/tree/4.0.4"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:17:30+00:00"
        },
        {
            "name": "sebastian/resource-operations",
            "version": "3.0.3",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/resource-operations.git",
                "reference": "0f4443cb3a1d92ce809899753bc0d5d5a8dd19a8"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/resource-operations/zipball/0f4443cb3a1d92ce809899753bc0d5d5a8dd19a8",
                "reference": "0f4443cb3a1d92ce809899753bc0d5d5a8dd19a8",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.0"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de"
                }
            ],
            "description": "Provides a list of PHP built-in functions that operate on resources",
            "homepage": "https://www.github.com/sebastianbergmann/resource-operations",
            "support": {
                "issues": "https://github.com/sebastianbergmann/resource-operations/issues",
                "source": "https://github.com/sebastianbergmann/resource-operations/tree/3.0.3"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T06:45:17+00:00"
        },
        {
            "name": "sebastian/type",
            "version": "2.3.1",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/type.git",
                "reference": "81cd61ab7bbf2de744aba0ea61fae32f721df3d2"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/type/zipball/81cd61ab7bbf2de744aba0ea61fae32f721df3d2",
                "reference": "81cd61ab7bbf2de744aba0ea61fae32f721df3d2",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "require-dev": {
                "phpunit/phpunit": "^9.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "2.3-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Collection of value objects that represent the types of the PHP type system",
            "homepage": "https://github.com/sebastianbergmann/type",
            "support": {
                "issues": "https://github.com/sebastianbergmann/type/issues",
                "source": "https://github.com/sebastianbergmann/type/tree/2.3.1"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-10-26T13:18:59+00:00"
        },
        {
            "name": "sebastian/version",
            "version": "3.0.2",
            "source": {
                "type": "git",
                "url": "https://github.com/sebastianbergmann/version.git",
                "reference": "c6c1022351a901512170118436c764e473f6de8c"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/sebastianbergmann/version/zipball/c6c1022351a901512170118436c764e473f6de8c",
                "reference": "c6c1022351a901512170118436c764e473f6de8c",
                "shasum": ""
            },
            "require": {
                "php": ">=7.3"
            },
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.0-dev"
                }
            },
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Sebastian Bergmann",
                    "email": "sebastian@phpunit.de",
                    "role": "lead"
                }
            ],
            "description": "Library that helps with managing the version number of Git-hosted PHP projects",
            "homepage": "https://github.com/sebastianbergmann/version",
            "support": {
                "issues": "https://github.com/sebastianbergmann/version/issues",
                "source": "https://github.com/sebastianbergmann/version/tree/3.0.2"
            },
            "funding": [
                {
                    "url": "https://github.com/sebastianbergmann",
                    "type": "github"
                }
            ],
            "time": "2020-09-28T06:39:44+00:00"
        },
        {
            "name": "slevomat/coding-standard",
            "version": "4.8.7",
            "source": {
                "type": "git",
                "url": "https://github.com/slevomat/coding-standard.git",
                "reference": "bff96313d8c7c2ba57a4edb13c1c141df8988c58"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/slevomat/coding-standard/zipball/bff96313d8c7c2ba57a4edb13c1c141df8988c58",
                "reference": "bff96313d8c7c2ba57a4edb13c1c141df8988c58",
                "shasum": ""
            },
            "require": {
                "php": "^7.1",
                "squizlabs/php_codesniffer": "^3.4.0"
            },
            "require-dev": {
                "jakub-onderka/php-parallel-lint": "1.0.0",
                "phing/phing": "2.16.1",
                "phpstan/phpstan": "0.9.2",
                "phpstan/phpstan-phpunit": "0.9.4",
                "phpstan/phpstan-strict-rules": "0.9",
                "phpunit/phpunit": "7.5.1"
            },
            "type": "phpcodesniffer-standard",
            "autoload": {
                "psr-4": {
                    "SlevomatCodingStandard\\": "SlevomatCodingStandard"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "description": "Slevomat Coding Standard for PHP_CodeSniffer complements Consistence Coding Standard by providing sniffs with additional checks.",
            "support": {
                "issues": "https://github.com/slevomat/coding-standard/issues",
                "source": "https://github.com/slevomat/coding-standard/tree/4.8.7"
            },
            "time": "2019-01-03T13:15:50+00:00"
        },
        {
            "name": "squizlabs/php_codesniffer",
            "version": "3.5.8",
            "source": {
                "type": "git",
                "url": "https://github.com/squizlabs/PHP_CodeSniffer.git",
                "reference": "9d583721a7157ee997f235f327de038e7ea6dac4"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/squizlabs/PHP_CodeSniffer/zipball/9d583721a7157ee997f235f327de038e7ea6dac4",
                "reference": "9d583721a7157ee997f235f327de038e7ea6dac4",
                "shasum": ""
            },
            "require": {
                "ext-simplexml": "*",
                "ext-tokenizer": "*",
                "ext-xmlwriter": "*",
                "php": ">=5.4.0"
            },
            "require-dev": {
                "phpunit/phpunit": "^4.0 || ^5.0 || ^6.0 || ^7.0"
            },
            "bin": [
                "bin/phpcs",
                "bin/phpcbf"
            ],
            "type": "library",
            "extra": {
                "branch-alias": {
                    "dev-master": "3.x-dev"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Greg Sherwood",
                    "role": "lead"
                }
            ],
            "description": "PHP_CodeSniffer tokenizes PHP, JavaScript and CSS files and detects violations of a defined set of coding standards.",
            "homepage": "https://github.com/squizlabs/PHP_CodeSniffer",
            "keywords": [
                "phpcs",
                "standards"
            ],
            "support": {
                "issues": "https://github.com/squizlabs/PHP_CodeSniffer/issues",
                "source": "https://github.com/squizlabs/PHP_CodeSniffer",
                "wiki": "https://github.com/squizlabs/PHP_CodeSniffer/wiki"
            },
            "time": "2020-10-23T02:01:07+00:00"
        },
        {
            "name": "symfony/process",
            "version": "v5.1.8",
            "source": {
                "type": "git",
                "url": "https://github.com/symfony/process.git",
                "reference": "f00872c3f6804150d6a0f73b4151daab96248101"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/symfony/process/zipball/f00872c3f6804150d6a0f73b4151daab96248101",
                "reference": "f00872c3f6804150d6a0f73b4151daab96248101",
                "shasum": ""
            },
            "require": {
                "php": ">=7.2.5",
                "symfony/polyfill-php80": "^1.15"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Symfony\\Component\\Process\\": ""
                },
                "exclude-from-classmap": [
                    "/Tests/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Fabien Potencier",
                    "email": "fabien@symfony.com"
                },
                {
                    "name": "Symfony Community",
                    "homepage": "https://symfony.com/contributors"
                }
            ],
            "description": "Symfony Process Component",
            "homepage": "https://symfony.com",
            "support": {
                "source": "https://github.com/symfony/process/tree/v5.1.8"
            },
            "funding": [
                {
                    "url": "https://symfony.com/sponsor",
                    "type": "custom"
                },
                {
                    "url": "https://github.com/fabpot",
                    "type": "github"
                },
                {
                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
                    "type": "tidelift"
                }
            ],
            "time": "2020-10-24T12:01:57+00:00"
        },
        {
            "name": "theseer/tokenizer",
            "version": "1.2.0",
            "source": {
                "type": "git",
                "url": "https://github.com/theseer/tokenizer.git",
                "reference": "75a63c33a8577608444246075ea0af0d052e452a"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/theseer/tokenizer/zipball/75a63c33a8577608444246075ea0af0d052e452a",
                "reference": "75a63c33a8577608444246075ea0af0d052e452a",
                "shasum": ""
            },
            "require": {
                "ext-dom": "*",
                "ext-tokenizer": "*",
                "ext-xmlwriter": "*",
                "php": "^7.2 || ^8.0"
            },
            "type": "library",
            "autoload": {
                "classmap": [
                    "src/"
                ]
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "BSD-3-Clause"
            ],
            "authors": [
                {
                    "name": "Arne Blankerts",
                    "email": "arne@blankerts.de",
                    "role": "Developer"
                }
            ],
            "description": "A small library for converting tokenized PHP source code into XML and potentially other formats",
            "support": {
                "issues": "https://github.com/theseer/tokenizer/issues",
                "source": "https://github.com/theseer/tokenizer/tree/master"
            },
            "funding": [
                {
                    "url": "https://github.com/theseer",
                    "type": "github"
                }
            ],
            "time": "2020-07-12T23:59:07+00:00"
        },
        {
            "name": "webmozart/assert",
            "version": "1.9.1",
            "source": {
                "type": "git",
                "url": "https://github.com/webmozart/assert.git",
                "reference": "bafc69caeb4d49c39fd0779086c03a3738cbb389"
            },
            "dist": {
                "type": "zip",
                "url": "https://api.github.com/repos/webmozart/assert/zipball/bafc69caeb4d49c39fd0779086c03a3738cbb389",
                "reference": "bafc69caeb4d49c39fd0779086c03a3738cbb389",
                "shasum": ""
            },
            "require": {
                "php": "^5.3.3 || ^7.0 || ^8.0",
                "symfony/polyfill-ctype": "^1.8"
            },
            "conflict": {
                "phpstan/phpstan": "<0.12.20",
                "vimeo/psalm": "<3.9.1"
            },
            "require-dev": {
                "phpunit/phpunit": "^4.8.36 || ^7.5.13"
            },
            "type": "library",
            "autoload": {
                "psr-4": {
                    "Webmozart\\Assert\\": "src/"
                }
            },
            "notification-url": "https://packagist.org/downloads/",
            "license": [
                "MIT"
            ],
            "authors": [
                {
                    "name": "Bernhard Schussek",
                    "email": "bschussek@gmail.com"
                }
            ],
            "description": "Assertions to validate method input/output with nice error messages.",
            "keywords": [
                "assert",
                "check",
                "validate"
            ],
            "support": {
                "issues": "https://github.com/webmozart/assert/issues",
                "source": "https://github.com/webmozart/assert/tree/master"
            },
            "time": "2020-07-08T17:02:28+00:00"
        }
    ],
    "aliases": [],
    "minimum-stability": "stable",
    "stability-flags": [],
    "prefer-stable": false,
    "prefer-lowest": false,
    "platform": {
        "php": "^7.4",
        "ext-json": "*"
    },
    "platform-dev": [],
    "plugin-api-version": "2.0.0"
}


================================================
File: /phpstan.neon
================================================
parameters:
    checkMissingIterableValueType: false
    checkGenericClassInNonGenericObjectType: false
    ignoreErrors:
        - '#Cannot call method .*\(\) on Symfony\\Component\\Config\\Definition\\Builder\\NodeParentInterface\|null.#'


================================================
File: /utils/oauth-app-registration.sh
================================================
#!/usr/bin/env bash

set -o errexit          # Exit on most errors (see the manual)
set -o errtrace         # Make sure any error trap is inherited
set -o nounset          # Disallow expansion of unset variables
set -o pipefail         # Use last non-zero exit code in a pipeline
#set -o xtrace          # Trace the execution of the script (debug)

# Load env variables from .env file, but not overwrite the existing one
if [ -f ".env" ]; then
  source <(grep -v '^#' .env | sed -E 's|^([^=]+)=(.*)$|: ${\1=\2}; export \1|g')
fi

# Required environment variables
: "${OAUTH_APP_NAME:?Need to set OAUTH_APP_NAME env variable}"

# Constants
SCRIPT=$(realpath "$0")
SCRIPT_DIR=$(dirname "$SCRIPT")
SCRIPT_FILENAME=$(basename "$SCRIPT")
AZ_CLI_IMG="mcr.microsoft.com/azure-cli"

# Permissions
# https://www.shawntabrizi.com/aad/common-microsoft-resources-azure-active-directory/
api_id="797f4846-ba00-4fd7-ba43-dac1f8f63013"
# https://github.com/stephaneey/azure-ad-vsts-extension/blob/master/overview.md
declare -A permissions
permissions["user_impersonation"]="41094075-9dad-400e-a0bd-54e686782033"

# If NOT run in the Docker container AND "az" executable not exists locally ...
if [ ! -f /.dockerenv ] && ! command -v az >/dev/null 2>&1; then
  # ... run script in Docker container
  echo "Running in Docker container ..."
  exec docker run \
    --rm -it \
    --volume "$SCRIPT_DIR:/utils" \
    -e OAUTH_APP_NAME \
    "$AZ_CLI_IMG" \
    "/utils/$SCRIPT_FILENAME"
fi

# Check if logged in, if not then login
subscriptionId=$(az account show --query "tenantId" --output tsv || true)
if [ -z "$subscriptionId" ]; then
  subscriptionId=$(az login --use-device-code --query "[].tenantId | [0]" --output tsv)
  echo "You have been successfully logged in!"
else
  echo "You are already logged in!"
fi

# Get app id if exists
echo "Testing if the application \"$OAUTH_APP_NAME\" exists ..."
OAUTH_APP_ID=$(az ad app list --output tsv --filter "displayName eq '$OAUTH_APP_NAME'" --query "[].appId | [0]")

# Create app if not exists
if [ -z "$OAUTH_APP_ID" ]; then
  echo "Application does not exist."
  echo "Creating application \"$OAUTH_APP_NAME\""
  OAUTH_APP_SECRET=`openssl rand -base64 32`
  OAUTH_APP_ID=$(
    az ad app create \
      --output tsv \
      --display-name "$OAUTH_APP_NAME" \
      --oauth2-allow-implicit-flow true \
      --available-to-other-tenants true \
      --end-date '2050-12-31' \
      --password "$OAUTH_APP_SECRET" \
      --query "appId"
  )
  echo "Application created, OAUTH_APP_ID=\"$OAUTH_APP_ID\""
  echo "SAVE SECRET KEY!!! -> OAUTH_APP_SECRET=\"$OAUTH_APP_SECRET\""
else
  echo "Application already exists, OAUTH_APP_ID=\"$OAUTH_APP_ID\""
fi

# Load active permissions
echo "Checking permission"
activePerms=$(az ad app list --output tsv --filter "displayName eq '$OAUTH_APP_NAME'"  --query "[].requiredResourceAccess[].resourceAccess[].id")

# Set permissions
perms_arg=()
for perm_name in "${!permissions[@]}"; do
  perm_id=${permissions[${perm_name}]}
  if [[ $activePerms != *"$perm_id"* ]]; then
    echo "Missing permission \"$perm_name\""
    perms_arg+=("$perm_id=Scope")
  fi
done

echo "Active permissions: $activePerms"

if [ ${#perms_arg[@]} -ne 0 ]; then
  echo "Setting permission"
  if ! az ad app permission add --id "$OAUTH_APP_ID" --api "$api_id" --api-permissions "${perms_arg[@]}" 2>/dev/null; then
    echo "WARNING: Error setting permissions."
    echo "WARNING: Please edit it manually in Azure Portal -> App registrations -> $OAUTH_APP_NAME -> Permissions"
  fi
fi

# Set public client = false
echo "Checking \"publicClient\" property"
publicClient=$(az ad app list --output tsv --filter "displayName eq '$OAUTH_APP_NAME'"  --query "[].publicClient | [0]")
if [ "$publicClient" != "false" ]; then
  echo "Setting publicClient=false"
  az ad app update --id "$OAUTH_APP_ID"  --set "publicClient=false" || true
fi

# Allow login with all types of account
echo "Checking \"signInAudience\" property"
signInAudience=$(az ad app list --output tsv --filter "displayName eq '$OAUTH_APP_NAME'"  --query "[].signInAudience | [0]")
if [ "$signInAudience" != "AzureADMultipleOrgs" ]; then
  echo "WARNING: Property \"signInAudience\" = \"$signInAudience\", but it should by set to \"AzureADMultipleOrgs\"."
  echo "WARNING: User won't be able to sign in with all types of accounts."
  echo "WARNING: Please edit it manually in Azure Portal -> App registrations -> $OAUTH_APP_NAME -> Manifest"
fi

# Print ENV variables
echo -e "\nDone\n"
echo -e "\n-----------------------------------------------------"
echo -e "Please, add these envrioment variables to \".env\" file:\n"
echo "OAUTH_APP_NAME=\"$OAUTH_APP_NAME\""
echo "OAUTH_APP_ID=$OAUTH_APP_ID"
echo "OAUTH_APP_SECRET=${OAUTH_APP_SECRET:-...}"


================================================
File: /utils/oauth-app-detail.sh
================================================
#!/usr/bin/env bash

set -o errexit          # Exit on most errors (see the manual)
set -o errtrace         # Make sure any error trap is inherited
set -o nounset          # Disallow expansion of unset variables
set -o pipefail         # Use last non-zero exit code in a pipeline
#set -o xtrace          # Trace the execution of the script (debug)

# Load env variables from .env file, but not overwrite the existing one
if [ -f ".env" ]; then
  source <(grep -v '^#' .env | sed -E 's|^([^=]+)=(.*)$|: ${\1=\2}; export \1|g')
fi

# Required environment variables
: "${OAUTH_APP_NAME:?Need to set OAUTH_APP_NAME env variable}"

# Constants
SCRIPT=$(realpath "$0")
SCRIPT_DIR=$(dirname "$SCRIPT")
SCRIPT_FILENAME=$(basename "$SCRIPT")
AZ_CLI_IMG="mcr.microsoft.com/azure-cli"

# If NOT run in the Docker container AND "az" executable not exists locally ...
if [ ! -f /.dockerenv ] && ! command -v az >/dev/null 2>&1; then
  # ... run script in Docker container
  echo "Running in Docker container ..."
  exec docker run \
    --rm -it \
    --volume "$SCRIPT_DIR:/utils" \
    -e OAUTH_APP_NAME \
    "$AZ_CLI_IMG" \
    "/utils/$SCRIPT_FILENAME"
fi

# Check if logged in, if not then login
if az account show >/dev/null 2>&1; then
  echo "You are already logged in!"  >&2
else
  az login --use-device-code >&2
  echo "You have been successfully logged in!"  >&2
fi

# List app info
echo "Getting info about app \"$OAUTH_APP_NAME\""
az ad app list \
    --output json \
    --filter "displayName eq '$OAUTH_APP_NAME'" "$@"
echo -e "\nDone\n"


================================================
File: /utils/oauth-login.sh
================================================
#!/usr/bin/env bash

set -o errexit          # Exit on most errors (see the manual)
set -o errtrace         # Make sure any error trap is inherited
set -o nounset          # Disallow expansion of unset variables
set -o pipefail         # Use last non-zero exit code in a pipeline
#set -o xtrace          # Trace the execution of the script (debug)

# Load env variables from .env file, but not overwrite the existing one
if [ -f ".env" ]; then
  source <(grep -v '^#' .env | sed -E 's|^([^=]+)=(.*)$|: ${\1=\2}; export \1|g')
fi

# Required environment variables
: "${OAUTH_APP_ID:?Need to set OAUTH_APP_ID env variable}"
: "${OAUTH_APP_SECRET:?Need to set OAUTH_APP_SECRET env variable}"

# Constants
SCRIPT=$(realpath "$0")
SCRIPT_DIR=$(dirname "$SCRIPT")
SCRIPT_FILENAME=$(basename "$SCRIPT")
BASH_UTILS_IMG="bretfisher/netshoot"
HTTP_SERVER_PORT="10000"
HTTP_SERVER_URI="http://localhost:$HTTP_SERVER_PORT"

# OAuth constants
OAUTH_AUTHORITY_URL='https://login.microsoftonline.com/common'
OAUTH_AUTHORIZE_ENDPOINT="$OAUTH_AUTHORITY_URL/oauth2/v2.0/authorize"
OAUTH_TOKEN_ENDPOINT="$OAUTH_AUTHORITY_URL/oauth2/v2.0/token"
OAUTH_SCOPE="offline_access https://management.core.windows.net/user_impersonation";

printInfo() {
  echo
  echo -e "Please open \"$HTTP_SERVER_URI\" in your browser and click \"signing in\".\n";
  echo -e "You will be redirected to the login page.\n"
  echo -e "After you receive the OAuth tokens, you can close this script.\n"
}

main() {
  case $1 in
    "handle") handle;;
    "runServer") runServer;;
    *) echo "Unexpected command '$1'." 2>&1; exit 1;;
  esac
}

runServer() {
  # If NOT run in the Docker container AND "az" executable not exists locally ...
  # This part can be removed if all tools are locally installed
  if [ ! -f /.dockerenv ]; then
    echo "Running in Docker container ..."
    exec docker run \
      --rm -it \
      --volume "$SCRIPT_DIR:/utils" \
      -p "$HTTP_SERVER_PORT:$HTTP_SERVER_PORT" \
      -e OAUTH_APP_ID \
      -e OAUTH_APP_SECRET \
      "$BASH_UTILS_IMG" \
      "/utils/$SCRIPT_FILENAME"
  fi

  # Run http server
  printInfo
  exec socat "tcp-l:$HTTP_SERVER_PORT",reuseaddr,fork,crlf exec:"$0 handle"
}

debug() {
  echo -e "DEBUG: $1\n" 1>&2
}

handle() {
  # Read HTTP request from stdin: method path version
  read _ path _
  debug "Received http request '$path'"
  route "$path"
}

route() {
  path="$1"
  if [ "$path" == "/" ]; then render_start_page
  elif [ "$path" == "/sign-in" ]; then render_sign_in
  elif [[ "$path" =~ ^/sign-in/callback\?code=(.+)$ ]]; then render_sign_in_callback "${BASH_REMATCH[1]}"
  elif [[ "$path" =~ ^/sign-in/callback\?error=(.+)\&error_description=(.+)$ ]]; then render_error_page "$(urldecode "${BASH_REMATCH[1]}: ${BASH_REMATCH[2]}")"
  else render_404_page
  fi
}

urlencode() {
  local string="${1}"
  local strlen=${#string}
  local encoded=""
  local pos c o

  for (( pos=0 ; pos<strlen ; pos++ )); do
     c=${string:$pos:1}
     case "$c" in
        [-_.~a-zA-Z0-9] ) o="${c}" ;;
        * )               printf -v o '%%%02x' "'$c"
     esac
     encoded+="${o}"
  done
  echo "${encoded}"
}

urldecode() {
  : "${*//+/ }"; echo -e "${_//%/\\x}";
}

function get_authorize_url() {
  echo -n "$OAUTH_AUTHORIZE_ENDPOINT"
  echo -n "?client_id=$(urlencode "$OAUTH_APP_ID")"
  echo -n "&prompt=login"
  echo -n "&redirect_uri=$(urlencode "$HTTP_SERVER_URI/sign-in/callback")"
  echo -n "&scope=$(urlencode "$OAUTH_SCOPE")"
  echo -n "&response_type=code"
  echo -n "&response_mode=query"
}

function get_token_post_args() {
  authorization_code="$1"
  echo -n "client_id=$(urlencode "$OAUTH_APP_ID")"
  echo -n "&client_secret=$(urlencode "$OAUTH_APP_SECRET")"
  echo -n "&redirect_uri=$(urlencode "$HTTP_SERVER_URI/sign-in/callback")"
  echo -n "&code=$authorization_code"
  echo -n "&grant_type=authorization_code"
}

function render_404_page {
  echo 'HTTP/1.1 404 Not Found'
  echo 'Content-Type: text/html'
  echo ''
  echo '<html>'
  echo '<body>'
  echo '<h1>404 Not Found</h1>'
  echo "<p>Resource \"$path\" could not be found.</p>"
  echo '</body>'
}

function render_error_page {
  errorMsg="$1"
  echo 'HTTP/1.1 400 Bad Request'
  echo 'Content-Type: text/html'
  echo
  echo '<html>'
  echo '<body>'
  echo '<h1>An error occurred</h1>'
  echo '<p style="max-width: 600px;">'
  echo "$errorMsg"
  echo '</p>'
  echo '<p>'
  echo '<a href="/sign-in">Try signing in again</a>.'
  echo '</p>'
  echo '</body></html>'
}

function render_token_page {
  access_token="$1"
  refresh_token="$2"
  echo 'HTTP/1.1 400 Bad Request'
  echo 'Content-Type: text/html'
  echo
  echo '<html>'
  echo '<body>'
  echo '<h1>Hurray!</h1>'
  echo '<p><b>Please, add this envrioment variables to ".env" file:</b></p>'
  echo "<p style=\"max-width: 800px; word-wrap: break-word; word-break: break-all;\">"
  echo "<b>OAUTH_ACCESS_TOKEN</b>=<small>$access_token</small>"
  echo "</p>"
  echo "<p style=\"max-width: 800px; word-wrap: break-word; word-break: break-all;\">"
  echo "<b>OAUTH_REFRESH_TOKEN</b>=<small>$refresh_token</small>"
  echo "</p>"
  echo '<p>'
  echo '<a href="/sign-in">Sign in again.</a>.'
  echo '</p>'
  echo '</body></html>'
}

function render_start_page {
  echo 'HTTP/1.1 200 OK'
  echo 'Content-Type: text/html'
  echo
  echo '<html>'
  echo '<body>'
  echo '<h1>Hi from bash!</h1>'
  echo '<p>'
  echo 'This is a server running on socat and bash.'
  echo 'It can perform an OAuth 2 authorization code grant flow.'
  echo '</p>'
  echo '<p>'
  echo 'Try it now by'
  echo '<a href="/sign-in">signing in</a>.'
  echo '</p>'
  echo '</body></html>'
}

function render_sign_in {
  # Redirect to sign in page
  authorize_url=$(get_authorize_url)
  debug "Redirecting to: $authorize_url"
  echo 'HTTP/1.1 302 Found'
  echo "Location: $authorize_url"
}

function render_sign_in_callback {
  # Get token
  authorization_code="$1"
  post="$(get_token_post_args "$authorization_code")"
  response=$(curl -s -X POST -d "$post" "$OAUTH_TOKEN_ENDPOINT")

  # Handle error
  error=$(echo "$response" | jq -r ".error_description")
  if [ "$error" != "null" ]; then
    render_error_page "$error"
    debug "\nAn error occurred: \n$error\n\n"
    return
  fi

  # Print tokens
  access_token=$(echo "$response" | jq -r ".access_token")
  refresh_token=$(echo "$response" | jq -r ".refresh_token")
  render_token_page "$access_token" "$refresh_token"
  debug "The obtained tokens are displayed in a web browser."
}

# Command is first argument or default "runServer"
main "${1-runServer}"


================================================
File: /tests/phpunit/ClientTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureCostExtractor\Tests;

use Keboola\Component\JsonHelper;
use PHPUnit\Framework\Assert;

class ClientTest extends BaseTest
{
    public function testClient(): void
    {
        # https://docs.microsoft.com/en-us/rest/api/cost-management/dimensions/list
        $client = $this->createClient();
        $response = $client->get('dimensions?api-version=2019-11-01');

        Assert::assertSame(200, $response->getStatusCode());
        Assert::assertGreaterThan(1, $response->getBody()->getSize());

        // List dimensions
        echo "\n\nAvailable Dimensions:\n";
        foreach (JsonHelper::decode($response->getBody()->getContents())['value'] as $row) {
            echo $row['properties']['category'] . "\n";
        }
        echo "\n\n\n";
    }
}


================================================
File: /tests/phpunit/ConfigTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureCostExtractor\Tests;

use Generator;
use Keboola\AzureCostExtractor\Config;
use Keboola\AzureCostExtractor\ConfigDefinition;
use Symfony\Component\Config\Definition\Exception\InvalidConfigurationException;

class ConfigTest extends BaseTest
{
    /**
     * @dataProvider getValidConfigs
     */
    public function testValidConfig(array $config): void
    {
        new Config($config, new ConfigDefinition());
        $this->expectNotToPerformAssertions();
    }

    /**
     * @dataProvider getInvalidConfigs
     */
    public function testInvalidConfig(array $config, string $expectedMessage): void
    {
        $this->expectException(InvalidConfigurationException::class);
        $this->expectExceptionMessage($expectedMessage);
        new Config($config, new ConfigDefinition());
    }

    public function getValidConfigs(): Generator
    {
        yield 'full' => [
            [
                'parameters' => [
                    'subscriptionId' => '1234',
                    'maxTries' => 4,
                    'export' => [
                        'destination' => 'destination-table',
                        'type' => 'ActualCost',
                        'granularity' => 'Daily',
                        'incremental' => false,
                        'timeDimension' => [
                            'timeFrame' => ConfigDefinition::TIME_FRAME_CUSTOM,
                            'start' => '2020-01-01',
                            'end' => '2020-01-31',
                        ],
                        'groupingDimensions' => ConfigDefinition::GROUPING_DIMENSION_VALUES,
                    ],
                ],
            ],
        ];

        yield 'minimal' => [
            $this->getValidMinimalConfig(),
        ];
    }

    public function getInvalidConfigs(): Generator
    {
        yield 'empty' => [
            [],
            'The child node "parameters" at path "root" must be configured.',
        ];

        yield 'empty-parameters' => [
            ['parameters' => []],
            'The child node "subscriptionId" at path "root.parameters" must be configured.',
        ];

        $config = $this->getValidMinimalConfig();
        $config['parameters']['export']['type'] = 'ABCDEF';
        yield 'invalid-type' => [
            $config,
            'The value "ABCDEF" is not allowed for path "root.parameters.export.type". ' .
            'Permissible values: "ActualCost", "AmortizedCost", "Usage"',
        ];

        $config = $this->getValidMinimalConfig();
        $config['parameters']['export']['granularity'] = 'ABCDEF';
        yield 'invalid-granularity' => [
            $config,
            'The value "ABCDEF" is not allowed for path "root.parameters.export.granularity". ' .
            'Permissible values: "None", "Daily", "Monthly"',
        ];

        $config = $this->getValidMinimalConfig();
        $config['parameters']['export']['timeDimension']['timeFrame'] = 'ABCDEF';
        yield 'invalid-time-frame' => [
            $config,
            'The value "ABCDEF" is not allowed for path "root.parameters.export.timeDimension.timeFrame". ' .
            'Permissible values: "WeekToDate", "MonthToDate", "BillingMonthToDate", ' .
            '"TheLastMonth", "TheLastBillingMonth", "Custom"',
        ];

        $config = $this->getValidMinimalConfig();
        $config['parameters']['export']['timeDimension']['timeFrame'] = 'MonthToDate';
        $config['parameters']['export']['timeDimension']['start'] = '2020-01-01';
        $config['parameters']['export']['timeDimension']['end'] = '2020-02-31';
        yield 'invalid-time-frame-and-start-end' => [
            $config,
            'Configuration parameters "parameters.export.timeDimension.start/end" ' .
            'are not compatible with timeFrame="MonthToDate", please use timeFrame="Custom".',
        ];

        $config = $this->getValidMinimalConfig();
        $config['parameters']['export']['timeDimension']['timeFrame'] = ConfigDefinition::TIME_FRAME_CUSTOM;
        yield 'invalid-time-frame-custom-without-start-end' => [
            $config,
            'Missing configuration parameters "parameters.export.timeDimension.start/end" for timeFrame="Custom".',
        ];
    }

    private function getValidMinimalConfig(): array
    {
        return [
            'parameters' => [
                'subscriptionId' => '1234',
                'export' => [
                    'destination' => 'destination-table',
                    'groupingDimensions' => ['ServiceName'],
                ],
            ],
        ];
    }
}


================================================
File: /tests/phpunit/BaseTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureCostExtractor\Tests;

use ArrayObject;
use GuzzleHttp\Client;
use Keboola\AzureCostExtractor\Api\ClientFactory;
use Keboola\AzureCostExtractor\Auth\RefreshTokenProvider;
use Keboola\AzureCostExtractor\Auth\ServicePrincipalTokenProvider;
use Keboola\AzureCostExtractor\Auth\TokenDataManager;
use Keboola\AzureCostExtractor\Auth\TokenProvider;
use PHPUnit\Framework\TestCase;

abstract class BaseTest extends TestCase
{
    protected ArrayObject $state;

    protected function setUp(): void
    {
        parent::setUp();
        $this->state = new ArrayObject();
    }

    protected function createClient(): Client
    {
        $subscriptionId = (string) getenv('TEST_SUBSCRIPTION_ID');
        $factory = new ClientFactory($this->createRefreshTokenProvider(), $subscriptionId);
        return $factory->create();
    }

    protected function createRefreshTokenProvider(?array $oauthData = null): TokenProvider
    {
        $appId = (string) getenv('OAUTH_APP_ID');
        $appSecret = (string) getenv('OAUTH_APP_SECRET');
        $accessToken = (string) getenv('OAUTH_ACCESS_TOKEN');
        $refreshToken = (string) getenv('OAUTH_REFRESH_TOKEN');
        $oauthData = $oauthData ?? [
            'access_token' => $accessToken,
            'refresh_token' => $refreshToken,
        ];
        $dataManager = new TokenDataManager($oauthData, $this->state);
        return new RefreshTokenProvider($appId, $appSecret, $dataManager);
    }

    protected function createServicePrincipalTokenProvider(): TokenProvider
    {
        $tenant = (string) getenv('SERVICE_PRINCIPAL_TENANT');
        $username = (string) getenv('SERVICE_PRINCIPAL_USERNAME');
        $password = (string) getenv('SERVICE_PRINCIPAL_PASSWORD');
        return new ServicePrincipalTokenProvider($tenant, $username, $password);
    }
}


================================================
File: /tests/phpunit/OAuthTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureCostExtractor\Tests;

use ArrayObject;
use Keboola\AzureCostExtractor\Auth\TokenDataManager;
use Keboola\AzureCostExtractor\Exception\AccessTokenRefreshException;
use Keboola\Component\JsonHelper;
use PHPUnit\Framework\Assert;

class OAuthTest extends BaseTest
{
    public function testEmptyState(): void
    {
        // State is empty
        $this->state = new ArrayObject();
        $originAccessToken = (string) getenv('OAUTH_ACCESS_TOKEN');
        $originRefreshToken = (string) getenv('OAUTH_REFRESH_TOKEN');

        // Refresh tokens
        $tokenProvider = $this->createRefreshTokenProvider();
        $newAccessToken = $tokenProvider->get();

        // We have a new access token
        Assert::assertNotEmpty($newAccessToken->getToken());
        Assert::assertNotSame($originAccessToken, $newAccessToken->getToken());
        Assert::assertNotSame($originRefreshToken, $newAccessToken->getRefreshToken());

        // And tokens are stored to state
        $state = $this->state->getArrayCopy();
        $dataRaw = $state[TokenDataManager::STATE_AUTH_DATA_KEY];
        $data = JsonHelper::decode($dataRaw);
        Assert::assertNotEmpty($data['access_token']);
        Assert::assertNotEmpty($data['refresh_token']);
        Assert::assertNotSame($originAccessToken, $data['access_token']);
        Assert::assertNotSame($originRefreshToken, $data['refresh_token']);
    }

    public function testEmptyStateInvalidTokens(): void
    {
        $tokenProvider = $this->createRefreshTokenProvider([
            'access_token' => 'invalid',
            'refresh_token' => 'invalid',
        ]);

        $this->expectException(AccessTokenRefreshException::class);
        $this->expectExceptionMessage(
            'Microsoft OAuth API token refresh failed, please reset authorization in the extractor configuration.'
        );
        $tokenProvider->get();
    }

    public function testState(): void
    {
        // State contains valid tokens, from the previous run
        $originAccessToken = (string) getenv('OAUTH_ACCESS_TOKEN');
        $originRefreshToken = (string) getenv('OAUTH_REFRESH_TOKEN');
        $this->state = new ArrayObject([
            TokenDataManager::STATE_AUTH_DATA_KEY => json_encode([
                'access_token' => $originAccessToken,
                'refresh_token' => $originRefreshToken,
            ]),
        ]);

        // And configuration contains expired old tokens, but they are not used
        $tokenProvider = $this->createRefreshTokenProvider([
            'access_token' => 'old',
            'refresh_token' => 'old',
        ]);
        $newAccessToken = $tokenProvider->get();

        // We have a new access token
        Assert::assertNotEmpty($newAccessToken->getToken());
        Assert::assertNotSame($originAccessToken, $newAccessToken->getToken());
        Assert::assertNotSame($originRefreshToken, $newAccessToken->getRefreshToken());

        // And tokens are stored to state
        $state = $this->state->getArrayCopy();
        $dataRaw = $state[TokenDataManager::STATE_AUTH_DATA_KEY];
        Assert::assertIsString($dataRaw);
        $data = JsonHelper::decode((string) $dataRaw);
        Assert::assertNotEmpty($data['access_token']);
        Assert::assertNotEmpty($data['refresh_token']);
        Assert::assertNotSame($originAccessToken, $data['access_token']);
        Assert::assertNotSame($originRefreshToken, $data['refresh_token']);
    }

    public function testStateInvalidTokens(): void
    {
        $this->state = new ArrayObject([
            TokenDataManager::STATE_AUTH_DATA_KEY => json_encode([
                'access_token' => 'invalid',
                'refresh_token' => 'invalid',
            ]),
        ]);
        $tokenProvider = $this->createRefreshTokenProvider([
            'access_token' => 'invalid',
            'refresh_token' => 'invalid',
        ]);

        $this->expectException(AccessTokenRefreshException::class);
        $this->expectExceptionMessage(
            'Microsoft OAuth API token refresh failed, please reset authorization in the extractor configuration.'
        );
        $tokenProvider->get();
    }

    public function testServicePrincipalCredentials(): void
    {
        $tokenProvider = $this->createServicePrincipalTokenProvider();
        $newAccessToken = $tokenProvider->get();

        // We have a access token
        Assert::assertNotEmpty($newAccessToken->getToken());
    }
}


================================================
File: /tests/phpunit/bootstrap.php
================================================
<?php

declare(strict_types=1);

require __DIR__ . '/../../vendor/autoload.php';


================================================
File: /tests/functional/service-principal-login/expected-stdout
================================================
Using Service Principal authentication.
Export "destination-table" started.
Written "%a" rows to the CSV file.


================================================
File: /tests/functional/service-principal-login/expected/data/out/tables/destination-table.csv.manifest
================================================
{
    "primary_key": [
        "UsageDate",
        "ServiceName"
    ],
    "columns": [
        "UsageDate",
        "ServiceName",
        "Cost",
        "Currency"
    ],
    "incremental": true
}


================================================
File: /tests/functional/service-principal-login/expected/data/out/tables/destination-table.csv
================================================
"dynamic usage data are ignored"


================================================
File: /tests/functional/service-principal-login/source/data/config.json
================================================
{
  "parameters": {
    "subscriptionId": "%env(string:TEST_SUBSCRIPTION_ID)%",
    "servicePrincipal": {
      "tenant": "%env(string:SERVICE_PRINCIPAL_TENANT)%",
      "username": "%env(string:SERVICE_PRINCIPAL_USERNAME)%",
      "#password": "%env(string:SERVICE_PRINCIPAL_PASSWORD)%"
    },
    "export": {
      "destination": "destination-table",
      "groupingDimensions": [
        "ServiceName"
      ]
    }
  }
}


================================================
File: /tests/functional/export-time-frame-billing-month-to-date/expected-stdout
================================================
Using OAuth Refresh Token authentication.
Export "destination-table" started.
Written "%a" rows to the CSV file.


================================================
File: /tests/functional/export-time-frame-billing-month-to-date/expected/data/out/tables/destination-table.csv.manifest
================================================
{
    "primary_key": [
        "UsageDate",
        "ServiceName",
        "ResourceLocation"
    ],
    "columns": [
        "UsageDate",
        "ServiceName",
        "ResourceLocation",
        "Cost",
        "Currency"
    ],
    "incremental": true
}


================================================
File: /tests/functional/export-time-frame-billing-month-to-date/expected/data/out/tables/destination-table.csv
================================================
"dynamic usage data are ignored"


================================================
File: /tests/functional/export-time-frame-billing-month-to-date/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "%env(string:OAUTH_DATA)%",
        "#appSecret": "%env(string:OAUTH_APP_SECRET)%",
        "appKey": "%env(string:OAUTH_APP_ID)%"
      }
    }
  },
  "parameters": {
    "subscriptionId": "%env(string:TEST_SUBSCRIPTION_ID)%",
    "export": {
      "destination": "destination-table",
      "granularity": "Daily",
      "timeDimension": {
        "timeFrame": "BillingMonthToDate"
      },
      "groupingDimensions": [
        "ServiceName",
        "ResourceLocation"
      ]
    }
  }
}


================================================
File: /tests/functional/error-service-principal-login/expected-stdout
================================================
Using Service Principal authentication.


================================================
File: /tests/functional/error-service-principal-login/expected-stderr
================================================
Service Principal OAuth login failed: invalid_client


================================================
File: /tests/functional/error-service-principal-login/source/data/config.json
================================================
{
  "parameters": {
    "subscriptionId": "%env(string:TEST_SUBSCRIPTION_ID)%",
    "servicePrincipal": {
      "tenant": "%env(string:SERVICE_PRINCIPAL_TENANT)%",
      "username": "%env(string:SERVICE_PRINCIPAL_USERNAME)%",
      "#password": "bad"
    },
    "export": {
      "destination": "destination-table",
      "groupingDimensions": [
        "ServiceName"
      ]
    }
  }
}


================================================
File: /tests/functional/error-service-principal-login/expected-code
================================================
1


================================================
File: /tests/functional/export-incremental-false/expected-stdout
================================================
Using OAuth Refresh Token authentication.
Export "destination-table" started.
Written "%a" rows to the CSV file.


================================================
File: /tests/functional/export-incremental-false/expected/data/out/tables/destination-table.csv.manifest
================================================
{
    "primary_key": [
        "UsageDate",
        "ServiceName"
    ],
    "columns": [
        "UsageDate",
        "ServiceName",
        "Cost",
        "Currency"
    ],
    "incremental": false
}


================================================
File: /tests/functional/export-incremental-false/expected/data/out/tables/destination-table.csv
================================================
"dynamic usage data are ignored"


================================================
File: /tests/functional/export-incremental-false/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "%env(string:OAUTH_DATA)%",
        "#appSecret": "%env(string:OAUTH_APP_SECRET)%",
        "appKey": "%env(string:OAUTH_APP_ID)%"
      }
    }
  },
  "parameters": {
    "subscriptionId": "%env(string:TEST_SUBSCRIPTION_ID)%",
    "export": {
      "destination": "destination-table",
      "incremental": false,
      "groupingDimensions": [
        "ServiceName"
      ]
    }
  }
}


================================================
File: /tests/functional/error-empty-config/expected-stderr
================================================
%AThe child node "parameters" at path "root" must be configured.%A


================================================
File: /tests/functional/error-empty-config/source/data/config.json
================================================
{
}


================================================
File: /tests/functional/error-empty-config/expected-code
================================================
1


================================================
File: /tests/functional/error-empty-parameters/expected-stderr
================================================
%AThe child node "subscriptionId" at path "root.parameters" must be configured.%A


================================================
File: /tests/functional/error-empty-parameters/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "%env(string:OAUTH_DATA)%",
        "#appSecret": "%env(string:OAUTH_APP_SECRET)%",
        "appKey": "%env(string:OAUTH_APP_ID)%"
      }
    }
  },
  "parameters": {}
}


================================================
File: /tests/functional/error-empty-parameters/expected-code
================================================
1


================================================
File: /tests/functional/error-date-invalid/expected-stderr
================================================
%AInvalid date "ABC" in "parameters.export.timeDimension.start", please use "YYYY-MM-DD" format.%A


================================================
File: /tests/functional/error-date-invalid/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "%env(string:OAUTH_DATA)%",
        "#appSecret": "%env(string:OAUTH_APP_SECRET)%",
        "appKey": "%env(string:OAUTH_APP_ID)%"
      }
    }
  },
  "parameters": {
    "subscriptionId": "%env(string:TEST_SUBSCRIPTION_ID)%",
    "export": {
      "destination": "destination-table",
      "timeDimension": {
        "timeFrame": "Custom",
        "start": "ABC",
        "end": "DEF"
      },
      "groupingDimensions": [
        "ServiceName",
        "ResourceLocation"
      ]
    }
  }
}


================================================
File: /tests/functional/error-date-invalid/expected-code
================================================
1


================================================
File: /tests/functional/export-granularity-none/expected-stdout
================================================
Using OAuth Refresh Token authentication.
Export "destination-table" started.
Written "%a" rows to the CSV file.


================================================
File: /tests/functional/export-granularity-none/expected/data/out/tables/destination-table.csv.manifest
================================================
{
    "primary_key": [
        "ServiceName",
        "ResourceLocation"
    ],
    "columns": [
        "ServiceName",
        "ResourceLocation",
        "Cost",
        "Currency"
    ],
    "incremental": true
}


================================================
File: /tests/functional/export-granularity-none/expected/data/out/tables/destination-table.csv
================================================
"dynamic usage data are ignored"


================================================
File: /tests/functional/export-granularity-none/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "%env(string:OAUTH_DATA)%",
        "#appSecret": "%env(string:OAUTH_APP_SECRET)%",
        "appKey": "%env(string:OAUTH_APP_ID)%"
      }
    }
  },
  "parameters": {
    "subscriptionId": "%env(string:TEST_SUBSCRIPTION_ID)%",
    "export": {
      "destination": "destination-table",
      "granularity": "None",
      "timeDimension": {
        "timeFrame": "Custom",
        "start": "2020-02-01",
        "end": "2020-03-31"
      },
      "groupingDimensions": [
        "ServiceName",
        "ResourceLocation"
      ]
    }
  }
}


================================================
File: /tests/functional/export-type-usage/expected-stdout
================================================
Using OAuth Refresh Token authentication.
Export "destination-table" started.
Written "%a" rows to the CSV file.


================================================
File: /tests/functional/export-type-usage/expected/data/out/tables/destination-table.csv.manifest
================================================
{
    "primary_key": [
        "ServiceName",
        "Meter"
    ],
    "columns": [
        "ServiceName",
        "Meter",
        "UsageQuantity",
        "Currency"
    ],
    "incremental": true
}


================================================
File: /tests/functional/export-type-usage/expected/data/out/tables/destination-table.csv
================================================
"dynamic usage data are ignored"


================================================
File: /tests/functional/export-type-usage/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "%env(string:OAUTH_DATA)%",
        "#appSecret": "%env(string:OAUTH_APP_SECRET)%",
        "appKey": "%env(string:OAUTH_APP_ID)%"
      }
    }
  },
  "parameters": {
    "subscriptionId": "%env(string:TEST_SUBSCRIPTION_ID)%",
    "export": {
      "destination": "destination-table",
      "type": "Usage",
      "aggregation": "UsageQuantity",
      "granularity": "None",
      "timeDimension": {
        "timeFrame": "TheLastMonth"
      },
      "groupingDimensions": [
        "ServiceName",
        "Meter"
      ]
    }
  }
}


================================================
File: /tests/functional/export-simple/expected-stdout
================================================
Using OAuth Refresh Token authentication.
Export "destination-table" started.
Written "%a" rows to the CSV file.


================================================
File: /tests/functional/export-simple/expected/data/out/tables/destination-table.csv.manifest
================================================
{
    "primary_key": [
        "UsageDate",
        "ServiceName"
    ],
    "columns": [
        "UsageDate",
        "ServiceName",
        "Cost",
        "Currency"
    ],
    "incremental": true
}


================================================
File: /tests/functional/export-simple/expected/data/out/tables/destination-table.csv
================================================
"dynamic usage data are ignored"


================================================
File: /tests/functional/export-simple/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "%env(string:OAUTH_DATA)%",
        "#appSecret": "%env(string:OAUTH_APP_SECRET)%",
        "appKey": "%env(string:OAUTH_APP_ID)%"
      }
    }
  },
  "parameters": {
    "subscriptionId": "%env(string:TEST_SUBSCRIPTION_ID)%",
    "export": {
      "destination": "destination-table",
      "groupingDimensions": [
        "ServiceName"
      ]
    }
  }
}


================================================
File: /tests/functional/export-granularity-daily/expected-stdout
================================================
Using OAuth Refresh Token authentication.
Export "destination-table" started.
Written "%a" rows to the CSV file.


================================================
File: /tests/functional/export-granularity-daily/expected/data/out/tables/destination-table.csv.manifest
================================================
{
    "primary_key": [
        "UsageDate",
        "ServiceName",
        "ResourceLocation"
    ],
    "columns": [
        "UsageDate",
        "ServiceName",
        "ResourceLocation",
        "Cost",
        "Currency"
    ],
    "incremental": true
}


================================================
File: /tests/functional/export-granularity-daily/expected/data/out/tables/destination-table.csv
================================================
"dynamic usage data are ignored"


================================================
File: /tests/functional/export-granularity-daily/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "%env(string:OAUTH_DATA)%",
        "#appSecret": "%env(string:OAUTH_APP_SECRET)%",
        "appKey": "%env(string:OAUTH_APP_ID)%"
      }
    }
  },
  "parameters": {
    "subscriptionId": "%env(string:TEST_SUBSCRIPTION_ID)%",
    "export": {
      "destination": "destination-table",
      "granularity": "Daily",
      "timeDimension": {
        "timeFrame": "Custom",
        "start": "2020-02-01",
        "end": "2020-02-10"
      },
      "groupingDimensions": [
        "ServiceName",
        "ResourceLocation"
      ]
    }
  }
}


================================================
File: /tests/functional/export-time-frame-month-to-date/expected-stdout
================================================
Using OAuth Refresh Token authentication.
Export "destination-table" started.
Written "%a" rows to the CSV file.


================================================
File: /tests/functional/export-time-frame-month-to-date/expected/data/out/tables/destination-table.csv.manifest
================================================
{
    "primary_key": [
        "UsageDate",
        "ServiceName",
        "ResourceLocation"
    ],
    "columns": [
        "UsageDate",
        "ServiceName",
        "ResourceLocation",
        "Cost",
        "Currency"
    ],
    "incremental": true
}


================================================
File: /tests/functional/export-time-frame-month-to-date/expected/data/out/tables/destination-table.csv
================================================
"dynamic usage data are ignored"


================================================
File: /tests/functional/export-time-frame-month-to-date/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "%env(string:OAUTH_DATA)%",
        "#appSecret": "%env(string:OAUTH_APP_SECRET)%",
        "appKey": "%env(string:OAUTH_APP_ID)%"
      }
    }
  },
  "parameters": {
    "subscriptionId": "%env(string:TEST_SUBSCRIPTION_ID)%",
    "export": {
      "destination": "destination-table",
      "granularity": "Daily",
      "timeDimension": {
        "timeFrame": "MonthToDate"
      },
      "groupingDimensions": [
        "ServiceName",
        "ResourceLocation"
      ]
    }
  }
}


================================================
File: /tests/functional/DatadirTest.php
================================================
<?php

declare(strict_types=1);

namespace Keboola\AzureCostExtractor\FunctionalTests;

use Throwable;
use Keboola\Component\JsonHelper;
use Keboola\DatadirTests\DatadirTestCase;
use Keboola\DatadirTests\DatadirTestSpecificationInterface;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Process\Process;

class DatadirTest extends DatadirTestCase
{
    protected function setUp(): void
    {
        parent::setUp();
        putenv('OAUTH_DATA=' . json_encode([
                'access_token' => (string) getenv('OAUTH_ACCESS_TOKEN'),
                'refresh_token' => (string) getenv('OAUTH_REFRESH_TOKEN'),
            ]));
    }

    protected function assertMatchesSpecification(
        DatadirTestSpecificationInterface $specification,
        Process $runProcess,
        string $tempDatadir
    ): void {
        // Remove state.json, we cannot check it, it contains a dynamic new tokens, see OAuthTest
        @unlink($tempDatadir . '/out/state.json');

        // Clear CSV files, they contain random usage/cost data, we check only manifests
        $finder = new Finder();
        foreach ($finder->files()->in($tempDatadir . '/out/tables')->name(['*.csv']) as $csvFile) {
            file_put_contents($csvFile->getPathname(), "\"dynamic usage data are ignored\"\n");
        }

        // Format manifest to be pretty printed (better to check)
        foreach ($finder->files()->in($tempDatadir . '/out/tables')->name(['*.manifest']) as $manifest) {
            try {
                $json = JsonHelper::decode((string) file_get_contents($manifest->getPathname()));
                file_put_contents($manifest->getPathname(), JsonHelper::encode($json, true));
            } catch (Throwable $e) {
                // if an error occurs, the original version will be preserved
            }
        }

        parent::assertMatchesSpecification($specification, $runProcess, $tempDatadir);
    }
}


================================================
File: /tests/functional/export-time-frame-last-month/expected-stdout
================================================
Using OAuth Refresh Token authentication.
Export "destination-table" started.
Written "%a" rows to the CSV file.


================================================
File: /tests/functional/export-time-frame-last-month/expected/data/out/tables/destination-table.csv.manifest
================================================
{
    "primary_key": [
        "UsageDate",
        "ServiceName",
        "ResourceLocation"
    ],
    "columns": [
        "UsageDate",
        "ServiceName",
        "ResourceLocation",
        "Cost",
        "Currency"
    ],
    "incremental": true
}


================================================
File: /tests/functional/export-time-frame-last-month/expected/data/out/tables/destination-table.csv
================================================
"dynamic usage data are ignored"


================================================
File: /tests/functional/export-time-frame-last-month/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "%env(string:OAUTH_DATA)%",
        "#appSecret": "%env(string:OAUTH_APP_SECRET)%",
        "appKey": "%env(string:OAUTH_APP_ID)%"
      }
    }
  },
  "parameters": {
    "subscriptionId": "%env(string:TEST_SUBSCRIPTION_ID)%",
    "export": {
      "destination": "destination-table",
      "granularity": "Daily",
      "timeDimension": {
        "timeFrame": "TheLastMonth"
      },
      "groupingDimensions": [
        "ServiceName",
        "ResourceLocation"
      ]
    }
  }
}


================================================
File: /tests/functional/error-subscription-not-found/expected-stderr
================================================
%AExport "%a" failed: http_code="404", error_code="SubscriptionNotFound", message="The subscription '%a' could not be found.", request_body="%a", uri="%a"


================================================
File: /tests/functional/error-subscription-not-found/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "%env(string:OAUTH_DATA)%",
        "#appSecret": "%env(string:OAUTH_APP_SECRET)%",
        "appKey": "%env(string:OAUTH_APP_ID)%"
      }
    }
  },
  "parameters": {
    "subscriptionId": "96fd974a-1234-1234-1234-0fd17d33e82d",
    "export": {
      "destination": "destination-table",
      "type": "ActualCost",
      "granularity": "Daily",
      "timeDimension": {
        "timeFrame": "WeekToDate"
      },
      "groupingDimensions": [
        "ServiceName"
      ]
    }
  }
}


================================================
File: /tests/functional/error-subscription-not-found/expected-code
================================================
1


================================================
File: /tests/functional/export-granularity-monthly/expected-stdout
================================================
Using OAuth Refresh Token authentication.
Export "destination-table" started.
Written "%a" rows to the CSV file.


================================================
File: /tests/functional/export-granularity-monthly/expected/data/out/tables/destination-table.csv.manifest
================================================
{
    "primary_key": [
        "BillingMonth",
        "ServiceName",
        "ResourceLocation"
    ],
    "columns": [
        "BillingMonth",
        "ServiceName",
        "ResourceLocation",
        "Cost",
        "Currency"
    ],
    "incremental": true
}


================================================
File: /tests/functional/export-granularity-monthly/expected/data/out/tables/destination-table.csv
================================================
"dynamic usage data are ignored"


================================================
File: /tests/functional/export-granularity-monthly/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "%env(string:OAUTH_DATA)%",
        "#appSecret": "%env(string:OAUTH_APP_SECRET)%",
        "appKey": "%env(string:OAUTH_APP_ID)%"
      }
    }
  },
  "parameters": {
    "subscriptionId": "%env(string:TEST_SUBSCRIPTION_ID)%",
    "export": {
      "destination": "destination-table",
      "granularity": "Monthly",
      "timeDimension": {
        "timeFrame": "Custom",
        "start": "2020-02-01",
        "end": "2020-03-01"
      },
      "groupingDimensions": [
        "ServiceName",
        "ResourceLocation"
      ]
    }
  }
}


================================================
File: /tests/functional/error-date-in-the-future/expected-stderr
================================================
Export "destination-table" failed: http_code="400", error_code="BadRequest", message="Invalid query definition: The From date: %a is future date.%A


================================================
File: /tests/functional/error-date-in-the-future/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "%env(string:OAUTH_DATA)%",
        "#appSecret": "%env(string:OAUTH_APP_SECRET)%",
        "appKey": "%env(string:OAUTH_APP_ID)%"
      }
    }
  },
  "parameters": {
    "subscriptionId": "%env(string:TEST_SUBSCRIPTION_ID)%",
    "export": {
      "destination": "destination-table",
      "timeDimension": {
        "timeFrame": "Custom",
        "start": "2050-01-01",
        "end": "2050-01-31"
      },
      "groupingDimensions": [
        "ServiceName",
        "ResourceLocation"
      ]
    }
  }
}


================================================
File: /tests/functional/error-date-in-the-future/expected-code
================================================
1


================================================
File: /tests/functional/export-type-amortized-cost/expected-stdout
================================================
Using OAuth Refresh Token authentication.
Export "destination-table" started.
Written "%a" rows to the CSV file.


================================================
File: /tests/functional/export-type-amortized-cost/expected/data/out/tables/destination-table.csv.manifest
================================================
{
    "primary_key": [
        "UsageDate",
        "ServiceName",
        "ResourceLocation"
    ],
    "columns": [
        "UsageDate",
        "ServiceName",
        "ResourceLocation",
        "CostUSD",
        "Currency"
    ],
    "incremental": true
}


================================================
File: /tests/functional/export-type-amortized-cost/expected/data/out/tables/destination-table.csv
================================================
"dynamic usage data are ignored"


================================================
File: /tests/functional/export-type-amortized-cost/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "%env(string:OAUTH_DATA)%",
        "#appSecret": "%env(string:OAUTH_APP_SECRET)%",
        "appKey": "%env(string:OAUTH_APP_ID)%"
      }
    }
  },
  "parameters": {
    "subscriptionId": "%env(string:TEST_SUBSCRIPTION_ID)%",
    "export": {
      "destination": "destination-table",
      "type": "AmortizedCost",
      "aggregation": "CostUSD",
      "granularity": "Daily",
      "timeDimension": {
        "timeFrame": "TheLastMonth"
      },
      "groupingDimensions": [
        "ServiceName",
        "ResourceLocation"
      ]
    }
  }
}


================================================
File: /tests/functional/export-time-frame-last-billing-month/expected-stdout
================================================
Using OAuth Refresh Token authentication.
Export "destination-table" started.
Written "%a" rows to the CSV file.


================================================
File: /tests/functional/export-time-frame-last-billing-month/expected/data/out/tables/destination-table.csv.manifest
================================================
{
    "primary_key": [
        "UsageDate",
        "ServiceName",
        "ResourceLocation"
    ],
    "columns": [
        "UsageDate",
        "ServiceName",
        "ResourceLocation",
        "Cost",
        "Currency"
    ],
    "incremental": true
}


================================================
File: /tests/functional/export-time-frame-last-billing-month/expected/data/out/tables/destination-table.csv
================================================
"dynamic usage data are ignored"


================================================
File: /tests/functional/export-time-frame-last-billing-month/source/data/config.json
================================================
{
  "authorization": {
    "oauth_api": {
      "credentials": {
        "#data": "%env(string:OAUTH_DATA)%",
        "#appSecret": "%env(string:OAUTH_APP_SECRET)%",
        "appKey": "%env(string:OAUTH_APP_ID)%"
      }
    }
  },
  "parameters": {
    "subscriptionId": "%env(string:TEST_SUBSCRIPTION_ID)%",
    "export": {
      "destination": "destination-table",
      "granularity": "Daily",
      "timeDimension": {
        "timeFrame": "TheLastBillingMonth"
      },
      "groupingDimensions": [
        "ServiceName",
        "ResourceLocation"
      ]
    }
  }
}


================================================
File: /phpunit.xml.dist
================================================
<?xml version="1.0" encoding="UTF-8"?>
<phpunit backupGlobals="false"
         backupStaticAttributes="false"
         colors="true"
         convertErrorsToExceptions="true"
         convertNoticesToExceptions="true"
         convertWarningsToExceptions="true"
         processIsolation="false"
         stopOnFailure="false"
         bootstrap="tests/phpunit/bootstrap.php">
    <testsuite name="Main Test Suite">
        <directory>tests/phpunit</directory>
    </testsuite>
</phpunit>


================================================
File: /composer.json
================================================
{
    "name": "keboola/ex-azure-cost-management",
    "description": "Exports data from the Azure Cost Management APIs. ",
    "license": "MIT",
    "require": {
        "php": "^7.4",
        "ext-json": "*",
        "guzzlehttp/guzzle": "^7.2",
        "keboola/csv": "^2.2",
        "keboola/php-component": "^8.1",
        "keboola/php-datatypes": "^4.9",
        "keboola/php-utils": "^4.1",
        "keboola/retry": "^0.5.0",
        "league/oauth2-client": "^2.6"
    },
    "require-dev": {
        "keboola/coding-standard": ">=7.0.2",
        "keboola/datadir-tests": "^5.2",
        "keboola/php-temp": "^2.0",
        "php-parallel-lint/php-parallel-lint": "^1.2",
        "phpstan/phpstan": "^0.12.14",
        "phpunit/phpunit": "^9.0",
        "symfony/finder": "^5.1",
        "symfony/process": "^5.0"
    },
    "autoload": {
        "psr-4": {
            "Keboola\\AzureCostExtractor\\": "src/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Keboola\\AzureCostExtractor\\Tests\\": "tests/phpunit/",
            "Keboola\\AzureCostExtractor\\FunctionalTests\\": "tests/functional/"
        }
    },
    "scripts": {
        "tests-phpunit": "phpunit",
        "tests-datadir": "phpunit tests/functional",
        "tests": [
            "@tests-phpunit",
            "@tests-datadir"
        ],

        "phpstan": "phpstan analyse ./src ./tests --level=max --no-progress -c phpstan.neon",
        "phpcs": "phpcs -n --ignore=vendor --extensions=php .",
        "phpcbf": "phpcbf -n --ignore=vendor --extensions=php .",
        "phplint": "parallel-lint -j 10 --exclude vendor .",
        "build": [
            "@phplint",
            "@phpcs",
            "@phpstan",
            "@tests"
        ],
        "ci": [
            "@composer validate --no-check-publish --no-check-all",
            "@build"
        ]
    },
    "config": {
        "sort-packages": true,
        "optimize-autoloader": true
    }
}


================================================
File: /.dockerignore
================================================
vendor/


================================================
File: /Dockerfile
================================================
FROM php:7.4-cli

ARG COMPOSER_FLAGS="--prefer-dist --no-interaction"
ARG DEBIAN_FRONTEND=noninteractive
ENV COMPOSER_ALLOW_SUPERUSER 1
ENV COMPOSER_PROCESS_TIMEOUT 3600

WORKDIR /code/

COPY docker/php-prod.ini /usr/local/etc/php/php.ini
COPY docker/composer-install.sh /tmp/composer-install.sh

RUN apt-get update && apt-get install -y --no-install-recommends \
        git \
        locales \
        unzip \
	&& rm -r /var/lib/apt/lists/* \
	&& sed -i 's/^# *\(en_US.UTF-8\)/\1/' /etc/locale.gen \
	&& locale-gen \
	&& chmod +x /tmp/composer-install.sh \
	&& /tmp/composer-install.sh

ENV LANGUAGE=en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8

## Composer - deps always cached unless changed
# First copy only composer files
COPY composer.* /code/

# Download dependencies, but don't run scripts or init autoloaders as the app is missing
RUN composer install $COMPOSER_FLAGS --no-scripts --no-autoloader

# Copy rest of the app
COPY . /code/

# Run normal composer - all deps are cached already
RUN composer install $COMPOSER_FLAGS

CMD ["php", "/code/src/run.php"]


================================================
File: /README.md
================================================
# Azure Cost Management Extractor

[![Build Status](https://travis-ci.com/keboola/ex-azure-cost-management.svg?branch=master)](https://travis-ci.com/keboola/ex-azure-cost-management)

Exports data from the [Azure Cost Management APIs.](https://docs.microsoft.com/en-us/rest/api/cost-management).

# Usage

## Configuration

Extractor can be authenticated using [Keboola OAuth 2.0](https://developers.keboola.com/extend/generic-extractor/configuration/api/authentication/oauth20/)
or by `servicePrincipal` key in the configuration.

The configuration `config.json` contains following properties in `parameters` key: 
- `subscriptionId` - string (required): ID of the [Azure Subscription](https://techcommunity.microsoft.com/t5/azure/understanding-azure-account-subscription-and-directory/m-p/34800).
- `servicePrincipal` - optional (array), filled in only if "classic" OAuth authorization is not used
    - `tenant` - string (required): Tenant of the [Service Principal](https://docs.microsoft.com/en-us/azure/active-directory/develop/app-objects-and-service-principals).
    - `username` - string (required): Username of the [Service Principal](https://docs.microsoft.com/en-us/azure/active-directory/develop/app-objects-and-service-principals).
    - `#password` - string (required): Password of the [Service Principal](https://docs.microsoft.com/en-us/azure/active-directory/develop/app-objects-and-service-principals).
- `maxTries` - integer (optional): Number of the max tries if an error occurred. Default `5`.
- `export` - object (required): Configuration of the export.
    - `destination` - string (required): Name of the target table in the bucket.
    - `groupingDimensions` - enum[] (required):
        - An array that contains one or more `group by` columns.
        - These columns will be part of the output table.
        - Available values: `ServiceName`, `ResourceGroupName`, `ResourceLocation`, `Meter`, [read the whole list](https://github.com/keboola/ex-azure-cost-management/blob/master/src/ConfigDefinition.php#L40) ... 
    - `type` - enum (optional): One from: `ActualCost` - default, `AmortizedCost`, `Usage`.
    - `aggregation` - enum (optional): Aggregation's column, one from: `Cost` - default, `CostUSD`, `PreTaxCostUSD`, `UsageQuantity`, `PreTaxCost`.
    - `granularity` - enum (optional): One from: `None`, `Daily`, `Monthly`.
    - `incremental` - boolean (optional): Enables [Incremental Loading](https://help.keboola.com/storage/tables/#incremental-loading). Default `true`.
    - `timeDimension` - object (optional): Time dimensions of the export.
        - `timeFrame` - enum (optional): One from: `MonthToDate` - default, `WeekToDate`, `BillingMonthToDate`, `TheLastMonth`, `TheLastBillingMonth`, `Custom`.
        - `start` - string (optional): Start date of the `Custom` time frame in `YYYY-MM-DD` format.
        - `end` - string (optional): End date of the `Custom` time frame in `YYYY-MM-DD` format.

## OAuth

### Application 

OAuth app registration:
- If you are Keboola employee, you can use existing app `Keboola Azure Cost Extractor`. Credentials are stored in [1Password](https://1password.com).
- Or you can create a new app by `utils/oauth-app-registration.sh`
- Or you can create a new app manually in the `App registrations` section in the https://portal.azure.com.


Set `Redirect URIs`:
- Open `portal.azure.com` -> `App registrations` -> app-name -> `Authentication`
- In `Web` -> `Redirect URIs` click `Add URI`
- For development, you should add `http://localhost:10000/sign-in/callback`.
- Click `Save`


Please, store credentials in `.env` file.
```.env
OAUTH_APP_NAME="Keboola Azure Cost Extractor"
OAUTH_APP_ID=...
OAUTH_APP_SECRET=...
```

### Scopes

Set the required scopes in the Azure Portal in the settings of the OAuth application.

`API permissions` -> `Azure Service Management` -> `user_impersonation`

### Tokens

- OAuth tokens are result of login to the specific Azure account.
- OAuth login is not part of this repository. It is done by the [OAuth API](https://developers.keboola.com/extend/generic-extractor/configuration/api/authentication/oauth20/).
- Component uses the OAuth tokens to authorize to the [Azure Cost Management API](https://docs.microsoft.com/en-us/rest/api/cost-management).
- The `access_token` and `refresh_token` are part of `config.json` in `authorization.oauth_api.credentials.#data`.
- Component uses `refresh_token` (expires in 90 days) to generate new `access_token` (expires in 1 hour).
- For development / tests you must obtain this token manually:
    1. Setup environment variables `OAUTH_APP_NAME`, `OAUTH_APP_ID`, `OAUTH_APP_SECRET`
        - If are present in `.env` file, the script loads them.
    2. Run script `utils/oauth-login.sh`
    3. Follow the instructions (open the URL and login)
    4. Save tokens to `.env` file

## Development
 
Clone this repository and init the workspace with following command:

```
git clone https://github.com/keboola/ex-azure-cost-management
cd ex-azure-cost-management
docker-compose build
docker-compose run --rm dev composer install --no-scripts
```

Create `.env` file with following variables (from the previous steps)
```env
OAUTH_APP_NAME=
OAUTH_APP_ID=
OAUTH_APP_SECRET=
OAUTH_ACCESS_TOKEN=
OAUTH_REFRESH_TOKEN=
TEST_SUBSCRIPTION_ID=
```

Run the test suite using this command:

```
docker-compose run --rm dev composer tests
```
 
# Integration

For information about deployment and integration with KBC, please refer to the [deployment section of developers documentation](https://developers.keboola.com/extend/component/deployment/) 


