Directory structure:
└── keboola-python-component/
    ├── README.md
    ├── LICENSE
    ├── flake8.cfg
    ├── requirements.txt
    ├── setup.py
    ├── docs/
    │   ├── base.html
    │   ├── build_docs.bat
    │   ├── dao.html
    │   ├── exceptions.html
    │   ├── index.html
    │   ├── interface.html
    │   └── imgs/
    ├── src/
    │   └── keboola/
    │       └── component/
    │           ├── __init__.py
    │           ├── base.py
    │           ├── dao.py
    │           ├── exceptions.py
    │           ├── interface.py
    │           ├── sync_actions.py
    │           └── table_schema.py
    ├── tests/
    │   ├── __init__.py
    │   ├── test_base.py
    │   ├── test_dao.py
    │   ├── test_interface.py
    │   ├── test_schema.py
    │   ├── test_sync_actions.py
    │   ├── data_examples/
    │   │   ├── data1/
    │   │   │   ├── config.json
    │   │   │   ├── in/
    │   │   │   │   ├── state.json
    │   │   │   │   ├── files/
    │   │   │   │   │   ├── 151971405_21702.strip.print.gif.manifest
    │   │   │   │   │   ├── 151971412_30221.strip.print.gif.manifest
    │   │   │   │   │   ├── 151971423_5655.strip.print.gif.manifest
    │   │   │   │   │   ├── 151971432_compiler_complaint.png.manifest
    │   │   │   │   │   ├── 151971450_duty_calls.png.manifest
    │   │   │   │   │   └── 151971455_duty_calls.png.manifest
    │   │   │   │   └── tables/
    │   │   │   │       ├── fooBar
    │   │   │   │       ├── fooBar.manifest
    │   │   │   │       ├── orphaned.csv
    │   │   │   │       ├── orphaned_manifest.csv.manifest
    │   │   │   │       ├── sample.csv
    │   │   │   │       ├── sample.csv.manifest
    │   │   │   │       ├── sample_output.csv
    │   │   │   │       ├── sample_output.csv.manifest
    │   │   │   │       ├── sample_output_header.csv
    │   │   │   │       ├── sample_output_header.csv.manifest
    │   │   │   │       ├── sliced.csv.manifest
    │   │   │   │       └── sliced.csv/
    │   │   │   │           └── .gitkeep
    │   │   │   └── out/
    │   │   │       └── tables/
    │   │   │           └── some-table.csv.manifest
    │   │   ├── data2/
    │   │   │   ├── config.json
    │   │   │   └── in/
    │   │   │       └── files/
    │   │   │           └── .gitignore
    │   │   ├── data3/
    │   │   │   └── config.json
    │   │   ├── data4/
    │   │   │   ├── config.json
    │   │   │   └── in/
    │   │   │       ├── state.json
    │   │   │       └── tables/
    │   │   │           ├── sample.csv
    │   │   │           └── sample.csv.manifest
    │   │   ├── data5/
    │   │   │   ├── config.json
    │   │   │   └── in/
    │   │   │       ├── state.json
    │   │   │       └── tables/
    │   │   │           ├── sample_output.csv
    │   │   │           └── sample_output.csv.manifest
    │   │   ├── data_custom_action/
    │   │   │   ├── config.json
    │   │   │   └── in/
    │   │   │       ├── state.json
    │   │   │       ├── files/
    │   │   │       │   ├── 151971405_21702.strip.print.gif.manifest
    │   │   │       │   ├── 151971412_30221.strip.print.gif.manifest
    │   │   │       │   ├── 151971423_5655.strip.print.gif.manifest
    │   │   │       │   ├── 151971432_compiler_complaint.png.manifest
    │   │   │       │   ├── 151971450_duty_calls.png.manifest
    │   │   │       │   └── 151971455_duty_calls.png.manifest
    │   │   │       └── tables/
    │   │   │           ├── fooBar
    │   │   │           ├── fooBar.manifest
    │   │   │           ├── orphaned.csv
    │   │   │           ├── orphaned_manifest.csv.manifest
    │   │   │           ├── sample.csv
    │   │   │           ├── sample.csv.manifest
    │   │   │           ├── sliced.csv.manifest
    │   │   │           └── sliced.csv/
    │   │   │               └── .gitkeep
    │   │   ├── data_full_input_manifest/
    │   │   │   ├── config.json
    │   │   │   └── in/
    │   │   │       ├── state.json
    │   │   │       └── tables/
    │   │   │           ├── sample.csv
    │   │   │           └── sample.csv.manifest
    │   │   ├── data_full_output_manifest/
    │   │   │   ├── config.json
    │   │   │   └── in/
    │   │   │       ├── state.json
    │   │   │       └── tables/
    │   │   │           ├── sample_output.csv
    │   │   │           └── sample_output.csv.manifest
    │   │   ├── data_new_manifest/
    │   │   │   ├── config.json
    │   │   │   └── in/
    │   │   │       ├── state.json
    │   │   │       └── tables/
    │   │   │           ├── sample.csv
    │   │   │           └── sample.csv.manifest
    │   │   ├── data_storage_parameter_data_types/
    │   │   │   ├── config.json
    │   │   │   └── in/
    │   │   │       ├── state.json
    │   │   │       └── tables/
    │   │   │           ├── sample.csv
    │   │   │           └── sample.csv.manifest
    │   │   └── data_system_tags/
    │   │       ├── config.json
    │   │       └── in/
    │   │           └── files/
    │   │               ├── 151971405_21702.strip.print.gif.manifest
    │   │               ├── 151971412_30221.strip.print.gif.manifest
    │   │               ├── 151971423_5655.strip.print.gif.manifest
    │   │               ├── 151971432_compiler_complaint.png.manifest
    │   │               ├── 151971450_duty_calls.png.manifest
    │   │               ├── 151971455_duty_calls.png.manifest
    │   │               └── .gitignore
    │   └── schema_examples/
    │       ├── faulty-schemas/
    │       │   ├── invalid_base_type.json
    │       │   ├── invalid_column_schema.json
    │       │   └── invalid_table_schema.json
    │       └── schemas/
    │           ├── order.json
    │           └── product.json
    └── .github/
        └── workflows/
            ├── deploy.yml
            ├── deploy_to_test.yml
            └── push_dev.yml

================================================
File: README.md
================================================
# Keboola Python Component library

## Introduction

![Build & Test](https://github.com/keboola/python-component/workflows/Build%20&%20Test/badge.svg?branch=main)
[![Code Climate](https://codeclimate.com/github/keboola/python-component/badges/gpa.svg)](https://codeclimate.com/github/keboola/python-component)
[![PyPI version](https://badge.fury.io/py/keboola.component.svg)](https://badge.fury.io/py/keboola.component)

This library provides a Python wrapper over the
[Keboola Common Interface](https://developers.keboola.com/extend/common-interface/). It simplifies all tasks related to
the communication of the [Docker component](https://developers.keboola.com/extend/component/) with the Keboola
Connection that is defined by the Common Interface. Such tasks are config manipulation, validation, component state, I/O
handling, I/O metadata and manifest files, logging, etc.

It is being developed by the Keboola Data Services team and officially supported by Keboola. It aims to simplify the
Keboola Component creation process, by removing the necessity of writing boilerplate code to manipulate with the Common
Interface.

Another useful use-case is within the Keboola [Python Transformations](https://help.keboola.com/transformations/python/)
to simplify the I/O handling.

### Links

- API Documentation: [API docs](https://keboola.github.io/python-component/interface.html)
- Source code: [https://github.com/keboola/python-component](https://github.com/keboola/python-component)
- PYPI project
  code: [https://test.pypi.org/project/keboola.component-kds/](https://test.pypi.org/project/keboola.component-kds/)
-

Documentation: [https://developers.keboola.com/extend/component/python-component-library](https://developers.keboola.com/extend/component/)

- Python Component Cookiecutter template
  project: [https://bitbucket.org/kds_consulting_team/cookiecutter-python-component](https://bitbucket.org/kds_consulting_team/cookiecutter-python-component)

# Quick start

## Installation

The package may be installed via PIP:

 ```
pip install keboola.component
```

## Core structure & functionality

The package contains two core modules:

- `keboola.component.interface` - Core methods and class to initialize and handle
  the [Keboola Common Interface](https://developers.keboola.com/extend/common-interface/) tasks
- `keboola.component.dao` - Data classes and containers for objects defined by the Common Interface such as manifest
  files, metadata, environment variables, etc.
- `keboola.component.base` - Base classes to build the Keboola Component applications from.

## CommonInterface

Core class that serves to initialize the docker environment. It handles the following tasks:

- Environment initialisation
    - Loading
      all [environment variables](https://developers.keboola.com/extend/common-interface/environment/#environment-variables)
    - Loading the [configuration file](https://developers.keboola.com/extend/common-interface/config-file/) and
      initialization of the [data folder](https://developers.keboola.com/extend/common-interface/folders/)
    - [State file](https://developers.keboola.com/extend/common-interface/config-file/#state-file) processing.
    - [Logging](https://developers.keboola.com/extend/common-interface/logging/)
- [Data folder](https://developers.keboola.com/extend/common-interface/folders/) manipulation
    - [Manifest file](https://developers.keboola.com/extend/common-interface/manifest-files/) processing
    - Config validation
    - Metadata manipulation
    - [OAuth](https://developers.keboola.com/extend/common-interface/oauth/) configuration handling.

## Initialization

The core class is `keboola.component.interface.CommonInterface`, upon it's initialization the environment is created.
e.g.

- data folder initialized (either from the Environment Variable or manually)
- config.json is loaded
- All Environment variables are loaded

The optional parameter `data_folder_path` of the constructor is the path to the data directory. If not
provided it will be determined in this order:
1.   [`KBC_DATADIR` environment variable](/extend/common-interface/environment/#environment-variables) if present
2. -d / --data argument from the command line if present
3. data folder inside the current working directory if present
4. data folder inside the parent directory of the current working directory if present

The class can be either extended or just instantiated and manipulated like object. The `CommonInterface` class is
exposed in the `keboola.component` namespace:

```python
from keboola.component import CommonInterface

# init the interface
# A ValueError error is raised if the KBC_DATADIR does not exist or contains non-existent path.
ci = CommonInterface()
```

To specify the data folder path manually use this code:

```python
from keboola.component import CommonInterface

# init the interface
# A ValueError error is raised if the data folder path does not exist.
ci = CommonInterface(data_folder_path='/data')
```

## Loading configuration parameters:

The below example loads initializes the common interface class and automatically loading config.json from the
[data folder](https://developers.keboola.com/extend/common-interface/folders/) which is defined by an environment
variable `KBC_DATADIR`, if the variable is not present, and error is raised. To override the data folder location
provide the `data_folder_path` parameter into constructor.

**NOTE:** The `configuration` object is initialized upon access and a ValueError is thrown if the `config.json` does not
exist in the data folder. e.g. `cfg = ci.configuration` may throw a ValueError even though the data folder exists and
ci (CommonInterface)
is properly initialized.

```python
from keboola.component import CommonInterface
# Logger is automatically set up based on the component setup (GELF or STDOUT)
import logging

SOME_PARAMETER = 'some_user_parameter'
REQUIRED_PARAMETERS = [SOME_PARAMETER]

# init the interface
# A ValueError error is raised if the KBC_DATADIR does not exist or contains non-existent path.
ci = CommonInterface()

# A ValueError error is raised if the config.json file does not exists in the data dir.
# Checks for required parameters and throws ValueError if any is missing.
ci.validate_configuration(REQUIRED_PARAMETERS)

# print KBC Project ID from the environment variable if present:
logging.info(ci.environment_variables.project_id)

# load particular configuration parameter
logging.info(ci.configuration.parameters[SOME_PARAMETER])
```

## Processing input tables - Manifest vs I/O mapping

Input and output tables specified by user are listed in the [configuration file](/extend/common-interface/config-file/).
Apart from that, all input tables provided by user also include manifest file with additional metadata.

Tables and their manifest files are represented by the `keboola.component.dao.TableDefinition` object and may be loaded
using the convenience method `get_input_tables_definitions()`. The result object contains all metadata about the table,
such as manifest file representations, system path and name.

### Manifest & input folder content

```python
from keboola.component import CommonInterface
import logging

# init the interface
ci = CommonInterface()

input_tables = ci.get_input_tables_definitions()

# print path of the first table (random order)
first_table = input_tables[0]
logging.info(f'The first table named: "{first_table.name}" is at path: {first_table.full_path}')

# get information from table manifest
logging.info(f'The first table has following columns defined in the manifest {first_table.column_names}')

```

### Using I/O mapping

```python
import csv
from keboola.component import CommonInterface

# initialize the library
ci = CommonInterface()

# get list of input tables from the input mapping ()
tables = ci.configuration.tables_input_mapping
j = 0
for table in tables:
    # get csv file name
    inName = table.destination

    # read input table manifest and get it's physical representation
    table_def = ci.get_input_table_definition_by_name(table.destination)

    # get csv file name with full path from output mapping
    outName = ci.configuration.tables_output_mapping[j].full_path

    # get file name from output mapping
    outDestination = ci.configuration.tables_output_mapping[j]['destination']
```

## I/O table manifests and processing results

The component may define
output [manifest files](https://developers.keboola.com/extend/common-interface/manifest-files/#dataouttables-manifests)
that define options on storing the results back to the Keboola Connection Storage. This library provides methods that
simplifies the manifest file creation and allows defining the export options and metadata of the result table using
helper objects `TableDefinition`
and `TableMetadata`.

`TableDefinition` object serves as a result container containing all the information needed to store the Table into the
Storage. It contains the manifest file representation and initializes all attributes available in the manifest.

This object represents both Input and Output manifests. All output manifest attributes are exposed in the class.

There are convenience methods for result processing and manifest creation `CommonInterface.write_manifest`. Also it is
possible to create the container for the output table using the `CommonInterface.create_out_table_definition()`.

![TableDefinition dependencies](docs/imgs/TableDefinition_class.png)

**Table schema example:**

```python
from keboola.component import CommonInterface
from keboola.component.dao import ColumnDefinition, DataType, SupportedDataTypes, BaseType

# init the interface
ci = CommonInterface(data_folder_path='data')

# create container for the result
out = ci.create_out_table_definition("testDef",
                                     schema=['foo', 'bar'],
                                     destination='some-destination',
                                     primary_key=['foo'],
                                     incremental=True,
                                     delete_where={'column': 'lilly',
                                                   'values': ['a', 'b'],
                                                   'operator': 'eq'})

# update column
out.update_column('foo',
                  ColumnDefinition(data_types=BaseType(dtype=SupportedDataTypes.INTEGER, length='20')))

# add new columns
out.add_column('note', ColumnDefinition(nullable=False))
out.add_column('test1')
out.add_columns(['test2', 'test3', 'test4'])

# add new typed column
out.add_column('id', ColumnDefinition(primary_key=True,
                                      data_types={'snowflake': DataType(dtype="INTEGER", length='200')})
               )

out.add_columns({
    'phone': ColumnDefinition(primary_key=True,
                              data_types={'snowflake': DataType(dtype="INTEGER", length='200'),
                                          'bigquery': DataType(dtype="BIGINT")}),
    'new2': ColumnDefinition(data_types={'snowflake': DataType(dtype="INTEGER", length='200')}),
                 })

# delete columns
out.delete_column('bar')
out.delete_columns(['test2', 'test3'])


# write some content
with open(out.full_path, 'w') as result:
    result.write('line')
    
# write manifest
ci.write_manifest(out)
```

**Example:**

```python
from keboola.component import CommonInterface
from keboola.component import dao

# init the interface
ci = CommonInterface()

# create container for the result
result_table = ci.create_out_table_definition('my_new_result_table', primary_key=['id'], incremental=True)

# write some content
with open(result_table.full_path, 'w') as result:
    result.write('line')

# add some metadata
result_table.table_metadata.add_table_description('My new table description')
# add column datatype
result_table.table_metadata.add_column_data_type('id', dao.SupportedDataTypes.STRING,
                                                 source_data_type='VARCHAR(100)',
                                                 nullable=True,
                                                 length=100)

# write manifest
ci.write_manifest(result_table)
```

### Get input table by name

```python
from keboola.component import CommonInterface

# init the interface
ci = CommonInterface()
table_def = ci.get_input_table_definition_by_name('input.csv')

```

### Initializing TableDefinition object from the manifest file

```python
from keboola.component import dao

table_def = dao.TableDefinition.build_from_manifest('data/in/tables/table.csv.manifest')

# print table.csv full-path if present:

print(table_def.full_path)

# rows count

print(table_def.rows_count)
```

### Retrieve raw manifest file definition (CommonInterface compatible)

To retrieve the manifest file representation that is compliant with Keboola Connection Common Interface use
the `table_def.get_manifest_dictionary()` method.

```python
from keboola.component import dao

table_def = dao.TableDefinition.build_from_manifest('data/in/tables/table.csv.manifest')

# get the  manifest file representation
manifest_dict = table_def.get_manifest_dictionary()

```

## Processing input files

Similarly as tables, files and their manifest files are represented by the `keboola.component.dao.FileDefinition` object
and may be loaded using the convenience method `get_input_files_definitions()`. The result object contains all metadata
about the file, such as manifest file representations, system path and name.

The `get_input_files_definitions()` supports filter parameters to filter only files with a specific tag or retrieve only
the latest file of each. This is especially useful because the KBC input mapping will by default include all versions of
files matching specific tag. By default, the method returns only the latest file of each.

```python
from keboola.component import CommonInterface
import logging

# init the interface
ci = CommonInterface()

input_files = ci.get_input_files_definitions(tags=['my_tag'], only_latest_files=True)

# print path of the first file (random order) matching the criteria
first_file = input_files[0]
logging.info(f'The first file named: "{first_file.name}" is at path: {first_file.full_path}')


```

When working with files it may be useful to retrieve them in a dictionary structure grouped either by name or a tag
group. For this there are convenience methods `get_input_file_definitions_grouped_by_tag_group()`
and `get_input_file_definitions_grouped_by_name()`

```python
from keboola.component import CommonInterface
import logging

# init the interface
ci = CommonInterface()

# group by tag
input_files_by_tag = ci.get_input_file_definitions_grouped_by_tag_group(only_latest_files=True)

# print list of files matching specific tag
logging.info(input_files_by_tag['my_tag'])

# group by name
input_files_by_name = ci.get_input_file_definitions_grouped_by_name(only_latest_files=True)

# print list of files matching specific name
logging.info(input_files_by_name['image.jpg'])

```

## Processing state files

[State files](https://developers.keboola.com/extend/common-interface/config-file/#state-file) can be easily written and
loaded using the `get_state_file()` and `write_state_file()` methods:

```python
from keboola.component import CommonInterface
from datetime import datetime
import logging

# init the interface
ci = CommonInterface()

last_state = ci.get_state_file()

# print last_updated if exists
logging.info(f'Previous job stored following last_updated value: {last_state.get("last_updated", "")})')

# store new state file
ci.write_state_file({"last_updated": datetime.now().isoformat()})
```

## Logging

The library automatically initializes STDOUT or GELF logger based on the presence of the `KBC_LOGGER_PORT/HOST`
environment variable upon the `CommonInterface` initialization. To use the GELF logger just enable the logger for your
appplication in the Developer Portal. More info in
the [dedicated article](https://developers.keboola.com/extend/common-interface/logging/#examples).

Once it is enabled, you may just log your messages using the logging library:

```python
from keboola.component import CommonInterface
from datetime import datetime
import logging

# init the interface
ci = CommonInterface()

logging.info("Info message")
```

**TIP:** When the logger verbosity is set to `verbose` you may leverage `extra` fields to log the detailed message in
the detail of the log event by adding extra fields to you messages:

```python
logging.error(f'{error}. See log detail for full query. ',
              extra={"failed_query": json.dumps(query)})
```

You may also choose to override the settings by enabling the GELF or STDOUT explicitly and specifying the host/port
parameters:

```python
from keboola.component import CommonInterface
import os
import logging

# init the interface
ci = CommonInterface()
os.environ['KBC_LOGGER_ADDR'] = 'localhost'
os.environ['KBC_LOGGER_PORT'] = 12201
ci.set_gelf_logger(log_level=logging.INFO, transport_layer='UDP')

logging.info("Info message")
```

# ComponentBase

[Base class](https://keboola.github.io/python-component/base.html)
for general Python components. Base your components on this class for simpler debugging.

It performs following tasks by default:

- Initializes the CommonInterface.
- For easier debugging the data folder is picked up by default from `../data` path, relative to working directory when
  the `KBC_DATADIR` env variable is not specified.
- If `debug` parameter is present in the `config.json`, the default logger is set to verbose DEBUG mode.
- Executes sync actions -> `run` by default. See the sync actions section.

**Constructor arguments**:

- data_path_override: optional path to data folder that overrides the default behaviour
  (`KBC_DATADIR` environment variable). May be also specified by `-d` or `--data` commandline argument

Raises: `UserException` - on config validation errors.

**Example usage**:

```python
import csv
import logging
from datetime import datetime

from keboola.component.base import ComponentBase, sync_action
from keboola.component import UserException

# configuration variables
KEY_PRINT_HELLO = 'print_hello'

# list of mandatory parameters => if some is missing,
# component will fail with readable message on initialization.
REQUIRED_PARAMETERS = [KEY_PRINT_HELLO]
REQUIRED_IMAGE_PARS = []


class Component(ComponentBase):

    def run(self):
        '''
        Main execution code
        '''

        # ####### EXAMPLE TO REMOVE
        # check for missing configuration parameters
        self.validate_configuration_parameters(REQUIRED_PARAMETERS)
        self.validate_image_parameters(REQUIRED_IMAGE_PARS)

        params = self.configuration.parameters
        # Access parameters in data/config.json
        if params.get(KEY_PRINT_HELLO):
            logging.info("Hello World")

        # get last state data/in/state.json from previous run
        previous_state = self.get_state_file()
        logging.info(previous_state.get('some_state_parameter'))

        # Create output table (Tabledefinition - just metadata)
        table = self.create_out_table_definition('output.csv', incremental=True, primary_key=['timestamp'])

        # get file path of the table (data/out/tables/Features.csv)
        out_table_path = table.full_path
        logging.info(out_table_path)

        # DO whatever and save into out_table_path
        with open(table.full_path, mode='wt', encoding='utf-8', newline='') as out_file:
            writer = csv.DictWriter(out_file, fieldnames=['timestamp'])
            writer.writeheader()
            writer.writerow({"timestamp": datetime.now().isoformat()})

        # Save table manifest (output.csv.manifest) from the tabledefinition
        self.write_manifest(table)

        # Write new state - will be available next run
        self.write_state_file({"some_state_parameter": "value"})

        # ####### EXAMPLE TO REMOVE END

    # sync action that is executed when configuration.json "action":"testConnection" parameter is present.
    @sync_action('testConnection')
    def test_connection(self):
        connection = self.configuration.parameters.get('test_connection')
        if connection == "fail":
            raise UserException("failed")
        elif connection == "succeed":
            # this is ignored when run as sync action.
            logging.info("succeed")


"""
        Main entrypoint
"""
if __name__ == "__main__":
    try:
        comp = Component()
        # this triggers the run method by default and is controlled by the configuration.action paramter
        comp.execute_action()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)
```

## Table Schemas in ComponentBase

In cases of a static schemas of output/input tables, the schemas can be defined using a JSON Table Schema. For output
mapping these json schemas can be automatically turned into out table definitions.

### JSON Table Schema example file

```json
{
  "name": "product",
  "description": "this table holds data on products",
  "parent_tables": [],
  "primary_keys": [
    "id"
  ],
  "fields": [
    {
      "name": "id",
      "base_type": "string",
      "description": "ID of the product",
      "length": "100",
      "nullable": false
    },
    {
      "name": "name",
      "base_type": "string",
      "description": "Plain-text name of the product",
      "length": "1000",
      "default": "Default Name"
    }
  ]
}
```

### Out table definition from schema example

The example below shows how a table definition can be created from a json schema using the ComponentBase. The schema is
located in the 'src/schemas' directory.

 ```python
import csv
from keboola.component.base import ComponentBase

DUMMY_PRODUCT_DATA = [{"id": "P0001",
                       "name": "juice"},
                      {"id": "P0002",
                       "name": "chocolate bar"},
                      {"id": "P0003",
                       "name": "Stylish Pants"},
                      ]


class Component(ComponentBase):

    def __init__(self):
        super().__init__()

    def run(self):
        product_schema = self.get_table_schema_by_name('product')
        product_table = self.create_out_table_definition_from_schema(product_schema)
        with open(product_table.full_path, 'w') as outfile:
            writer = csv.DictWriter(outfile, fieldnames=product_table.column_names)
            writer.writerows(DUMMY_PRODUCT_DATA)
        self.write_manifest(product_table)
 ```

# Sync Actions

From the documentation [Sync actions](https://developers.keboola.com/extend/common-interface/actions/):

Action provide a way to execute very quick tasks in a single Component, using a single code base. The default
component’s action (`run`) executes as a background, asynchronous job. It is queued, has plenty of execution time, and
there are cases when you might not want to wait for it. Apart from the default `run`, there can be synchronous actions
with limited execution time and you must wait for them. When we refer to **actions**, we mean synchronous actions. Using
actions is fully optional.

## Use Case

For example, in our database extractor, the main task (`run` action) is the data extraction itself. But we also want to
be able to test the database credentials and list tables available in the database. These tasks would be very helpful in
the UI. It is not possible to do these things directly in the browser. Setting up a separate component would bring an
overhead of maintaining both the extractor’s Docker image and the new component.

## Sync Action limitations

Data is exchanged via `stdout` or `stderr`.

- Sync actions need to be registered in the Developer Portal first.

**Following are handled by the decorator automatically**

- All success responses have to output valid JSON string. Meaning nothing can log into the stdout during the action
  execution
- For success action the output needs to be always `{"status":"success"}` in stdout.

## Framework Support

Decorator `sync_action` was added. It takes one parameter `action_name` that will create mapping between the actual
method and the sync action name registered in the Developer Portal.

- Decorated methods can also be called from within the program and return values.
- They can log normally -> when run as sync action all logging within the method is muted.
- When a return value is produced, it is expected to be `dict` or `list` object. These will be printed to stdout at the
  end.
- Exceptions can be thrown normally and the message will be propagated to the platform.

### Action output & examples

Each action has to have specific output based on type of the UI element that the action is triggered with. It can either
have no return value (success / fail type of actions) or UI element specific output.

For convenience each output variant is represented by classes specified in `keboola.component.sync_actions` module.

#### ValidationResult

Result expected by validation button element.

```python
from keboola.component.base import ComponentBase, sync_action
from keboola.component.sync_actions import ValidationResult, MessageType


class Component(ComponentBase):

    def run(self):
        pass

    @sync_action('validate_example')
    def validate_message(self) -> ValidationResult:
        return ValidationResult('Some warning **markdown** message', MessageType.WARNING)
```

#### SelectElement

Element of a dynamic (multi)select UI element. The UI objects expects list of such elements.

```python
from keboola.component.base import ComponentBase, sync_action
from keboola.component.sync_actions import ValidationResult, MessageType, SelectElement
from typing import List


class Component(ComponentBase):

    def run(self):
        pass

    @sync_action('validate_example')
    def validate_message(self) -> List[SelectElement]:
        return [SelectElement(value="value1", label="Value 1 label"),
                SelectElement(value="value2", label="Value 2 label")]
```

#### No output

Some actions like test connection button expect only success / failure type of result with no return value.

```python
from keboola.component.base import ComponentBase, sync_action
from keboola.component import UserException
import logging


class Component(ComponentBase):

    def __init__(self):
        super().__init__()

    @sync_action('testConnection')
    def test_connection(self):
        # this is ignored when run as sync action.
        logging.info("Testing Connection")
        print("test print")
        params = self.configuration.parameters
        connection = params.get('test_connection')
        if connection == "fail":
            raise UserException("failed")
        elif connection == "succeed":
            # this is ignored when run as sync action.
            logging.info("succeed")
```

## License

MIT licensed, see [LICENSE](./LICENSE) file.


================================================
File: LICENSE
================================================
MIT License

Copyright (c) Keboola :(){:|:&};: s.r.o.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


================================================
File: flake8.cfg
================================================
[flake8]
exclude =
    .git,
    __pycache__,
    tests,
    mapping.py
max-line-length = 119

# F812: list comprehension redefines ...
# H101: Use TODO(NAME)
# H202: assertRaises Exception too broad
# H233: Python 3.x incompatible use of print operator
# H301: one import per line
# H306: imports not in alphabetical order (time, os)
# H401: docstring should not start with a space
# H403: multi line docstrings should end on a new line
# H404: multi line docstring should start without a leading new line
# H405: multi line docstring summary not separated with an empty line
# H501: Do not use self.__dict__ for string formatting
ignore = F812,H101,H202,H233,H301,H306,H401,H403,H404,H405,H501

================================================
File: requirements.txt
================================================
pygelf
pytz<2021.0
deprecated

================================================
File: setup.py
================================================
import setuptools

with open("README.md", "r") as fh:
    long_description = fh.read()
    # remove header
    header_lines = 3
    long_description = long_description.split("\n", header_lines)[header_lines]

project_urls = {
    'Documentation': 'https://keboola.github.io/python-component/interface.html',
    'Component Template project': 'https://bitbucket.org/kds_consulting_team/cookiecutter-python-component'
}

setuptools.setup(
    name="keboola.component",
    version="1.6.10",
    author="Keboola KDS Team",
    project_urls=project_urls,
    setup_requires=['pytest-runner', 'flake8'],
    tests_require=['pytest'],
    install_requires=[
        'pygelf',
        'pytz',
        'deprecated'
    ],
    author_email="support@keboola.com",
    description="General library for Python applications running in Keboola Connection environment",
    long_description=long_description,
    long_description_content_type="text/markdown",
    url="https://github.com/keboola/python-component",
    package_dir={'': 'src'},
    packages=['keboola.component'],
    include_package_data=True,
    zip_safe=False,
    test_suite='tests',
    classifiers=[
        "Programming Language :: Python :: 3",
        "License :: OSI Approved :: MIT License",
        "Operating System :: OS Independent",
        "Intended Audience :: Developers",
        "Intended Audience :: Information Technology",
        "Intended Audience :: Education",
        "Topic :: Software Development :: Libraries",
        "Topic :: Software Development :: Libraries :: Python Modules",
        "Development Status :: 5 - Production/Stable"
    ],
    python_requires='>=3.7'
)


================================================
File: docs/base.html
================================================
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1">
<meta name="generator" content="pdoc3 0.11.5">
<title>keboola.component.base API documentation</title>
<meta name="description" content="">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/10up-sanitize.css/13.0.0/sanitize.min.css" integrity="sha512-y1dtMcuvtTMJc1yPgEqF0ZjQbhnc/bFhyvIyVNb9Zk5mIGtqVaAB1Ttl28su8AvFMOY0EwRbAe+HCLqj6W7/KA==" crossorigin>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/10up-sanitize.css/13.0.0/typography.min.css" integrity="sha512-Y1DYSb995BAfxobCkKepB1BqJJTPrOp3zPL74AWFugHHmmdcvO+C48WLrUOlhGMc0QG7AE3f7gmvvcrmX2fDoA==" crossorigin>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/default.min.css" crossorigin>
<style>:root{--highlight-color:#fe9}.flex{display:flex !important}body{line-height:1.5em}#content{padding:20px}#sidebar{padding:1.5em;overflow:hidden}#sidebar > *:last-child{margin-bottom:2cm}.http-server-breadcrumbs{font-size:130%;margin:0 0 15px 0}#footer{font-size:.75em;padding:5px 30px;border-top:1px solid #ddd;text-align:right}#footer p{margin:0 0 0 1em;display:inline-block}#footer p:last-child{margin-right:30px}h1,h2,h3,h4,h5{font-weight:300}h1{font-size:2.5em;line-height:1.1em}h2{font-size:1.75em;margin:2em 0 .50em 0}h3{font-size:1.4em;margin:1.6em 0 .7em 0}h4{margin:0;font-size:105%}h1:target,h2:target,h3:target,h4:target,h5:target,h6:target{background:var(--highlight-color);padding:.2em 0}a{color:#058;text-decoration:none;transition:color .2s ease-in-out}a:visited{color:#503}a:hover{color:#b62}.title code{font-weight:bold}h2[id^="header-"]{margin-top:2em}.ident{color:#900;font-weight:bold}pre code{font-size:.8em;line-height:1.4em;padding:1em;display:block}code{background:#f3f3f3;font-family:"DejaVu Sans Mono",monospace;padding:1px 4px;overflow-wrap:break-word}h1 code{background:transparent}pre{border-top:1px solid #ccc;border-bottom:1px solid #ccc;margin:1em 0}#http-server-module-list{display:flex;flex-flow:column}#http-server-module-list div{display:flex}#http-server-module-list dt{min-width:10%}#http-server-module-list p{margin-top:0}.toc ul,#index{list-style-type:none;margin:0;padding:0}#index code{background:transparent}#index h3{border-bottom:1px solid #ddd}#index ul{padding:0}#index h4{margin-top:.6em;font-weight:bold}@media (min-width:200ex){#index .two-column{column-count:2}}@media (min-width:300ex){#index .two-column{column-count:3}}dl{margin-bottom:2em}dl dl:last-child{margin-bottom:4em}dd{margin:0 0 1em 3em}#header-classes + dl > dd{margin-bottom:3em}dd dd{margin-left:2em}dd p{margin:10px 0}.name{background:#eee;font-size:.85em;padding:5px 10px;display:inline-block;min-width:40%}.name:hover{background:#e0e0e0}dt:target .name{background:var(--highlight-color)}.name > span:first-child{white-space:nowrap}.name.class > span:nth-child(2){margin-left:.4em}.inherited{color:#999;border-left:5px solid #eee;padding-left:1em}.inheritance em{font-style:normal;font-weight:bold}.desc h2{font-weight:400;font-size:1.25em}.desc h3{font-size:1em}.desc dt code{background:inherit}.source > summary,.git-link-div{color:#666;text-align:right;font-weight:400;font-size:.8em;text-transform:uppercase}.source summary > *{white-space:nowrap;cursor:pointer}.git-link{color:inherit;margin-left:1em}.source pre{max-height:500px;overflow:auto;margin:0}.source pre code{font-size:12px;overflow:visible;min-width:max-content}.hlist{list-style:none}.hlist li{display:inline}.hlist li:after{content:',\2002'}.hlist li:last-child:after{content:none}.hlist .hlist{display:inline;padding-left:1em}img{max-width:100%}td{padding:0 .5em}.admonition{padding:.1em 1em;margin:1em 0}.admonition-title{font-weight:bold}.admonition.note,.admonition.info,.admonition.important{background:#aef}.admonition.todo,.admonition.versionadded,.admonition.tip,.admonition.hint{background:#dfd}.admonition.warning,.admonition.versionchanged,.admonition.deprecated{background:#fd4}.admonition.error,.admonition.danger,.admonition.caution{background:lightpink}</style>
<style media="screen and (min-width: 700px)">@media screen and (min-width:700px){#sidebar{width:30%;height:100vh;overflow:auto;position:sticky;top:0}#content{width:70%;max-width:100ch;padding:3em 4em;border-left:1px solid #ddd}pre code{font-size:1em}.name{font-size:1em}main{display:flex;flex-direction:row-reverse;justify-content:flex-end}.toc ul ul,#index ul ul{padding-left:1em}.toc > ul > li{margin-top:.5em}}</style>
<style media="print">@media print{#sidebar h1{page-break-before:always}.source{display:none}}@media print{*{background:transparent !important;color:#000 !important;box-shadow:none !important;text-shadow:none !important}a[href]:after{content:" (" attr(href) ")";font-size:90%}a[href][title]:after{content:none}abbr[title]:after{content:" (" attr(title) ")"}.ir a:after,a[href^="javascript:"]:after,a[href^="#"]:after{content:""}pre,blockquote{border:1px solid #999;page-break-inside:avoid}thead{display:table-header-group}tr,img{page-break-inside:avoid}img{max-width:100% !important}@page{margin:0.5cm}p,h2,h3{orphans:3;widows:3}h1,h2,h3,h4,h5,h6{page-break-after:avoid}}</style>
<script defer src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js" integrity="sha512-D9gUyxqja7hBtkWpPWGt9wfbfaMGVt9gnyCvYa+jojwwPHLCzUm5i8rpk7vD7wNee9bA35eYIjobYPaQuKS1MQ==" crossorigin></script>
<script>window.addEventListener('DOMContentLoaded', () => {
hljs.configure({languages: ['bash', 'css', 'diff', 'graphql', 'ini', 'javascript', 'json', 'plaintext', 'python', 'python-repl', 'rust', 'shell', 'sql', 'typescript', 'xml', 'yaml']});
hljs.highlightAll();
/* Collapse source docstrings */
setTimeout(() => {
[...document.querySelectorAll('.hljs.language-python > .hljs-string')]
.filter(el => el.innerHTML.length > 200 && ['"""', "'''"].includes(el.innerHTML.substring(0, 3)))
.forEach(el => {
let d = document.createElement('details');
d.classList.add('hljs-string');
d.innerHTML = '<summary>"""</summary>' + el.innerHTML.substring(3);
el.replaceWith(d);
});
}, 100);
})</script>
</head>
<body>
<main>
<article id="content">
<header>
<h1 class="title">Module <code>keboola.component.base</code></h1>
</header>
<section id="section-intro">
</section>
<section>
</section>
<section>
</section>
<section>
<h2 class="section-title" id="header-functions">Functions</h2>
<dl>
<dt id="keboola.component.base.sync_action"><code class="name flex">
<span>def <span class="ident">sync_action</span></span>(<span>action_name: str)</span>
</code></dt>
<dd>
<details class="source">
<summary>
<span>Expand source code</span>
</summary>
<pre><code class="python">def sync_action(action_name: str):
    &#34;&#34;&#34;

       Decorator for marking sync actions method.
       For more info see [Sync actions](https://developers.keboola.com/extend/common-interface/actions/).

        Usage:

    ```
    import csv
    import logging

    from keboola.component.base import ComponentBase, sync_action

    class Component(ComponentBase):

        def run(self):
            &#39;&#39;&#39;
            Main execution code
            &#39;&#39;&#39;
            pass

        # sync action that is executed when configuration.json &#34;action&#34;:&#34;testConnection&#34; parameter is present.
        @sync_action(&#39;testConnection&#39;)
        def test_connection(self):
            connection = self.configuration.parameters.get(&#39;test_connection&#39;)
            if connection == &#34;fail&#34;:
                raise UserException(&#34;failed&#34;)
            elif connection == &#34;succeed&#34;:
                # this is ignored when run as sync action.
                logging.info(&#34;succeed&#34;)


    if __name__ == &#34;__main__&#34;:
        try:
            comp = Component()
            # this triggers the run method by default and is controlled by the configuration.action parameter
            comp.execute_action()
        except UserException as exc:
            logging.exception(exc)
            exit(1)
        except Exception as exc:
            logging.exception(exc)
            exit(2)
    ```

    Args:
        action_name: Name of the action registered in Developer Portal

    Returns:

    &#34;&#34;&#34;

    def decorate(func):
        # to allow pythonic names / action name mapping
        if action_name == &#39;run&#39;:
            raise ValueError(&#39;Sync action name &#34;run&#34; is reserved base action! Use different name.&#39;)
        _SYNC_ACTION_MAPPING[action_name] = func.__name__

        @wraps(func)
        def action_wrapper(self, *args, **kwargs):
            # override when run as sync action, because it could be also called normally within run
            is_sync_action = self.configuration.action != &#39;run&#39;

            # do operations with func
            if is_sync_action:
                stdout_redirect = None
                # mute logging just in case
                logging.getLogger().setLevel(logging.FATAL)
            else:
                stdout_redirect = sys.stdout

            try:
                # when success, only supported syntax can be in output / log, so redirect stdout before.
                with contextlib.redirect_stdout(stdout_redirect):
                    result: Union[None, SyncActionResult, List[SyncActionResult]] = func(self, *args, **kwargs)

                if is_sync_action:
                    # sync action expects valid JSON in stdout on success.
                    result_str = process_sync_action_result(result)
                    sys.stdout.write(result_str)

                return result

            except Exception as e:
                if is_sync_action:
                    # sync actions expect stderr
                    sys.stderr.write(str(e))
                    exit(1)
                else:
                    raise e

        return action_wrapper

    return decorate</code></pre>
</details>
<div class="desc"><p>Decorator for marking sync actions method.
For more info see <a href="https://developers.keboola.com/extend/common-interface/actions/">Sync actions</a>.</p>
<pre><code>Usage:
</code></pre>
<pre><code>import csv
import logging

from keboola.component.base import ComponentBase, sync_action

class Component(ComponentBase):

    def run(self):
        '''
        Main execution code
        '''
        pass

    # sync action that is executed when configuration.json &quot;action&quot;:&quot;testConnection&quot; parameter is present.
    @sync_action('testConnection')
    def test_connection(self):
        connection = self.configuration.parameters.get('test_connection')
        if connection == &quot;fail&quot;:
            raise UserException(&quot;failed&quot;)
        elif connection == &quot;succeed&quot;:
            # this is ignored when run as sync action.
            logging.info(&quot;succeed&quot;)


if __name__ == &quot;__main__&quot;:
    try:
        comp = Component()
        # this triggers the run method by default and is controlled by the configuration.action parameter
        comp.execute_action()
    except UserException as exc:
        logging.exception(exc)
        exit(1)
    except Exception as exc:
        logging.exception(exc)
        exit(2)
</code></pre>
<h2 id="args">Args</h2>
<dl>
<dt><strong><code>action_name</code></strong></dt>
<dd>Name of the action registered in Developer Portal</dd>
</dl>
<p>Returns:</p></div>
</dd>
</dl>
</section>
<section>
<h2 class="section-title" id="header-classes">Classes</h2>
<dl>
<dt id="keboola.component.base.ComponentBase"><code class="flex name class">
<span>class <span class="ident">ComponentBase</span></span>
<span>(</span><span>data_path_override: str | None = None,<br>schema_path_override: str | None = None,<br>required_parameters: list | None = None,<br>required_image_parameters: list | None = None)</span>
</code></dt>
<dd>
<details class="source">
<summary>
<span>Expand source code</span>
</summary>
<pre><code class="python">class ComponentBase(ABC, CommonInterface):
    def __init__(self, data_path_override: Optional[str] = None,
                 schema_path_override: Optional[str] = None,
                 required_parameters: Optional[list] = None,
                 required_image_parameters: Optional[list] = None):
        &#34;&#34;&#34;
        Base class for general Python components. Initializes the CommonInterface
        and performs configuration validation.

        For easier debugging the data folder is picked up by default from `../data` path,
        relative to working directory.

        If `debug` parameter is present in the `config.json`, the default logger is set to verbose DEBUG mode.

        It executes [Sync actions](https://developers.keboola.com/extend/common-interface/actions/)
        when &#34;action&#34; is defined in the configuration.json based on the @action_decorator.

        Args:
            data_path_override:
                optional path to data folder that overrides the default behaviour (`KBC_DATADIR` environment variable).
                May be also specified by &#39;-d&#39; or &#39;--data&#39; commandline argument
            required_parameters:
                Optional[dict]: DEPRECATED required configuration parameters, if filled in,
                validation is done at constructor level
            required_image_parameters:
                Optional[dict]: DEPRECATED required image parameters, if filled in,
                validation is done at constructor level
        Raises:
            UserException - on config validation errors.
        &#34;&#34;&#34;

        # for easier local project setup
        super().__init__(data_folder_path=self._get_data_folder_override_path(data_path_override))

        if required_parameters:
            self.validate_configuration_parameters(required_parameters)
        if required_image_parameters:
            self.validate_image_parameters(required_image_parameters)

        if self.configuration.parameters.get(KEY_DEBUG):
            self.set_debug_mode()

        self.schema_folder_path = self._get_schema_folder_path(schema_path_override)

    @staticmethod
    def _get_default_data_path() -&gt; str:
        &#34;&#34;&#34;
        Returns default data_path, by default `../data` is used, relative to working directory.
        This helps with local development.

        Returns:

        &#34;&#34;&#34;
        return Path(os.getcwd()).resolve().parent.joinpath(&#39;data&#39;).as_posix()

    def _get_data_folder_override_path(self, data_path_override: str = None) -&gt; str:
        &#34;&#34;&#34;
        Returns overridden value of the data_folder_path in case the data_path_override variable
        or `KBC_DATADIR` environment variable is defined. The `data_path_override` variable takes precendence.

        Returns null if override is not in place.

        Args:
            data_path_override:

        Returns:

        &#34;&#34;&#34;
        data_folder_path = None
        if data_path_override:
            data_folder_path = data_path_override
        elif not os.environ.get(&#39;KBC_DATADIR&#39;):
            data_folder_path = self._get_default_data_path()
        return data_folder_path

    def _get_schema_folder_path(self, schema_path_override: str = None) -&gt; str:
        &#34;&#34;&#34;
            Returns value of the schema_folder_path in case the schema_path_override variable is provided or
            the default schema_folder_path is found.

        &#34;&#34;&#34;
        return schema_path_override or self._get_default_schema_folder_path()

    @staticmethod
    def _get_default_schema_folder_path() -&gt; Optional[str]:
        &#34;&#34;&#34;
             Finds the default schema_folder_path if it exists.

        &#34;&#34;&#34;
        container_schema_dir = Path(&#34;./src/schemas/&#34;).absolute().as_posix()
        local_schema_dir = Path(&#34;./schemas&#34;).absolute().as_posix()
        if os.path.isdir(container_schema_dir):
            return container_schema_dir
        elif os.path.isdir(local_schema_dir):
            return local_schema_dir

    @staticmethod
    def set_debug_mode():
        &#34;&#34;&#34;
        Set the default logger to verbose mode.
        Returns:

        &#34;&#34;&#34;
        logging.getLogger().setLevel(logging.DEBUG)

    @abstractmethod
    def run(self):
        &#34;&#34;&#34;
        Main execution code of default run action.


        &#34;&#34;&#34;
        pass

    def execute_action(self):
        &#34;&#34;&#34;
        Executes action defined in the configuration.
        The default action is &#39;run&#39;. See base._SYNC_ACTION_MAPPING
        &#34;&#34;&#34;
        action = self.configuration.action
        if not action:
            logging.warning(&#34;No action defined in the configuration, using the default run action.&#34;)
            action = &#39;run&#39;

        try:
            action = _SYNC_ACTION_MAPPING[action]
            action_method = getattr(self, action)
        except (AttributeError, KeyError) as e:
            raise AttributeError(f&#34;The defined action {action} is not implemented!&#34;) from e
        return action_method()

    def _generate_table_metadata_legacy(self, table_schema: ts.TableSchema) -&gt; dao.TableMetadata:
        &#34;&#34;&#34;
            Generates a TableMetadata object for the table definition using a TableSchema object.

        &#34;&#34;&#34;
        table_metadata = dao.TableMetadata()
        if table_schema.description:
            table_metadata.add_table_description(table_schema.description)
        table_metadata.add_column_descriptions({field.name: field.description for field in table_schema.fields})
        table_metadata = self._add_field_data_types_to_table_metadata(table_schema, table_metadata)
        return table_metadata

    def create_out_table_definition_from_schema(self, table_schema: ts.TableSchema, is_sliced: bool = False,
                                                destination: str = &#39;&#39;, incremental: bool = None,
                                                enclosure: str = &#39;&#34;&#39;, delimiter: str = &#39;,&#39;,
                                                delete_where: dict = None) -&gt; dao.TableDefinition:
        &#34;&#34;&#34;
            Creates an out table definition using a defined table schema.
            This method uses the given table schema and generates metadata of the table. Along with the additional
            key word arguments it creates an out table definition.

            Args:
                table_schema : table of the schema for which a table definition will be created
                is_sliced: True if the full_path points to a folder with sliced tables
                destination: String name of the table in Storage.
                incremental: Set to true to enable incremental loading
                enclosure: str: CSV enclosure, by default &#34;
                delimiter: str: CSV delimiter, by default ,
                delete_where: Dict with settings for deleting rows

            Returns:
                TableDefinition object initialized with all table metadata defined in a schema

        &#34;&#34;&#34;
        if self._expects_legacy_manifest():
            table_metadata = self._generate_table_metadata_legacy(table_schema)
            table_def = self.create_out_table_definition(name=table_schema.csv_name,
                                                         columns=table_schema.field_names,
                                                         primary_key=table_schema.primary_keys,
                                                         table_metadata=table_metadata,
                                                         is_sliced=is_sliced,
                                                         destination=destination,
                                                         incremental=incremental,
                                                         enclosure=enclosure,
                                                         delimiter=delimiter,
                                                         delete_where=delete_where)
        else:
            schema = self._generate_schema_definition(table_schema)

            table_def = self.create_out_table_definition(name=table_schema.csv_name,
                                                         primary_key=table_schema.primary_keys,
                                                         schema=schema,
                                                         is_sliced=is_sliced,
                                                         destination=destination,
                                                         incremental=incremental,
                                                         enclosure=enclosure,
                                                         delimiter=delimiter,
                                                         delete_where=delete_where,
                                                         description=table_schema.description)

        return table_def

    def get_table_schema_by_name(self, schema_name: str,
                                 schema_folder_path: Optional[str] = None) -&gt; ts.TableSchema:
        &#34;&#34;&#34;
            The method finds a table schema JSON based on it&#39;s name in a defined schema_folder_path and generates
            a TableSchema object.

            Args:
                schema_name : name of the schema in the schema_folder_path. e.g. for schema in &#39;src/schemas/order.json&#39;
                              schema_name is &#39;order&#39;
                schema_folder_path : directory path to the schema folder, by default the schema folder is set at
                                     &#39;src/schemas&#39;
            Returns:
                TableSchema object initialized with all available table metadata


        &#34;&#34;&#34;
        if not schema_folder_path:
            schema_folder_path = self.schema_folder_path
        self._validate_schema_folder_path(schema_folder_path)
        schema_dict = self._load_table_schema_dict(schema_name, schema_folder_path)
        return ts.init_table_schema_from_dict(schema_dict)

    @staticmethod
    def _load_table_schema_dict(schema_name: str, schema_folder_path: str) -&gt; Dict:
        try:
            with open(os.path.join(schema_folder_path, f&#34;{schema_name}.json&#34;), &#39;r&#39;) as schema_file:
                json_schema = json.loads(schema_file.read())
        except FileNotFoundError as file_err:
            raise FileNotFoundError(
                f&#34;Schema for corresponding schema name : {schema_name} is not found in the schema directory. &#34;
                f&#34;Make sure that &#39;{schema_name}&#39;.json &#34;
                f&#34;exists in the directory &#39;{schema_folder_path}&#39;&#34;) from file_err
        return json_schema

    @staticmethod
    def _validate_schema_folder_path(schema_folder_path: str):
        if not schema_folder_path or not os.path.isdir(schema_folder_path):
            raise FileNotFoundError(&#34;A schema folder path must be defined in order to create a out table definition &#34;
                                    &#34;from a schema. If a schema folder path is not defined, the schemas folder must be&#34;
                                    &#34; located in the &#39;src&#39; directory of a component : src/schemas&#34;)

    def _generate_schema_definition(self, table_schema: ts.TableSchema) -&gt; Dict[str, dao.ColumnDefinition]:
        &#34;&#34;&#34;
            Generates a TableMetadata object for the table definition using a TableSchema object.

        &#34;&#34;&#34;
        column_definitions = {}
        for field in table_schema.fields:
            if field.base_type:
                data_types = dao.BaseType(field.base_type,
                                          length=field.length,
                                          default=field.default)
            else:
                data_types = dao.BaseType()
            column_definitions[field.name] = dao.ColumnDefinition(data_types=data_types,
                                                                  nullable=field.nullable,
                                                                  description=field.description)

        return column_definitions

    @staticmethod
    def _add_field_data_types_to_table_metadata(table_schema: ts.TableSchema,
                                                table_metadata: dao.TableMetadata) -&gt; dao.TableMetadata:
        &#34;&#34;&#34;
            Adds data types of all fields specified in a TableSchema object to a given TableMetadata object

        &#34;&#34;&#34;
        for field in table_schema.fields:
            if field.base_type:
                table_metadata.add_column_data_type(field.name,
                                                    data_type=field.base_type,
                                                    nullable=field.nullable,
                                                    length=field.length,
                                                    default=field.default)
        return table_metadata</code></pre>
</details>
<div class="desc"><p>Helper class that provides a standard way to create an ABC using
inheritance.</p>
<p>Base class for general Python components. Initializes the CommonInterface
and performs configuration validation.</p>
<p>For easier debugging the data folder is picked up by default from <code>../data</code> path,
relative to working directory.</p>
<p>If <code>debug</code> parameter is present in the <code>config.json</code>, the default logger is set to verbose DEBUG mode.</p>
<p>It executes <a href="https://developers.keboola.com/extend/common-interface/actions/">Sync actions</a>
when "action" is defined in the configuration.json based on the @action_decorator.</p>
<h2 id="args">Args</h2>
<p>data_path_override:
optional path to data folder that overrides the default behaviour (<code>KBC_DATADIR</code> environment variable).
May be also specified by '-d' or '&ndash;data' commandline argument
required_parameters:
Optional[dict]: DEPRECATED required configuration parameters, if filled in,
validation is done at constructor level
required_image_parameters:
Optional[dict]: DEPRECATED required image parameters, if filled in,
validation is done at constructor level</p>
<h2 id="raises">Raises</h2>
<p>UserException - on config validation errors.</p></div>
<h3>Ancestors</h3>
<ul class="hlist">
<li>abc.ABC</li>
<li><a title="keboola.component.interface.CommonInterface" href="interface.html#keboola.component.interface.CommonInterface">CommonInterface</a></li>
</ul>
<h3>Static methods</h3>
<dl>
<dt id="keboola.component.base.ComponentBase.set_debug_mode"><code class="name flex">
<span>def <span class="ident">set_debug_mode</span></span>(<span>)</span>
</code></dt>
<dd>
<details class="source">
<summary>
<span>Expand source code</span>
</summary>
<pre><code class="python">@staticmethod
def set_debug_mode():
    &#34;&#34;&#34;
    Set the default logger to verbose mode.
    Returns:

    &#34;&#34;&#34;
    logging.getLogger().setLevel(logging.DEBUG)</code></pre>
</details>
<div class="desc"><p>Set the default logger to verbose mode.
Returns:</p></div>
</dd>
</dl>
<h3>Methods</h3>
<dl>
<dt id="keboola.component.base.ComponentBase.create_out_table_definition_from_schema"><code class="name flex">
<span>def <span class="ident">create_out_table_definition_from_schema</span></span>(<span>self,<br>table_schema: <a title="keboola.component.table_schema.TableSchema" href="table_schema.html#keboola.component.table_schema.TableSchema">TableSchema</a>,<br>is_sliced: bool = False,<br>destination: str = '',<br>incremental: bool = None,<br>enclosure: str = '"',<br>delimiter: str = ',',<br>delete_where: dict = None) ‑> <a title="keboola.component.dao.TableDefinition" href="dao.html#keboola.component.dao.TableDefinition">TableDefinition</a></span>
</code></dt>
<dd>
<details class="source">
<summary>
<span>Expand source code</span>
</summary>
<pre><code class="python">def create_out_table_definition_from_schema(self, table_schema: ts.TableSchema, is_sliced: bool = False,
                                            destination: str = &#39;&#39;, incremental: bool = None,
                                            enclosure: str = &#39;&#34;&#39;, delimiter: str = &#39;,&#39;,
                                            delete_where: dict = None) -&gt; dao.TableDefinition:
    &#34;&#34;&#34;
        Creates an out table definition using a defined table schema.
        This method uses the given table schema and generates metadata of the table. Along with the additional
        key word arguments it creates an out table definition.

        Args:
            table_schema : table of the schema for which a table definition will be created
            is_sliced: True if the full_path points to a folder with sliced tables
            destination: String name of the table in Storage.
            incremental: Set to true to enable incremental loading
            enclosure: str: CSV enclosure, by default &#34;
            delimiter: str: CSV delimiter, by default ,
            delete_where: Dict with settings for deleting rows

        Returns:
            TableDefinition object initialized with all table metadata defined in a schema

    &#34;&#34;&#34;
    if self._expects_legacy_manifest():
        table_metadata = self._generate_table_metadata_legacy(table_schema)
        table_def = self.create_out_table_definition(name=table_schema.csv_name,
                                                     columns=table_schema.field_names,
                                                     primary_key=table_schema.primary_keys,
                                                     table_metadata=table_metadata,
                                                     is_sliced=is_sliced,
                                                     destination=destination,
                                                     incremental=incremental,
                                                     enclosure=enclosure,
                                                     delimiter=delimiter,
                                                     delete_where=delete_where)
    else:
        schema = self._generate_schema_definition(table_schema)

        table_def = self.create_out_table_definition(name=table_schema.csv_name,
                                                     primary_key=table_schema.primary_keys,
                                                     schema=schema,
                                                     is_sliced=is_sliced,
                                                     destination=destination,
                                                     incremental=incremental,
                                                     enclosure=enclosure,
                                                     delimiter=delimiter,
                                                     delete_where=delete_where,
                                                     description=table_schema.description)

    return table_def</code></pre>
</details>
<div class="desc"><p>Creates an out table definition using a defined table schema.
This method uses the given table schema and generates metadata of the table. Along with the additional
key word arguments it creates an out table definition.</p>
<h2 id="args">Args</h2>
<dl>
<dt>table_schema : table of the schema for which a table definition will be created</dt>
<dt><strong><code>is_sliced</code></strong></dt>
<dd>True if the full_path points to a folder with sliced tables</dd>
<dt><strong><code>destination</code></strong></dt>
<dd>String name of the table in Storage.</dd>
<dt><strong><code>incremental</code></strong></dt>
<dd>Set to true to enable incremental loading</dd>
<dt><strong><code>enclosure</code></strong></dt>
<dd>str: CSV enclosure, by default "</dd>
<dt><strong><code>delimiter</code></strong></dt>
<dd>str: CSV delimiter, by default ,</dd>
<dt><strong><code>delete_where</code></strong></dt>
<dd>Dict with settings for deleting rows</dd>
</dl>
<h2 id="returns">Returns</h2>
<p>TableDefinition object initialized with all table metadata defined in a schema</p></div>
</dd>
<dt id="keboola.component.base.ComponentBase.execute_action"><code class="name flex">
<span>def <span class="ident">execute_action</span></span>(<span>self)</span>
</code></dt>
<dd>
<details class="source">
<summary>
<span>Expand source code</span>
</summary>
<pre><code class="python">def execute_action(self):
    &#34;&#34;&#34;
    Executes action defined in the configuration.
    The default action is &#39;run&#39;. See base._SYNC_ACTION_MAPPING
    &#34;&#34;&#34;
    action = self.configuration.action
    if not action:
        logging.warning(&#34;No action defined in the configuration, using the default run action.&#34;)
        action = &#39;run&#39;

    try:
        action = _SYNC_ACTION_MAPPING[action]
        action_method = getattr(self, action)
    except (AttributeError, KeyError) as e:
        raise AttributeError(f&#34;The defined action {action} is not implemented!&#34;) from e
    return action_method()</code></pre>
</details>
<div class="desc"><p>Executes action defined in the configuration.
The default action is 'run'. See base._SYNC_ACTION_MAPPING</p></div>
</dd>
<dt id="keboola.component.base.ComponentBase.get_table_schema_by_name"><code class="name flex">
<span>def <span class="ident">get_table_schema_by_name</span></span>(<span>self, schema_name: str, schema_folder_path: str | None = None) ‑> <a title="keboola.component.table_schema.TableSchema" href="table_schema.html#keboola.component.table_schema.TableSchema">TableSchema</a></span>
</code></dt>
<dd>
<details class="source">
<summary>
<span>Expand source code</span>
</summary>
<pre><code class="python">def get_table_schema_by_name(self, schema_name: str,
                             schema_folder_path: Optional[str] = None) -&gt; ts.TableSchema:
    &#34;&#34;&#34;
        The method finds a table schema JSON based on it&#39;s name in a defined schema_folder_path and generates
        a TableSchema object.

        Args:
            schema_name : name of the schema in the schema_folder_path. e.g. for schema in &#39;src/schemas/order.json&#39;
                          schema_name is &#39;order&#39;
            schema_folder_path : directory path to the schema folder, by default the schema folder is set at
                                 &#39;src/schemas&#39;
        Returns:
            TableSchema object initialized with all available table metadata


    &#34;&#34;&#34;
    if not schema_folder_path:
        schema_folder_path = self.schema_folder_path
    self._validate_schema_folder_path(schema_folder_path)
    schema_dict = self._load_table_schema_dict(schema_name, schema_folder_path)
    return ts.init_table_schema_from_dict(schema_dict)</code></pre>
</details>
<div class="desc"><p>The method finds a table schema JSON based on it's name in a defined schema_folder_path and generates
a TableSchema object.</p>
<h2 id="args">Args</h2>
<p>schema_name : name of the schema in the schema_folder_path. e.g. for schema in 'src/schemas/order.json'
schema_name is 'order'
schema_folder_path : directory path to the schema folder, by default the schema folder is set at
'src/schemas'</p>
<h2 id="returns">Returns</h2>
<p>TableSchema object initialized with all available table metadata</p></div>
</dd>
<dt id="keboola.component.base.ComponentBase.run"><code class="name flex">
<span>def <span class="ident">run</span></span>(<span>self)</span>
</code></dt>
<dd>
<details class="source">
<summary>
<span>Expand source code</span>
</summary>
<pre><code class="python">@abstractmethod
def run(self):
    &#34;&#34;&#34;
    Main execution code of default run action.


    &#34;&#34;&#34;
    pass</code></pre>
</details>
<div class="desc"><p>Main execution code of default run action.</p></div>
</dd>
</dl>
<h3>Inherited members</h3>
<ul class="hlist">
<li><code><b><a title="keboola.component.interface.CommonInterface" href="interface.html#keboola.component.interface.CommonInterface">CommonInterface</a></b></code>:
<ul class="hlist">
<li><code><a title="keboola.component.interface.CommonInterface.create_in_table_definition" href="interface.html#keboola.component.interface.CommonInterface.create_in_table_definition">create_in_table_definition</a></code></li>
<li><code><a title="keboola.component.interface.CommonInterface.create_out_file_definition" href="interface.html#keboola.component.interface.CommonInterface.create_out_file_definition">create_out_file_definition</a></code></li>
<li><code><a title="keboola.component.interface.CommonInterface.create_out_table_definition" href="interface.html#keboola.component.interface.CommonInterface.create_out_table_definition">create_out_table_definition</a></code></li>
<li><code><a title="keboola.component.interface.CommonInterface.get_input_file_definitions_grouped_by_name" href="interface.html#keboola.component.interface.CommonInterface.get_input_file_definitions_grouped_by_name">get_input_file_definitions_grouped_by_name</a></code></li>
<li><code><a title="keboola.component.interface.CommonInterface.get_input_file_definitions_grouped_by_tag_group" href="interface.html#keboola.component.interface.CommonInterface.get_input_file_definitions_grouped_by_tag_group">get_input_file_definitions_grouped_by_tag_group</a></code></li>
<li><code><a title="keboola.component.interface.CommonInterface.get_input_files_definitions" href="interface.html#keboola.component.interface.CommonInterface.get_input_files_definitions">get_input_files_definitions</a></code></li>
<li><code><a title="keboola.component.interface.CommonInterface.get_input_table_definition_by_name" href="interface.html#keboola.component.interface.CommonInterface.get_input_table_definition_by_name">get_input_table_definition_by_name</a></code></li>
<li><code><a title="keboola.component.interface.CommonInterface.get_input_tables_definitions" href="interface.html#keboola.component.interface.CommonInterface.get_input_tables_definitions">get_input_tables_definitions</a></code></li>
<li><code><a title="keboola.component.interface.CommonInterface.get_state_file" href="interface.html#keboola.component.interface.CommonInterface.get_state_file">get_state_file</a></code></li>
<li><code><a title="keboola.component.interface.CommonInterface.is_legacy_queue" href="interface.html#keboola.component.interface.CommonInterface.is_legacy_queue">is_legacy_queue</a></code></li>
<li><code><a title="keboola.component.interface.CommonInterface.set_default_logger" href="interface.html#keboola.component.interface.CommonInterface.set_default_logger">set_default_logger</a></code></li>
<li><code><a title="keboola.component.interface.CommonInterface.set_gelf_logger" href="interface.html#keboola.component.interface.CommonInterface.set_gelf_logger">set_gelf_logger</a></code></li>
<li><code><a title="keboola.component.interface.CommonInterface.validate_configuration_parameters" href="interface.html#keboola.component.interface.CommonInterface.validate_configuration_parameters">validate_configuration_parameters</a></code></li>
<li><code><a title="keboola.component.interface.CommonInterface.validate_image_parameters" href="interface.html#keboola.component.interface.CommonInterface.validate_image_parameters">validate_image_parameters</a></code></li>
<li><code><a title="keboola.component.interface.CommonInterface.write_filedef_manifest" href="interface.html#keboola.component.interface.CommonInterface.write_filedef_manifest">write_filedef_manifest</a></code></li>
<li><code><a title="keboola.component.interface.CommonInterface.write_filedef_manifests" href="interface.html#keboola.component.interface.CommonInterface.write_filedef_manifests">write_filedef_manifests</a></code></li>
<li><code><a title="keboola.component.interface.CommonInterface.write_manifest" href="interface.html#keboola.component.interface.CommonInterface.write_manifest">write_manifest</a></code></li>
<li><code><a title="keboola.component.interface.CommonInterface.write_manifests" href="interface.html#keboola.component.interface.CommonInterface.write_manifests">write_manifests</a></code></li>
<li><code><a title="keboola.component.interface.CommonInterface.write_state_file" href="interface.html#keboola.component.interface.CommonInterface.write_state_file">write_state_file</a></code></li>
<li><code><a title="keboola.component.interface.CommonInterface.write_tabledef_manifest" href="interface.html#keboola.component.interface.CommonInterface.write_tabledef_manifest">write_tabledef_manifest</a></code></li>
<li><code><a title="keboola.component.interface.CommonInterface.write_tabledef_manifests" href="interface.html#keboola.component.interface.CommonInterface.write_tabledef_manifests">write_tabledef_manifests</a></code></li>
</ul>
</li>
</ul>
</dd>
</dl>
</section>
</article>
<nav id="sidebar">
<div class="toc">
<ul></ul>
</div>
<ul id="index">
<li><h3>Super-module</h3>
<ul>
<li><code><a title="keboola.component" href="index.html">keboola.component</a></code></li>
</ul>
</li>
<li><h3><a href="#header-functions">Functions</a></h3>
<ul class="">
<li><code><a title="keboola.component.base.sync_action" href="#keboola.component.base.sync_action">sync_action</a></code></li>
</ul>
</li>
<li><h3><a href="#header-classes">Classes</a></h3>
<ul>
<li>
<h4><code><a title="keboola.component.base.ComponentBase" href="#keboola.component.base.ComponentBase">ComponentBase</a></code></h4>
<ul class="">
<li><code><a title="keboola.component.base.ComponentBase.create_out_table_definition_from_schema" href="#keboola.component.base.ComponentBase.create_out_table_definition_from_schema">create_out_table_definition_from_schema</a></code></li>
<li><code><a title="keboola.component.base.ComponentBase.execute_action" href="#keboola.component.base.ComponentBase.execute_action">execute_action</a></code></li>
<li><code><a title="keboola.component.base.ComponentBase.get_table_schema_by_name" href="#keboola.component.base.ComponentBase.get_table_schema_by_name">get_table_schema_by_name</a></code></li>
<li><code><a title="keboola.component.base.ComponentBase.run" href="#keboola.component.base.ComponentBase.run">run</a></code></li>
<li><code><a title="keboola.component.base.ComponentBase.set_debug_mode" href="#keboola.component.base.ComponentBase.set_debug_mode">set_debug_mode</a></code></li>
</ul>
</li>
</ul>
</li>
</ul>
</nav>
</main>
<footer id="footer">
<p>Generated by <a href="https://pdoc3.github.io/pdoc" title="pdoc: Python API documentation generator"><cite>pdoc</cite> 0.11.5</a>.</p>
</footer>
</body>
</html>


================================================
File: docs/build_docs.bat
================================================
pdoc --html -f -o .\docs\api-html keboola.component


================================================
File: docs/exceptions.html
================================================
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1">
<meta name="generator" content="pdoc3 0.11.5">
<title>keboola.component.exceptions API documentation</title>
<meta name="description" content="">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/10up-sanitize.css/13.0.0/sanitize.min.css" integrity="sha512-y1dtMcuvtTMJc1yPgEqF0ZjQbhnc/bFhyvIyVNb9Zk5mIGtqVaAB1Ttl28su8AvFMOY0EwRbAe+HCLqj6W7/KA==" crossorigin>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/10up-sanitize.css/13.0.0/typography.min.css" integrity="sha512-Y1DYSb995BAfxobCkKepB1BqJJTPrOp3zPL74AWFugHHmmdcvO+C48WLrUOlhGMc0QG7AE3f7gmvvcrmX2fDoA==" crossorigin>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/default.min.css" crossorigin>
<style>:root{--highlight-color:#fe9}.flex{display:flex !important}body{line-height:1.5em}#content{padding:20px}#sidebar{padding:1.5em;overflow:hidden}#sidebar > *:last-child{margin-bottom:2cm}.http-server-breadcrumbs{font-size:130%;margin:0 0 15px 0}#footer{font-size:.75em;padding:5px 30px;border-top:1px solid #ddd;text-align:right}#footer p{margin:0 0 0 1em;display:inline-block}#footer p:last-child{margin-right:30px}h1,h2,h3,h4,h5{font-weight:300}h1{font-size:2.5em;line-height:1.1em}h2{font-size:1.75em;margin:2em 0 .50em 0}h3{font-size:1.4em;margin:1.6em 0 .7em 0}h4{margin:0;font-size:105%}h1:target,h2:target,h3:target,h4:target,h5:target,h6:target{background:var(--highlight-color);padding:.2em 0}a{color:#058;text-decoration:none;transition:color .2s ease-in-out}a:visited{color:#503}a:hover{color:#b62}.title code{font-weight:bold}h2[id^="header-"]{margin-top:2em}.ident{color:#900;font-weight:bold}pre code{font-size:.8em;line-height:1.4em;padding:1em;display:block}code{background:#f3f3f3;font-family:"DejaVu Sans Mono",monospace;padding:1px 4px;overflow-wrap:break-word}h1 code{background:transparent}pre{border-top:1px solid #ccc;border-bottom:1px solid #ccc;margin:1em 0}#http-server-module-list{display:flex;flex-flow:column}#http-server-module-list div{display:flex}#http-server-module-list dt{min-width:10%}#http-server-module-list p{margin-top:0}.toc ul,#index{list-style-type:none;margin:0;padding:0}#index code{background:transparent}#index h3{border-bottom:1px solid #ddd}#index ul{padding:0}#index h4{margin-top:.6em;font-weight:bold}@media (min-width:200ex){#index .two-column{column-count:2}}@media (min-width:300ex){#index .two-column{column-count:3}}dl{margin-bottom:2em}dl dl:last-child{margin-bottom:4em}dd{margin:0 0 1em 3em}#header-classes + dl > dd{margin-bottom:3em}dd dd{margin-left:2em}dd p{margin:10px 0}.name{background:#eee;font-size:.85em;padding:5px 10px;display:inline-block;min-width:40%}.name:hover{background:#e0e0e0}dt:target .name{background:var(--highlight-color)}.name > span:first-child{white-space:nowrap}.name.class > span:nth-child(2){margin-left:.4em}.inherited{color:#999;border-left:5px solid #eee;padding-left:1em}.inheritance em{font-style:normal;font-weight:bold}.desc h2{font-weight:400;font-size:1.25em}.desc h3{font-size:1em}.desc dt code{background:inherit}.source > summary,.git-link-div{color:#666;text-align:right;font-weight:400;font-size:.8em;text-transform:uppercase}.source summary > *{white-space:nowrap;cursor:pointer}.git-link{color:inherit;margin-left:1em}.source pre{max-height:500px;overflow:auto;margin:0}.source pre code{font-size:12px;overflow:visible;min-width:max-content}.hlist{list-style:none}.hlist li{display:inline}.hlist li:after{content:',\2002'}.hlist li:last-child:after{content:none}.hlist .hlist{display:inline;padding-left:1em}img{max-width:100%}td{padding:0 .5em}.admonition{padding:.1em 1em;margin:1em 0}.admonition-title{font-weight:bold}.admonition.note,.admonition.info,.admonition.important{background:#aef}.admonition.todo,.admonition.versionadded,.admonition.tip,.admonition.hint{background:#dfd}.admonition.warning,.admonition.versionchanged,.admonition.deprecated{background:#fd4}.admonition.error,.admonition.danger,.admonition.caution{background:lightpink}</style>
<style media="screen and (min-width: 700px)">@media screen and (min-width:700px){#sidebar{width:30%;height:100vh;overflow:auto;position:sticky;top:0}#content{width:70%;max-width:100ch;padding:3em 4em;border-left:1px solid #ddd}pre code{font-size:1em}.name{font-size:1em}main{display:flex;flex-direction:row-reverse;justify-content:flex-end}.toc ul ul,#index ul ul{padding-left:1em}.toc > ul > li{margin-top:.5em}}</style>
<style media="print">@media print{#sidebar h1{page-break-before:always}.source{display:none}}@media print{*{background:transparent !important;color:#000 !important;box-shadow:none !important;text-shadow:none !important}a[href]:after{content:" (" attr(href) ")";font-size:90%}a[href][title]:after{content:none}abbr[title]:after{content:" (" attr(title) ")"}.ir a:after,a[href^="javascript:"]:after,a[href^="#"]:after{content:""}pre,blockquote{border:1px solid #999;page-break-inside:avoid}thead{display:table-header-group}tr,img{page-break-inside:avoid}img{max-width:100% !important}@page{margin:0.5cm}p,h2,h3{orphans:3;widows:3}h1,h2,h3,h4,h5,h6{page-break-after:avoid}}</style>
<script defer src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js" integrity="sha512-D9gUyxqja7hBtkWpPWGt9wfbfaMGVt9gnyCvYa+jojwwPHLCzUm5i8rpk7vD7wNee9bA35eYIjobYPaQuKS1MQ==" crossorigin></script>
<script>window.addEventListener('DOMContentLoaded', () => {
hljs.configure({languages: ['bash', 'css', 'diff', 'graphql', 'ini', 'javascript', 'json', 'plaintext', 'python', 'python-repl', 'rust', 'shell', 'sql', 'typescript', 'xml', 'yaml']});
hljs.highlightAll();
/* Collapse source docstrings */
setTimeout(() => {
[...document.querySelectorAll('.hljs.language-python > .hljs-string')]
.filter(el => el.innerHTML.length > 200 && ['"""', "'''"].includes(el.innerHTML.substring(0, 3)))
.forEach(el => {
let d = document.createElement('details');
d.classList.add('hljs-string');
d.innerHTML = '<summary>"""</summary>' + el.innerHTML.substring(3);
el.replaceWith(d);
});
}, 100);
})</script>
</head>
<body>
<main>
<article id="content">
<header>
<h1 class="title">Module <code>keboola.component.exceptions</code></h1>
</header>
<section id="section-intro">
</section>
<section>
</section>
<section>
</section>
<section>
</section>
<section>
<h2 class="section-title" id="header-classes">Classes</h2>
<dl>
<dt id="keboola.component.exceptions.UserException"><code class="flex name class">
<span>class <span class="ident">UserException</span></span>
<span>(</span><span>*args, **kwargs)</span>
</code></dt>
<dd>
<details class="source">
<summary>
<span>Expand source code</span>
</summary>
<pre><code class="python">class UserException(Exception):
    pass</code></pre>
</details>
<div class="desc"><p>Common base class for all non-exit exceptions.</p></div>
<h3>Ancestors</h3>
<ul class="hlist">
<li>builtins.Exception</li>
<li>builtins.BaseException</li>
</ul>
</dd>
</dl>
</section>
</article>
<nav id="sidebar">
<div class="toc">
<ul></ul>
</div>
<ul id="index">
<li><h3>Super-module</h3>
<ul>
<li><code><a title="keboola.component" href="index.html">keboola.component</a></code></li>
</ul>
</li>
<li><h3><a href="#header-classes">Classes</a></h3>
<ul>
<li>
<h4><code><a title="keboola.component.exceptions.UserException" href="#keboola.component.exceptions.UserException">UserException</a></code></h4>
</li>
</ul>
</li>
</ul>
</nav>
</main>
<footer id="footer">
<p>Generated by <a href="https://pdoc3.github.io/pdoc" title="pdoc: Python API documentation generator"><cite>pdoc</cite> 0.11.5</a>.</p>
</footer>
</body>
</html>


================================================
File: docs/index.html
================================================
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1">
<meta name="generator" content="pdoc3 0.11.5">
<title>keboola.component API documentation</title>
<meta name="description" content="">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/10up-sanitize.css/13.0.0/sanitize.min.css" integrity="sha512-y1dtMcuvtTMJc1yPgEqF0ZjQbhnc/bFhyvIyVNb9Zk5mIGtqVaAB1Ttl28su8AvFMOY0EwRbAe+HCLqj6W7/KA==" crossorigin>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/10up-sanitize.css/13.0.0/typography.min.css" integrity="sha512-Y1DYSb995BAfxobCkKepB1BqJJTPrOp3zPL74AWFugHHmmdcvO+C48WLrUOlhGMc0QG7AE3f7gmvvcrmX2fDoA==" crossorigin>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/default.min.css" crossorigin>
<style>:root{--highlight-color:#fe9}.flex{display:flex !important}body{line-height:1.5em}#content{padding:20px}#sidebar{padding:1.5em;overflow:hidden}#sidebar > *:last-child{margin-bottom:2cm}.http-server-breadcrumbs{font-size:130%;margin:0 0 15px 0}#footer{font-size:.75em;padding:5px 30px;border-top:1px solid #ddd;text-align:right}#footer p{margin:0 0 0 1em;display:inline-block}#footer p:last-child{margin-right:30px}h1,h2,h3,h4,h5{font-weight:300}h1{font-size:2.5em;line-height:1.1em}h2{font-size:1.75em;margin:2em 0 .50em 0}h3{font-size:1.4em;margin:1.6em 0 .7em 0}h4{margin:0;font-size:105%}h1:target,h2:target,h3:target,h4:target,h5:target,h6:target{background:var(--highlight-color);padding:.2em 0}a{color:#058;text-decoration:none;transition:color .2s ease-in-out}a:visited{color:#503}a:hover{color:#b62}.title code{font-weight:bold}h2[id^="header-"]{margin-top:2em}.ident{color:#900;font-weight:bold}pre code{font-size:.8em;line-height:1.4em;padding:1em;display:block}code{background:#f3f3f3;font-family:"DejaVu Sans Mono",monospace;padding:1px 4px;overflow-wrap:break-word}h1 code{background:transparent}pre{border-top:1px solid #ccc;border-bottom:1px solid #ccc;margin:1em 0}#http-server-module-list{display:flex;flex-flow:column}#http-server-module-list div{display:flex}#http-server-module-list dt{min-width:10%}#http-server-module-list p{margin-top:0}.toc ul,#index{list-style-type:none;margin:0;padding:0}#index code{background:transparent}#index h3{border-bottom:1px solid #ddd}#index ul{padding:0}#index h4{margin-top:.6em;font-weight:bold}@media (min-width:200ex){#index .two-column{column-count:2}}@media (min-width:300ex){#index .two-column{column-count:3}}dl{margin-bottom:2em}dl dl:last-child{margin-bottom:4em}dd{margin:0 0 1em 3em}#header-classes + dl > dd{margin-bottom:3em}dd dd{margin-left:2em}dd p{margin:10px 0}.name{background:#eee;font-size:.85em;padding:5px 10px;display:inline-block;min-width:40%}.name:hover{background:#e0e0e0}dt:target .name{background:var(--highlight-color)}.name > span:first-child{white-space:nowrap}.name.class > span:nth-child(2){margin-left:.4em}.inherited{color:#999;border-left:5px solid #eee;padding-left:1em}.inheritance em{font-style:normal;font-weight:bold}.desc h2{font-weight:400;font-size:1.25em}.desc h3{font-size:1em}.desc dt code{background:inherit}.source > summary,.git-link-div{color:#666;text-align:right;font-weight:400;font-size:.8em;text-transform:uppercase}.source summary > *{white-space:nowrap;cursor:pointer}.git-link{color:inherit;margin-left:1em}.source pre{max-height:500px;overflow:auto;margin:0}.source pre code{font-size:12px;overflow:visible;min-width:max-content}.hlist{list-style:none}.hlist li{display:inline}.hlist li:after{content:',\2002'}.hlist li:last-child:after{content:none}.hlist .hlist{display:inline;padding-left:1em}img{max-width:100%}td{padding:0 .5em}.admonition{padding:.1em 1em;margin:1em 0}.admonition-title{font-weight:bold}.admonition.note,.admonition.info,.admonition.important{background:#aef}.admonition.todo,.admonition.versionadded,.admonition.tip,.admonition.hint{background:#dfd}.admonition.warning,.admonition.versionchanged,.admonition.deprecated{background:#fd4}.admonition.error,.admonition.danger,.admonition.caution{background:lightpink}</style>
<style media="screen and (min-width: 700px)">@media screen and (min-width:700px){#sidebar{width:30%;height:100vh;overflow:auto;position:sticky;top:0}#content{width:70%;max-width:100ch;padding:3em 4em;border-left:1px solid #ddd}pre code{font-size:1em}.name{font-size:1em}main{display:flex;flex-direction:row-reverse;justify-content:flex-end}.toc ul ul,#index ul ul{padding-left:1em}.toc > ul > li{margin-top:.5em}}</style>
<style media="print">@media print{#sidebar h1{page-break-before:always}.source{display:none}}@media print{*{background:transparent !important;color:#000 !important;box-shadow:none !important;text-shadow:none !important}a[href]:after{content:" (" attr(href) ")";font-size:90%}a[href][title]:after{content:none}abbr[title]:after{content:" (" attr(title) ")"}.ir a:after,a[href^="javascript:"]:after,a[href^="#"]:after{content:""}pre,blockquote{border:1px solid #999;page-break-inside:avoid}thead{display:table-header-group}tr,img{page-break-inside:avoid}img{max-width:100% !important}@page{margin:0.5cm}p,h2,h3{orphans:3;widows:3}h1,h2,h3,h4,h5,h6{page-break-after:avoid}}</style>
<script defer src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js" integrity="sha512-D9gUyxqja7hBtkWpPWGt9wfbfaMGVt9gnyCvYa+jojwwPHLCzUm5i8rpk7vD7wNee9bA35eYIjobYPaQuKS1MQ==" crossorigin></script>
<script>window.addEventListener('DOMContentLoaded', () => {
hljs.configure({languages: ['bash', 'css', 'diff', 'graphql', 'ini', 'javascript', 'json', 'plaintext', 'python', 'python-repl', 'rust', 'shell', 'sql', 'typescript', 'xml', 'yaml']});
hljs.highlightAll();
/* Collapse source docstrings */
setTimeout(() => {
[...document.querySelectorAll('.hljs.language-python > .hljs-string')]
.filter(el => el.innerHTML.length > 200 && ['"""', "'''"].includes(el.innerHTML.substring(0, 3)))
.forEach(el => {
let d = document.createElement('details');
d.classList.add('hljs-string');
d.innerHTML = '<summary>"""</summary>' + el.innerHTML.substring(3);
el.replaceWith(d);
});
}, 100);
})</script>
</head>
<body>
<main>
<article id="content">
<header>
<h1 class="title">Package <code>keboola.component</code></h1>
</header>
<section id="section-intro">
</section>
<section>
<h2 class="section-title" id="header-submodules">Sub-modules</h2>
<dl>
<dt><code class="name"><a title="keboola.component.base" href="base.html">keboola.component.base</a></code></dt>
<dd>
<div class="desc"></div>
</dd>
<dt><code class="name"><a title="keboola.component.dao" href="dao.html">keboola.component.dao</a></code></dt>
<dd>
<div class="desc"></div>
</dd>
<dt><code class="name"><a title="keboola.component.exceptions" href="exceptions.html">keboola.component.exceptions</a></code></dt>
<dd>
<div class="desc"></div>
</dd>
<dt><code class="name"><a title="keboola.component.interface" href="interface.html">keboola.component.interface</a></code></dt>
<dd>
<div class="desc"></div>
</dd>
<dt><code class="name"><a title="keboola.component.sync_actions" href="sync_actions.html">keboola.component.sync_actions</a></code></dt>
<dd>
<div class="desc"><p>Module containing helpers to work with Sync Actions.
For more info see <a href="https://developers.keboola.com/extend/common-interface/actions/">Sync actions</a>.</p></div>
</dd>
<dt><code class="name"><a title="keboola.component.table_schema" href="table_schema.html">keboola.component.table_schema</a></code></dt>
<dd>
<div class="desc"></div>
</dd>
</dl>
</section>
<section>
</section>
<section>
</section>
<section>
</section>
</article>
<nav id="sidebar">
<div class="toc">
<ul></ul>
</div>
<ul id="index">
<li><h3><a href="#header-submodules">Sub-modules</a></h3>
<ul>
<li><code><a title="keboola.component.base" href="base.html">keboola.component.base</a></code></li>
<li><code><a title="keboola.component.dao" href="dao.html">keboola.component.dao</a></code></li>
<li><code><a title="keboola.component.exceptions" href="exceptions.html">keboola.component.exceptions</a></code></li>
<li><code><a title="keboola.component.interface" href="interface.html">keboola.component.interface</a></code></li>
<li><code><a title="keboola.component.sync_actions" href="sync_actions.html">keboola.component.sync_actions</a></code></li>
<li><code><a title="keboola.component.table_schema" href="table_schema.html">keboola.component.table_schema</a></code></li>
</ul>
</li>
</ul>
</nav>
</main>
<footer id="footer">
<p>Generated by <a href="https://pdoc3.github.io/pdoc" title="pdoc: Python API documentation generator"><cite>pdoc</cite> 0.11.5</a>.</p>
</footer>
</body>
</html>


================================================
File: src/keboola/component/__init__.py
================================================
from .base import ComponentBase  # noqa F401
from .exceptions import UserException  # noqa F401
from .interface import CommonInterface, Configuration  # noqa F401
# __all__ = ["base", "interface", "dao"]


================================================
File: src/keboola/component/base.py
================================================
import contextlib
import json
import logging
import os
import sys
from abc import ABC
from abc import abstractmethod
from functools import wraps
from pathlib import Path
from typing import Dict
from typing import Union, List, Optional

from . import dao
from . import table_schema as ts
from .interface import CommonInterface
from .sync_actions import SyncActionResult, process_sync_action_result

KEY_DEBUG = 'debug'

# Mapping of sync actions "action name":"method_name"
_SYNC_ACTION_MAPPING = {"run": "run"}


def sync_action(action_name: str):
    """

       Decorator for marking sync actions method.
       For more info see [Sync actions](https://developers.keboola.com/extend/common-interface/actions/).

        Usage:

    ```
    import csv
    import logging

    from keboola.component.base import ComponentBase, sync_action

    class Component(ComponentBase):

        def run(self):
            '''
            Main execution code
            '''
            pass

        # sync action that is executed when configuration.json "action":"testConnection" parameter is present.
        @sync_action('testConnection')
        def test_connection(self):
            connection = self.configuration.parameters.get('test_connection')
            if connection == "fail":
                raise UserException("failed")
            elif connection == "succeed":
                # this is ignored when run as sync action.
                logging.info("succeed")


    if __name__ == "__main__":
        try:
            comp = Component()
            # this triggers the run method by default and is controlled by the configuration.action parameter
            comp.execute_action()
        except UserException as exc:
            logging.exception(exc)
            exit(1)
        except Exception as exc:
            logging.exception(exc)
            exit(2)
    ```

    Args:
        action_name: Name of the action registered in Developer Portal

    Returns:

    """

    def decorate(func):
        # to allow pythonic names / action name mapping
        if action_name == 'run':
            raise ValueError('Sync action name "run" is reserved base action! Use different name.')
        _SYNC_ACTION_MAPPING[action_name] = func.__name__

        @wraps(func)
        def action_wrapper(self, *args, **kwargs):
            # override when run as sync action, because it could be also called normally within run
            is_sync_action = self.configuration.action != 'run'

            # do operations with func
            if is_sync_action:
                stdout_redirect = None
                # mute logging just in case
                logging.getLogger().setLevel(logging.FATAL)
            else:
                stdout_redirect = sys.stdout

            try:
                # when success, only supported syntax can be in output / log, so redirect stdout before.
                with contextlib.redirect_stdout(stdout_redirect):
                    result: Union[None, SyncActionResult, List[SyncActionResult]] = func(self, *args, **kwargs)

                if is_sync_action:
                    # sync action expects valid JSON in stdout on success.
                    result_str = process_sync_action_result(result)
                    sys.stdout.write(result_str)

                return result

            except Exception as e:
                if is_sync_action:
                    # sync actions expect stderr
                    sys.stderr.write(str(e))
                    exit(1)
                else:
                    raise e

        return action_wrapper

    return decorate


class ComponentBase(ABC, CommonInterface):
    def __init__(self, data_path_override: Optional[str] = None,
                 schema_path_override: Optional[str] = None,
                 required_parameters: Optional[list] = None,
                 required_image_parameters: Optional[list] = None):
        """
        Base class for general Python components. Initializes the CommonInterface
        and performs configuration validation.

        For easier debugging the data folder is picked up by default from `../data` path,
        relative to working directory.

        If `debug` parameter is present in the `config.json`, the default logger is set to verbose DEBUG mode.

        It executes [Sync actions](https://developers.keboola.com/extend/common-interface/actions/)
        when "action" is defined in the configuration.json based on the @action_decorator.

        Args:
            data_path_override:
                optional path to data folder that overrides the default behaviour (`KBC_DATADIR` environment variable).
                May be also specified by '-d' or '--data' commandline argument
            required_parameters:
                Optional[dict]: DEPRECATED required configuration parameters, if filled in,
                validation is done at constructor level
            required_image_parameters:
                Optional[dict]: DEPRECATED required image parameters, if filled in,
                validation is done at constructor level
        Raises:
            UserException - on config validation errors.
        """

        # for easier local project setup
        super().__init__(data_folder_path=self._get_data_folder_override_path(data_path_override))

        if required_parameters:
            self.validate_configuration_parameters(required_parameters)
        if required_image_parameters:
            self.validate_image_parameters(required_image_parameters)

        if self.configuration.parameters.get(KEY_DEBUG):
            self.set_debug_mode()

        self.schema_folder_path = self._get_schema_folder_path(schema_path_override)

    @staticmethod
    def _get_default_data_path() -> str:
        """
        Returns default data_path, by default `../data` is used, relative to working directory.
        This helps with local development.

        Returns:

        """
        return Path(os.getcwd()).resolve().parent.joinpath('data').as_posix()

    def _get_data_folder_override_path(self, data_path_override: str = None) -> str:
        """
        Returns overridden value of the data_folder_path in case the data_path_override variable
        or `KBC_DATADIR` environment variable is defined. The `data_path_override` variable takes precendence.

        Returns null if override is not in place.

        Args:
            data_path_override:

        Returns:

        """
        data_folder_path = None
        if data_path_override:
            data_folder_path = data_path_override
        elif not os.environ.get('KBC_DATADIR'):
            data_folder_path = self._get_default_data_path()
        return data_folder_path

    def _get_schema_folder_path(self, schema_path_override: str = None) -> str:
        """
            Returns value of the schema_folder_path in case the schema_path_override variable is provided or
            the default schema_folder_path is found.

        """
        return schema_path_override or self._get_default_schema_folder_path()

    @staticmethod
    def _get_default_schema_folder_path() -> Optional[str]:
        """
             Finds the default schema_folder_path if it exists.

        """
        container_schema_dir = Path("./src/schemas/").absolute().as_posix()
        local_schema_dir = Path("./schemas").absolute().as_posix()
        if os.path.isdir(container_schema_dir):
            return container_schema_dir
        elif os.path.isdir(local_schema_dir):
            return local_schema_dir

    @staticmethod
    def set_debug_mode():
        """
        Set the default logger to verbose mode.
        Returns:

        """
        logging.getLogger().setLevel(logging.DEBUG)

    @abstractmethod
    def run(self):
        """
        Main execution code of default run action.


        """
        pass

    def execute_action(self):
        """
        Executes action defined in the configuration.
        The default action is 'run'. See base._SYNC_ACTION_MAPPING
        """
        action = self.configuration.action
        if not action:
            logging.warning("No action defined in the configuration, using the default run action.")
            action = 'run'

        try:
            action = _SYNC_ACTION_MAPPING[action]
            action_method = getattr(self, action)
        except (AttributeError, KeyError) as e:
            raise AttributeError(f"The defined action {action} is not implemented!") from e
        return action_method()

    def _generate_table_metadata_legacy(self, table_schema: ts.TableSchema) -> dao.TableMetadata:
        """
            Generates a TableMetadata object for the table definition using a TableSchema object.

        """
        table_metadata = dao.TableMetadata()
        if table_schema.description:
            table_metadata.add_table_description(table_schema.description)
        table_metadata.add_column_descriptions({field.name: field.description for field in table_schema.fields})
        table_metadata = self._add_field_data_types_to_table_metadata(table_schema, table_metadata)
        return table_metadata

    def create_out_table_definition_from_schema(self, table_schema: ts.TableSchema, is_sliced: bool = False,
                                                destination: str = '', incremental: bool = None,
                                                enclosure: str = '"', delimiter: str = ',',
                                                delete_where: dict = None) -> dao.TableDefinition:
        """
            Creates an out table definition using a defined table schema.
            This method uses the given table schema and generates metadata of the table. Along with the additional
            key word arguments it creates an out table definition.

            Args:
                table_schema : table of the schema for which a table definition will be created
                is_sliced: True if the full_path points to a folder with sliced tables
                destination: String name of the table in Storage.
                incremental: Set to true to enable incremental loading
                enclosure: str: CSV enclosure, by default "
                delimiter: str: CSV delimiter, by default ,
                delete_where: Dict with settings for deleting rows

            Returns:
                TableDefinition object initialized with all table metadata defined in a schema

        """
        if self._expects_legacy_manifest():
            table_metadata = self._generate_table_metadata_legacy(table_schema)
            table_def = self.create_out_table_definition(name=table_schema.csv_name,
                                                         columns=table_schema.field_names,
                                                         primary_key=table_schema.primary_keys,
                                                         table_metadata=table_metadata,
                                                         is_sliced=is_sliced,
                                                         destination=destination,
                                                         incremental=incremental,
                                                         enclosure=enclosure,
                                                         delimiter=delimiter,
                                                         delete_where=delete_where)
        else:
            schema = self._generate_schema_definition(table_schema)

            table_def = self.create_out_table_definition(name=table_schema.csv_name,
                                                         primary_key=table_schema.primary_keys,
                                                         schema=schema,
                                                         is_sliced=is_sliced,
                                                         destination=destination,
                                                         incremental=incremental,
                                                         enclosure=enclosure,
                                                         delimiter=delimiter,
                                                         delete_where=delete_where,
                                                         description=table_schema.description)

        return table_def

    def get_table_schema_by_name(self, schema_name: str,
                                 schema_folder_path: Optional[str] = None) -> ts.TableSchema:
        """
            The method finds a table schema JSON based on it's name in a defined schema_folder_path and generates
            a TableSchema object.

            Args:
                schema_name : name of the schema in the schema_folder_path. e.g. for schema in 'src/schemas/order.json'
                              schema_name is 'order'
                schema_folder_path : directory path to the schema folder, by default the schema folder is set at
                                     'src/schemas'
            Returns:
                TableSchema object initialized with all available table metadata


        """
        if not schema_folder_path:
            schema_folder_path = self.schema_folder_path
        self._validate_schema_folder_path(schema_folder_path)
        schema_dict = self._load_table_schema_dict(schema_name, schema_folder_path)
        return ts.init_table_schema_from_dict(schema_dict)

    @staticmethod
    def _load_table_schema_dict(schema_name: str, schema_folder_path: str) -> Dict:
        try:
            with open(os.path.join(schema_folder_path, f"{schema_name}.json"), 'r') as schema_file:
                json_schema = json.loads(schema_file.read())
        except FileNotFoundError as file_err:
            raise FileNotFoundError(
                f"Schema for corresponding schema name : {schema_name} is not found in the schema directory. "
                f"Make sure that '{schema_name}'.json "
                f"exists in the directory '{schema_folder_path}'") from file_err
        return json_schema

    @staticmethod
    def _validate_schema_folder_path(schema_folder_path: str):
        if not schema_folder_path or not os.path.isdir(schema_folder_path):
            raise FileNotFoundError("A schema folder path must be defined in order to create a out table definition "
                                    "from a schema. If a schema folder path is not defined, the schemas folder must be"
                                    " located in the 'src' directory of a component : src/schemas")

    def _generate_schema_definition(self, table_schema: ts.TableSchema) -> Dict[str, dao.ColumnDefinition]:
        """
            Generates a TableMetadata object for the table definition using a TableSchema object.

        """
        column_definitions = {}
        for field in table_schema.fields:
            if field.base_type:
                data_types = dao.BaseType(field.base_type,
                                          length=field.length,
                                          default=field.default)
            else:
                data_types = dao.BaseType()
            column_definitions[field.name] = dao.ColumnDefinition(data_types=data_types,
                                                                  nullable=field.nullable,
                                                                  description=field.description)

        return column_definitions

    @staticmethod
    def _add_field_data_types_to_table_metadata(table_schema: ts.TableSchema,
                                                table_metadata: dao.TableMetadata) -> dao.TableMetadata:
        """
            Adds data types of all fields specified in a TableSchema object to a given TableMetadata object

        """
        for field in table_schema.fields:
            if field.base_type:
                table_metadata.add_column_data_type(field.name,
                                                    data_type=field.base_type,
                                                    nullable=field.nullable,
                                                    length=field.length,
                                                    default=field.default)
        return table_metadata


================================================
File: src/keboola/component/exceptions.py
================================================
class UserException(Exception):
    pass


================================================
File: src/keboola/component/sync_actions.py
================================================
"""
Module containing helpers to work with Sync Actions.
For more info see [Sync actions](https://developers.keboola.com/extend/common-interface/actions/).
"""

import dataclasses
import json
from abc import ABC
from dataclasses import dataclass
from enum import Enum
from typing import Union, List, Optional


@dataclass
class SyncActionResult(ABC):
    """
    Abstract base for sync action results
    """

    def __post_init__(self):
        """
         Right now the status is always success.
        In other cases exception is thrown and printed via stderr.

        """
        self.status = 'success'

    def __str__(self):
        # the None values / attributes will be ignored.
        dict_obj = dataclasses.asdict(self, dict_factory=lambda x: {k: v for (k, v) in x if
                                                                    v is not None})
        # hack to add default status
        if self.status:
            dict_obj['status'] = self.status
        return json.dumps(dict_obj)


# str base so it is serialised properly
class MessageType(str, Enum):
    SUCCESS = "success"
    INFO = "info"
    WARNING = "warning"
    DANGER = "danger"


@dataclass
class ValidationResult(SyncActionResult):
    message: str
    type: MessageType = MessageType.INFO


@dataclass
class SelectElement(SyncActionResult):
    """
    For select elements. Label is optional and value will be used
    """
    value: str
    label: Optional[str] = None

    def __post_init__(self):
        self.label = self.label or self.value
        # special case of element SyncActionResult with no status. (all other must contain {"status":true}
        self.status = None


def process_sync_action_result(result: Union[None, List[dict], dict, SyncActionResult, List[SyncActionResult]]) -> str:
    """
    Converts Sync Action result into valid string (expected by Sync Action).
    Args:
        result: Union[None, SyncActionResult, List[SyncActionResult]]

    Returns: str: Valid string representation of the Sync action result.

    """
    if isinstance(result, SyncActionResult):
        result_str = str(result)
    elif isinstance(result, list):
        result_str = f'[{", ".join([json.dumps(r) if isinstance(r, dict) else str(r) for r in result])}]'
    elif result is None:
        result_str = json.dumps({'status': 'success'})
    elif isinstance(result, dict):
        # for backward compatibility
        result_str = json.dumps(result)
    else:
        raise ValueError("Result of sync action must be either None or an instance of SyncActionResult "
                         "or a List[SyncActionResult]")
    return result_str


================================================
File: src/keboola/component/table_schema.py
================================================
from typing import List, Dict
from typing import Optional, Union
from keboola.component.dao import SupportedDataTypes
from dataclasses import dataclass


@dataclass
class FieldSchema:
    """
    Defines the name and type specifications of a single field in a table
    """
    name: str
    base_type: Optional[Union[SupportedDataTypes, str]] = None
    description: Optional[str] = None
    nullable: bool = False
    length: Optional[str] = None
    default: Optional[str] = None


@dataclass
class TableSchema:
    """
    TableSchema class is used to define the schema and metadata of a table.
    """
    name: str
    fields: List[FieldSchema]
    primary_keys: Optional[List[str]] = None
    parent_tables: Optional[List[str]] = None
    description: Optional[str] = None

    @property
    def field_names(self) -> List[str]:
        return [column.name for column in self.fields]

    @property
    def csv_name(self) -> str:
        return f"{self.name}.csv"

    def add_field(self, new_field: FieldSchema) -> None:
        """
        Adds extra field to the tableschema.
        Args:
            new_field:  FieldSchema to add to the list of fields

        """
        self.fields.append(new_field)


def init_table_schema_from_dict(json_table_schema: Dict) -> TableSchema:
    """
    Function to initialize a Table Schema from a dictionary.
    Example of the json_table_schema structure:
    {
      "name": "product",
      "description": "this table holds data on products",
      "parent_tables": [],
      "primary_keys": [
        "id"
      ],
      "fields": [
        {
          "name": "id",
          "base_type": "string",
          "description": "ID of the product",
          "length": "100",
          "nullable": false
        },
        {
          "name": "name",
          "base_type": "string",
          "description": "Plain-text name of the product",
          "length": "1000",
          "default": "Default Name"
        }
      ]
    }
    """
    try:
        json_table_schema["fields"] = [FieldSchema(**field) for field in json_table_schema["fields"]]
    except TypeError as type_error:
        raise KeyError(
            f"When creating the table schema the definition of columns failed : {type_error}") from type_error
    try:
        ts = TableSchema(**json_table_schema)
    except TypeError as type_error:
        raise KeyError(
            f"When creating the table schema the definition of the table failed : {type_error}") from type_error
    return ts


================================================
File: tests/__init__.py
================================================
import pathlib
import sys

# just in case include in path
sys.path.insert(0, str(pathlib.Path(__file__).resolve().parents[1].joinpath('src')))


================================================
File: tests/test_base.py
================================================
import os
import unittest
from io import StringIO
from unittest.mock import patch

from keboola.component import UserException
from keboola.component.base import ComponentBase, sync_action
from keboola.component.sync_actions import SelectElement


class MockComponent(ComponentBase):
    def run(self):
        return 'run_executed'


class MockComponentFail(ComponentBase):
    def run(self):
        raise UserException("Failed")


class TestCommonInterface(unittest.TestCase):

    def setUp(self):
        path = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                            'data_examples', 'data1')
        os.environ["KBC_DATADIR"] = path

    def test_default_arguments_pass(self):
        MockComponent()

    def test_missing_config_parameters_fail(self):
        with self.assertRaises(UserException):
            MockComponent(required_parameters=['missing'])

    def test_missing_image_parameters_fail(self):
        with self.assertRaises(UserException):
            c = MockComponent(required_image_parameters=['missing'])
            c.execute_action()

    def test_missing_action_fail(self):
        path = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                            'data_examples', 'data_custom_action')
        os.environ["KBC_DATADIR"] = path
        with self.assertRaises(AttributeError):
            MockComponent().execute_action()

    def test_run_action_passes(self):
        self.assertEqual(MockComponent().execute_action(), 'run_executed')

    def test_custom_action_passes(self):
        path = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                            'data_examples', 'data_custom_action')
        os.environ["KBC_DATADIR"] = path

        class CustomActionComponent(ComponentBase):
            def run(self):
                pass

            @sync_action('custom_action')
            def test_action(self):
                return [SelectElement("test")]

        self.assertEqual(CustomActionComponent().execute_action(), [SelectElement("test")])

    def test_run_action_fails_with_user_error(self):
        with self.assertRaises(UserException):
            MockComponentFail().execute_action()

    def test_system_action_name_fail(self):
        with self.assertRaises(ValueError):
            class ComponentInvalidActionName(ComponentBase):
                def run(self):
                    pass

                @sync_action('run')
                def test_action(self):
                    pass

            path = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                                'data_examples', 'data_custom_action')
            os.environ["KBC_DATADIR"] = path

            ComponentInvalidActionName().execute_action()

    @patch('sys.stdout', new_callable=StringIO)
    def test_sync_action_prints_valid_message(self, stdout):
        path = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                            'data_examples', 'data_custom_action')
        os.environ["KBC_DATADIR"] = path

        class CustomActionComponent(ComponentBase):
            def run(self):
                pass

            @sync_action('custom_action')
            def get_columns(self):
                return [SelectElement("value_a", "label_a"),
                        SelectElement("value_b")
                        ]

        CustomActionComponent().execute_action()
        expected = '[{"value": "value_a", "label": "label_a"}, {"value": "value_b", "label": "value_b"}]'
        self.assertEqual(stdout.getvalue(), expected)


if __name__ == '__main__':
    unittest.main()


================================================
File: tests/test_dao.py
================================================
import os
import tempfile
import unittest

from keboola.component import dao
from keboola.component.dao import *


class TestTableMetadata(unittest.TestCase):

    def test_full_column_datatypes_for_manifest_is_valid(self):
        column_metadata_full = {"col_1": [{
            "key": "KBC.datatype.basetype",
            "value": "NUMERIC"
        }, {
            "key": "KBC.datatype.nullable",
            "value": True
        }, {
            "key": "KBC.datatype.length",
            "value": "39,8"
        }, {
            "key": "KBC.datatype.default",
            "value": 0
        }
        ], "col_2": [{
            "key": "KBC.datatype.basetype",
            "value": "STRING"
        }, {
            "key": "KBC.datatype.nullable",
            "value": False
        }, {
            "key": "KBC.datatype.length",
            "value": "4000"
        }
        ]}
        tmetadata = TableMetadata()
        # col 1
        tmetadata.add_column_data_type("col_1", data_type='NUMERIC', nullable=True, length='39,8', default=0)
        # col 2
        tmetadata.add_column_data_type("col_2", data_type='STRING', nullable=False, length='4000')

        self.assertDictEqual(tmetadata.get_column_metadata_for_manifest(), column_metadata_full)

    def test_multi_column_datatypes_for_manifest_is_valid(self):
        column_metadata_full = {"col_1": [{
            "key": "KBC.datatype.basetype",
            "value": "NUMERIC"
        },
            {
                "key": "KBC.datatype.nullable",
                "value": False
            }
        ], "col_2": [{
            "key": "KBC.datatype.basetype",
            "value": "STRING"
        },
            {
                "key": "KBC.datatype.nullable",
                "value": False
            }
        ]}

        tmetadata = TableMetadata()
        tmetadata.add_column_data_types({"col_1": "NUMERIC", "col_2": "STRING"})

        self.assertDictEqual(tmetadata.get_column_metadata_for_manifest(), column_metadata_full)

    def test_datatype_accepts_enum_for_manifest_valid(self):
        column_metadata_full = {"col_1": [{
            "key": "KBC.datatype.basetype",
            "value": "NUMERIC"
        },
            {
                "key": "KBC.datatype.nullable",
                "value": False
            }
        ], "col_2": [{
            "key": "KBC.datatype.basetype",
            "value": "STRING"
        },
            {
                "key": "KBC.datatype.nullable",
                "value": False
            }
        ]}

        tmetadata = TableMetadata()
        tmetadata.add_column_data_types({"col_1": SupportedDataTypes.NUMERIC, "col_2": SupportedDataTypes.STRING})

        self.assertDictEqual(tmetadata.get_column_metadata_for_manifest(), column_metadata_full)

    def test_invalid_datatype_fails(self):
        tmetadata = TableMetadata()
        with self.assertRaises(ValueError) as ctx:
            tmetadata.add_column_data_type('col', 'invalid type')

    def test_table_description_metadata_for_legacy_manifest_is_valid(self):
        tmetadata = TableMetadata()

        table_metadata = [{
            "key": "KBC.description",
            "value": "Description of table"
        },
            {
                "key": "custom_key",
                "value": "custom_value"
            }
        ]
        tmetadata.add_table_description("Description of table")
        tmetadata.add_table_metadata("custom_key", "custom_value")
        self.assertEqual(tmetadata.get_table_metadata_for_manifest(legacy_manifest=True), table_metadata)

    def test_table_description_metadata_for_manifest_is_valid(self):
        tmetadata = TableMetadata()

        table_metadata = {"KBC.description": "Description of table",
                          "custom_key": "custom_value"
                          }

        tmetadata.add_table_description("Description of table")
        tmetadata.add_table_metadata("custom_key", "custom_value")
        self.assertEqual(tmetadata.get_table_metadata_for_manifest(legacy_manifest=False), table_metadata)

    def test_build_from_manifest_valid(self):
        raw_manifest = {
            'destination': 'some-destination',
            'columns': ['foo', 'bar'],
            'primary_key': ['foo'],
            'incremental': True,
            'metadata': [{'key': 'bar', 'value': 'kochba'}],
            'column_metadata': {'bar': [{'key': 'foo', 'value': 'gogo'}]},
            'delete_where_column': 'lilly',
            'delete_where_values': ['a', 'b'],
            'delete_where_operator': 'eq'
        }

        table_metadata = TableMetadata(raw_manifest)

        expected_tmetadata = TableMetadata()

        expected_tmetadata.add_table_metadata("bar", "kochba")
        expected_tmetadata.add_column_metadata("bar", "foo", "gogo")

        self.assertEqual(table_metadata.column_metadata, expected_tmetadata.column_metadata)
        self.assertEqual(table_metadata.table_metadata, expected_tmetadata.table_metadata)

    def test_build_manifest_legacy_none_metadata_skipped(self):
        table_def = TableDefinition("testDef", "somepath", is_sliced=False,
                                    destination='some-destination',
                                    incremental=True,
                                    table_metadata=TableMetadata()
                                    )
        table_def.table_metadata.add_column_metadata('foo', 'KBC.description', None)

        self.assertDictEqual({}, table_def.table_metadata.column_metadata)


class TestTableDefinition(unittest.TestCase):

    def test_legacy_order_out(self):
        table_def = TableDefinition("testDef", "somepath", False, 'some-destination', ['foo'], ['foo', 'bar'], True,
                                    TableMetadata(), '"', ',',
                                    {'column': 'lilly', 'values': ['a', 'b'], 'operator': 'eq'},
                                    'out', False
                                    )

        self.assertEqual(
            {'destination': 'some-destination', 'incremental': True, 'primary_key': ['foo'], 'write_always': False,
             'delimiter': ',', 'enclosure': '"', 'delete_where_column': 'lilly', 'delete_where_values': ['a', 'b'],
             'delete_where_operator': 'eq', 'columns': ['foo', 'bar']},
            table_def.get_manifest_dictionary(legacy_manifest=True))

    def test_legacy_order_in(self):
        table_def = TableDefinition("data",
                                    metadata=TableMetadata({
                                        "id": "228956",
                                        "key": "KBC.createdBy.component.id",
                                        "value": "keboola.python-transformation",
                                        "provider": "system",
                                        "timestamp": "2017-05-26 00:39:07"
                                    }),
                                    stage='in',
                                    is_sliced=False,
                                    schema=["id", "name", "text"],
                                    created="2015-01-25T01:35:14+0100",
                                    last_change_date="2015-01-25T01:35:14+0100",
                                    last_import_date="2015-01-25T01:35:14+0100")

        self.assertEqual(
            {'columns': ['id', 'name', 'text'], 'created': '2015-01-25T01:35:14+0100',
             'last_change_date': '2015-01-25T01:35:14+0100', 'last_import_date': '2015-01-25T01:35:14+0100',
             'name': 'data'},
            table_def.get_manifest_dictionary(legacy_manifest=True))

    def test_out_old_to_new_has_headers_sliced(self):
        sample_path = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                                   'data_examples', 'data1', 'in', 'tables')

        table_def = TableDefinition.build_from_manifest(os.path.join(sample_path, 'sliced.csv.manifest'))

        manifest = table_def.get_manifest_dictionary()
        self.assertEqual(manifest['has_header'], False)

    def test_out_old_to_new_has_headers_columns(self):
        sample_path = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                                   'data_examples', 'data1', 'in', 'tables')

        table_def = TableDefinition.build_from_manifest(os.path.join(sample_path, 'sample_output.csv.manifest'))

        manifest = table_def.get_manifest_dictionary()
        self.assertEqual(manifest['has_header'], False)

    def test_out_pkey_and_no_columns_incompatible(self):
        with self.assertRaises(UserException) as e:
            TableDefinition("testDef", "somepath", primary_key=['foo'])

    def test_out_legacy_to_new_compatible(self):
        sample_path = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                                   'data_examples', 'data1', 'in', 'tables')

        res = TableDefinition.build_from_manifest(os.path.join(sample_path, 'sample_output_header.csv.manifest'))
        res_manifest = res.get_manifest_dictionary()
        self.assertDictEqual(
            {'delimiter': ',', 'enclosure': '"', 'incremental': True, 'primary_key': ['x'], 'write_always': False},
            res_manifest)

    def test_table_manifest_minimal(self):
        table_def = TableDefinition("testDef", "somepath", is_sliced=False,
                                    columns=['foo', 'bar'],
                                    primary_key=['foo', 'bar']
                                    )
        self.assertEqual(
            {'columns': ['foo', 'bar'], 'delimiter': ',', 'enclosure': '"', 'primary_key': ['foo', 'bar'],
             'write_always': False},
            table_def.get_manifest_dictionary(legacy_manifest=True)
        )

    def test_table_manifest_missing_key(self):
        with self.assertRaises(UserException) as e:
            table_def = TableDefinition("testDef", "somepath", is_sliced=False,
                                        primary_key=['foo', 'bar'])

        self.assertEqual(str(e.exception),
                         "Primary key column foo not found in schema. Please specify all columns / schema")

    def test_table_manifest_full(self):
        table_def = TableDefinition("testDef", "somepath", is_sliced=False,
                                    columns=['foo', 'bar'],
                                    destination='some-destination',
                                    primary_key=['foo'],
                                    incremental=True,
                                    delete_where={'column': 'lilly',
                                                  'values': ['a', 'b'],
                                                  'operator': 'eq'}
                                    )
        # add metadata
        table_def.table_metadata.add_column_metadata('bar', 'foo', 'gogo')
        table_def.table_metadata.add_table_metadata('bar', 'kochba')

        self.assertDictEqual(
            {
                'destination': 'some-destination',
                'columns': ['foo', 'bar'],
                'primary_key': ['foo'],
                'incremental': True,
                'delimiter': ',',
                'enclosure': '"',
                'metadata': [{'key': 'bar', 'value': 'kochba'}],
                'column_metadata': {'bar': [{'key': 'foo', 'value': 'gogo'}]},
                'delete_where_column': 'lilly',
                'delete_where_values': ['a', 'b'],
                'delete_where_operator': 'eq',
                'write_always': False
            },
            table_def.get_manifest_dictionary('out', legacy_manifest=True)
        )

    def test_build_from_table_manifest_metadata_equals(self):
        raw_manifest = {
            'destination': 'some-destination',
            'columns': ['foo', 'bar'],
            'primary_key': ['foo'],
            'incremental': True,
            'metadata': [{'key': 'bar', 'value': 'kochba'}],
            'column_metadata': {'bar': [{'key': 'foo', 'value': 'gogo'}]},
            'delete_where_column': 'lilly',
            'delete_where_values': ['a', 'b'],
            'delete_where_operator': 'eq'
        }

        manifest_file = os.path.join(tempfile.mkdtemp('kbc-test') + 'table.manifest')
        with open(manifest_file, 'w') as out_f:
            json.dump(raw_manifest, out_f)

        table_def = TableDefinition.build_from_manifest(manifest_file)

        expected_tmetadata = TableMetadata()

        expected_tmetadata.add_table_metadata("bar", "kochba")
        expected_tmetadata.add_column_metadata("bar", "foo", "gogo")

        self.assertEqual(table_def.table_metadata.column_metadata, expected_tmetadata.column_metadata)
        self.assertEqual(table_def.table_metadata.table_metadata, expected_tmetadata.table_metadata)

        os.remove(manifest_file)

    def test_build_from_manifest_matching_table_valid_attributes(self):
        sample_path = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                                   'data_examples', 'data1', 'in', 'tables')

        table_def = TableDefinition.build_from_manifest(os.path.join(sample_path, 'sample.csv.manifest'))

        expected_table_def = TableDefinition(name='sample.csv',
                                             full_path=os.path.join(sample_path, 'sample.csv'),
                                             is_sliced=False
                                             )

        self.assertEqual(expected_table_def.full_path, table_def.full_path)
        self.assertEqual(expected_table_def.name, table_def.name)
        self.assertEqual(expected_table_def.is_sliced, table_def.is_sliced)

    def test_build_from_manifest_orphaned_table_valid_attributes(self):
        sample_path = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                                   'data_examples', 'data1', 'in', 'tables')

        table_def = TableDefinition.build_from_manifest(os.path.join(sample_path, 'orphaned.csv.manifest'))

        expected_table_def = TableDefinition(name='orphaned.csv',
                                             full_path=os.path.join(sample_path, 'orphaned.csv'),
                                             is_sliced=False,
                                             incremental=False
                                             )

        self.assertEqual(expected_table_def.full_path, table_def.full_path)
        self.assertEqual(expected_table_def.name, table_def.name)
        self.assertEqual(expected_table_def.is_sliced, table_def.is_sliced)
        self.assertEqual(expected_table_def.get_manifest_dictionary(), table_def.get_manifest_dictionary())

    def test_build_from_manifest_sliced_table_valid_attributes(self):
        sample_path = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                                   'data_examples', 'data1', 'in', 'tables')

        table_def = TableDefinition.build_from_manifest(os.path.join(sample_path, 'sliced.csv.manifest'))

        expected_table_def = TableDefinition(name='sliced.csv',
                                             full_path=os.path.join(sample_path, 'sliced.csv'),
                                             is_sliced=True
                                             )

        self.assertEqual(expected_table_def.full_path, table_def.full_path)
        self.assertEqual(expected_table_def.name, table_def.name)
        self.assertEqual(expected_table_def.is_sliced, table_def.is_sliced)

    def test_build_from_manifest_orphaned_manifest_valid_attributes(self):
        sample_path = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                                   'data_examples', 'data1', 'in', 'tables')

        table_def = TableDefinition.build_from_manifest(os.path.join(sample_path, 'orphaned_manifest.csv.manifest'))

        expected_table_def = TableDefinition(name='orphaned_manifest.csv',
                                             full_path=None,
                                             is_sliced=False
                                             )

        self.assertEqual(expected_table_def.full_path, table_def.full_path)
        self.assertEqual(expected_table_def.name, table_def.name)
        self.assertEqual(expected_table_def.is_sliced, table_def.is_sliced)

    def test_build_manifest_legacy_none_metadata_skipped(self):
        table_def = TableDefinition("testDef", "somepath", is_sliced=False,
                                    destination='some-destination',
                                    incremental=True,
                                    table_metadata=TableMetadata()
                                    )
        table_def.table_metadata.add_column_metadata('foo', 'KBC.description', None)
        expected = {'delimiter': ',', 'destination': 'some-destination', 'enclosure': '"', 'incremental': True,
                    'write_always': False}
        manifest_dict = table_def.get_manifest_dictionary('out', legacy_manifest=True)
        self.assertDictEqual(expected, manifest_dict)

    def test_build_manifest_new_to_legacy_none_metadata_skipped(self):
        table_def = TableDefinition("testDef", "somepath", is_sliced=False,
                                    destination='some-destination',
                                    incremental=True,
                                    schema={
                                        'foo': ColumnDefinition(metadata={'KBC.description': None, 'some': 'value'})},
                                    )
        table_def.table_metadata.add_column_metadata('foo', 'KBC.description', '')
        expected = {'column_metadata': {}, 'columns': ['foo'], 'delimiter': ',', 'destination': 'some-destination',
                    'enclosure': '"',
                    'incremental': True,
                    'write_always': False}
        manifest_dict = table_def.get_manifest_dictionary('out', legacy_manifest=True)
        self.assertDictEqual(expected, manifest_dict)

    def test_incremental_defaults_to_false(self):
        source_m = {
            'columns': ['x', 'Sales', 'CompPrice', 'Income', 'Advertising', 'Population', 'Price', 'ShelveLoc', 'Age',
                        'Education', 'Urban', 'US', 'High'],
            'delimiter': ',',
            'enclosure': '"',
            'write_always': False
        }
        with tempfile.NamedTemporaryFile(delete=False) as temp_file:
            temp_file_path = temp_file.name

        with open(temp_file_path, 'w') as f:
            json.dump(source_m, f)
        td = TableDefinition.build_from_manifest(temp_file_path)

        self.assertEqual(td.incremental, False)

    def test_table_manifest_error_destination(self):
        with self.assertRaises(TypeError):
            TableDefinition("testDef", "somepath", is_sliced=False, destination=['foo', 'bar'])

    def test_table_manifest_error_primary_key(self):
        with self.assertRaises(TypeError):
            TableDefinition("testDef", "somepath", is_sliced=False, primary_key="column")

    def test_table_manifest_error_columns(self):
        with self.assertRaises(TypeError):
            TableDefinition("testDef", "somepath", is_sliced=False, columns="column")

    def test_table_manifest_error_column_delete_1(self):
        with self.assertRaises(ValueError):
            TableDefinition("testDef", "somepath", is_sliced=False, delete_where={"a": "b"})

    def test_table_manifest_error_column_delete_2(self):
        with self.assertRaises(TypeError):
            TableDefinition("testDef", "somepath", is_sliced=False, delete_where={"column": "a",
                                                                                  "values": "b"})

    def test_table_manifest_error_column_delete_3(self):
        with self.assertRaises(TypeError):
            TableDefinition("testDef", "somepath", is_sliced=False, delete_where={"column": "a",
                                                                                  "values": "b",
                                                                                  "operator": "c"})

    def test_unsupported_legacy_queue_properties_log(self):
        with self.assertLogs(level='WARNING') as log:
            td = TableDefinition("testDef", "somepath",
                                 write_always=True, stage='out')
            manifest = td.get_manifest_dictionary(legacy_queue=True)
            self.assertEqual(len(log.output), 1)
            self.assertEqual(len(log.records), 1)
            self.assertIn("WARNING:root:Running on legacy queue "
                          "some manifest properties will be ignored: ['write_always']",
                          log.output[0])

    def test_unsupported_legacy_queue_properties_excluded(self):
        td = TableDefinition("testDef", "somepath",
                             write_always=True, stage='out')
        manifest = td.get_manifest_dictionary(legacy_queue=True)
        self.assertTrue('write_always' not in manifest)

        manifest = td.get_manifest_dictionary(legacy_queue=False)
        self.assertTrue('write_always' in manifest)

    def test_new_manifest_full(self):
        table_def = TableDefinition("testDef", "somepath", is_sliced=False,
                                    schema=['foo', 'bar'],
                                    destination='some-destination',
                                    has_header=True,
                                    primary_key=['foo'],
                                    incremental=True,
                                    delete_where={'column': 'lilly',
                                                  'values': ['a', 'b'],
                                                  'operator': 'eq'},
                                    description='some description'
                                    )
        # add metadata
        table_def.table_metadata.add_column_metadata('bar', 'foo', 'gogo')
        table_def.table_metadata.add_table_metadata('bar', 'kochba')

        self.maxDiff = None

        os.environ['KBC_DATA_TYPE_SUPPORT'] = "authoritative"

        self.assertDictEqual({
            'destination': 'some-destination',
            'incremental': True,
            'write_always': False,
            'delimiter': ',',
            'enclosure': '"',
            'manifest_type': 'out',
            'has_header': True,
            'delete_where_column': 'lilly',
            'delete_where_values': ['a', 'b'],
            'delete_where_operator': 'eq',
            'table_metadata': {'KBC.description': "some description", 'bar': 'kochba'},
            'schema': [
                {'name': 'foo', 'data_type': {'base': {'type': 'STRING'}}, 'nullable': True, 'primary_key': True},
                {'name': 'bar', 'data_type': {'base': {'type': 'STRING'}}, 'nullable': True}]
        },
            table_def.get_manifest_dictionary('out')
        )

        del os.environ['KBC_DATA_TYPE_SUPPORT']

    def test_new_manifest_native_types(self):
        table_def = TableDefinition("testDef", "somepath", is_sliced=False,
                                    stage='out',
                                    schema=['foo', 'bar'],
                                    destination='some-destination',
                                    has_header=True,
                                    primary_key=['foo'],
                                    incremental=True,
                                    delete_where={'column': 'lilly',
                                                  'values': ['a', 'b'],
                                                  'operator': 'eq'}
                                    )
        # update column
        table_def.update_column('foo',
                                ColumnDefinition(data_types=BaseType.integer(length='20')))

        # add new columns
        table_def.add_column('note', ColumnDefinition(nullable=False))
        table_def.add_column('test1')
        table_def.add_columns(['test2', 'test3', 'test4'])

        # add new typed column
        table_def.add_column('id', ColumnDefinition(primary_key=True,
                                                    data_types=BaseType.numeric(length='200')))

        table_def.add_columns(
            {'new2': ColumnDefinition(data_types=BaseType.float(length='200')),
             'new3': ColumnDefinition(data_types=BaseType.date())})

        # delete columns
        table_def.delete_column('bar')
        table_def.delete_columns(['test2', 'test3'])

        self.maxDiff = None

        os.environ['KBC_DATA_TYPE_SUPPORT'] = "authoritative"

        self.assertDictEqual({
            'destination': 'some-destination',
            'incremental': True,
            'write_always': False,
            'delimiter': ',',
            'enclosure': '"',
            'manifest_type': 'out',
            'has_header': True,
            'delete_where_column': 'lilly',
            'delete_where_values': ['a', 'b'], 'delete_where_operator': 'eq',
            'schema': [{'name': 'foo', 'data_type': {'base': {'type': 'INTEGER', 'length': '20'}}, 'nullable': True},
                       {'name': 'note', 'data_type': {'base': {'type': 'STRING'}}},
                       {'name': 'test1', 'data_type': {'base': {'type': 'STRING'}}, 'nullable': True},
                       {'name': 'test4', 'data_type': {'base': {'type': 'STRING'}}, 'nullable': True},
                       {'name': 'id', 'data_type': {'base': {'type': 'NUMERIC', 'length': '200'}}, 'nullable': True,
                        'primary_key': True},
                       {'name': 'new2', 'data_type': {'base': {'type': 'FLOAT', 'length': '200'}}, 'nullable': True},
                       {'name': 'new3', 'data_type': {'base': {'type': 'DATE'}}, 'nullable': True}]},
            table_def.get_manifest_dictionary('out')
        )

        del os.environ['KBC_DATA_TYPE_SUPPORT']

    def test_new_manifest_base_type_columns(self):
        table_def = TableDefinition("testDef", "somepath", is_sliced=False,
                                    destination='some-destination',
                                    incremental=True,
                                    delete_where={'column': 'lilly',
                                                  'values': ['a', 'b'],
                                                  'operator': 'eq'}
                                    )

        # add new columns
        table_def.add_column('string1', ColumnDefinition(BaseType.string()))
        table_def.schema["string1"].add_datatype('redshift', DataType(dtype='STRING', length='255'))

        table_def.add_column('numeric', ColumnDefinition(BaseType.numeric()))

        table_def.add_column('id', ColumnDefinition(primary_key=True, data_types=BaseType.integer(length='200')))

        os.environ['KBC_DATA_TYPE_SUPPORT'] = "hints"

        self.assertDictEqual(
            {'destination': 'some-destination', 'incremental': True, 'write_always': False, 'delimiter': ',',
             'enclosure': '"', 'manifest_type': 'out', 'has_header': True, 'delete_where_column': 'lilly',
             'delete_where_values': ['a', 'b'], 'delete_where_operator': 'eq', 'schema': [{'name': 'string1',
                                                                                           'data_type': {
                                                                                               'base': {
                                                                                                   'type': 'STRING'},
                                                                                               'redshift': {
                                                                                                   'type': 'STRING',
                                                                                                   'length': '255'}
                                                                                           }, 'nullable': True},
                                                                                          {'name': 'numeric',
                                                                                           'data_type': {
                                                                                               'base': {
                                                                                                   'type': 'NUMERIC'}
                                                                                           },
                                                                                           'nullable': True},
                                                                                          {'name': 'id',
                                                                                           'data_type': {
                                                                                               'base': {
                                                                                                   'type': 'INTEGER',
                                                                                                   'length': '200'}},
                                                                                           'nullable': True,
                                                                                           'primary_key': True}]},
            table_def.get_manifest_dictionary('out')
        )

        del os.environ['KBC_DATA_TYPE_SUPPORT']

    def test_new_manifest_column_methods(self):
        table_def = TableDefinition("testDef", "somepath",
                                    stage='out',
                                    schema=['foo', 'bar', 'to_delete'],
                                    destination='some-destination',
                                    has_header=True,
                                    primary_key=['foo'],
                                    incremental=True,
                                    delete_where={'column': 'lilly',
                                                  'values': ['a', 'b'],
                                                  'operator': 'eq'}
                                    )

        table_def.add_column('note', ColumnDefinition(nullable=False))

        table_def.update_column('foo', ColumnDefinition(data_types=BaseType.integer()))
        table_def.schema['bar'].add_datatype('redshift', DataType(dtype='STRING', length='255'))

        table_def.delete_column('to_delete')

        self.assertDictEqual(
            {'destination': 'some-destination', 'incremental': True, 'write_always': False, 'delimiter': ',',
             'enclosure': '"', 'manifest_type': 'out', 'has_header': True, 'delete_where_column': 'lilly',
             'delete_where_values': ['a', 'b'], 'delete_where_operator': 'eq',
             'schema': [{'name': 'foo', 'data_type': {'base': {'type': 'INTEGER'}}, 'nullable': True},
                        {'name': 'bar',
                         'data_type': {
                             'base': {
                                 'type': 'STRING'},
                             'redshift': {
                                 'type': 'STRING',
                                 'length': '255'}},
                         'nullable': True},
                        {'name': 'note', 'data_type': {'base': {'type': 'STRING'}}}]},
            table_def.get_manifest_dictionary())

    def test_build_from_manifest_full_input(self):
        sample_path = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                                   'data_examples', 'data_full_input_manifest', 'in', 'tables')

        table_def = TableDefinition.build_from_manifest(os.path.join(sample_path, 'sample.csv.manifest'))

        self.assertEqual(table_def.id, 'in.c-main.test')
        self.assertEqual(table_def.uri, 'https://connection.keboola.com//v2/storage/tables/in.c-main.test')
        self.assertEqual(table_def.name, 'sample.csv')
        self.assertEqual(table_def.created, datetime.strptime("2015-11-02T09:11:37+0100", "%Y-%m-%dT%H:%M:%S%z"))
        self.assertEqual(table_def.last_change_date, "2015-11-02T09:11:37+0100")
        self.assertEqual(table_def.last_import_date, "2015-11-02T09:11:37+0100")
        self.assertEqual(table_def.rows_count, 400)
        self.assertEqual(table_def.data_size_bytes, 81920)
        self.assertEqual(table_def.is_alias, False)
        self.assertEqual(table_def._indexed_columns, ['x'])
        self.assertEqual(table_def.primary_key, ['x'])
        self.assertEqual(table_def.table_metadata.column_metadata, {'x': {'foo': 'gogo'}})
        self.assertEqual(table_def.column_names, ['x', 'Sales', 'CompPrice', 'Income', 'Advertising',
                                                  'Population', 'Price', 'ShelveLoc', 'Age', 'Education',
                                                  'Urban', 'US', 'High'])

    def test_build_from_manifest_full_output(self):
        sample_path = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                                   'data_examples', 'data_full_output_manifest', 'in', 'tables')

        table_def = TableDefinition.build_from_manifest(os.path.join(sample_path, 'sample_output.csv.manifest'))

        self.assertEqual(table_def.name, 'sample_output.csv')
        self.assertEqual(table_def.destination, 'out.c-adform_masterdata-processor-test.sample_output')
        self.assertEqual(table_def.column_names, ['x', 'Sales', 'CompPrice', 'Income', 'Advertising',
                                                  'Population', 'Price', 'ShelveLoc', 'Age', 'Education',
                                                  'Urban', 'US', 'High'])
        self.assertEqual(table_def.incremental, True)
        self.assertEqual(table_def.primary_key, ['x'])
        self.assertEqual(table_def.write_always, True)
        self.assertEqual(table_def.delimiter, '\t')
        self.assertEqual(table_def.enclosure, '\'')
        self.assertEqual(table_def.table_metadata.column_metadata, {'x': {'foo': 'gogo'}})
        self.assertEqual(table_def.delete_where_column, 'Advertising')
        self.assertEqual(table_def.delete_where_values, ['Video', 'Search'])
        self.assertEqual(table_def.delete_where_operator, 'eq')


class TestFileDefinition(unittest.TestCase):

    def setUp(self):
        path = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                            'data_examples', 'data1')
        os.environ["KBC_DATADIR"] = path

    def test_file_manifest_minimal(self):
        file_path = os.path.join(os.environ["KBC_DATADIR"], 'in', 'files', '151971405_21702.strip.print.gif')
        file_def = FileDefinition(file_path)

        self.assertDictEqual(
            {
                'is_public': False,
                'is_permanent': False,
                'is_encrypted': False,
                'notify': False},
            file_def.get_manifest_dictionary()
        )

    def test_file_manifest_full(self):
        file_def = FileDefinition("123_test_Def", is_permanent=True,
                                  is_encrypted=True,
                                  is_public=True,
                                  tags=['foo', 'bar'],
                                  notify=True,
                                  id="123"
                                  )

        self.assertDictEqual(
            {'tags': ['foo', 'bar'],
             'is_public': True,
             'is_permanent': True,
             'is_encrypted': True,
             'notify': True,
             },
            file_def.get_manifest_dictionary('out')
        )
        self.assertEqual(file_def.name, 'test_Def')
        self.assertEqual(file_def.id, '123')

    def test_file_output_manifest_ignores_unrecognized(self):
        file_path = os.path.join(os.environ["KBC_DATADIR"], 'in', 'files',
                                 '151971405_21702.strip.print.gif.manifest')
        file_def = FileDefinition.build_from_manifest(file_path)

        # change stage
        file_def.stage = 'out'

        self.assertDictEqual(
            {'is_encrypted': True, 'is_permanent': False,
             'is_public': False, 'notify': False, 'tags': ['dilbert']},
            file_def.get_manifest_dictionary()
        )

    def test_build_from_manifest_matching_file_valid_attributes(self):
        sample_path = os.path.join(os.environ["KBC_DATADIR"], 'in', 'files', '151971405_21702.strip.print.gif')
        manifest_path = sample_path + '.manifest'
        file_def = FileDefinition.build_from_manifest(
            manifest_path)

        expected_manifest = json.load(open(manifest_path))

        self.assertEqual(sample_path, file_def.full_path)
        self.assertEqual(expected_manifest['name'], file_def.name)
        self.assertEqual(datetime.strptime(expected_manifest['created'], dao.KBC_DEFAULT_TIME_FORMAT),
                         file_def.created)
        self.assertEqual(expected_manifest['is_public'], file_def.is_public)
        self.assertEqual(expected_manifest['is_encrypted'], file_def.is_encrypted)
        self.assertEqual(expected_manifest['tags'], file_def.tags)
        self.assertEqual(expected_manifest['max_age_days'], file_def.max_age_days)
        self.assertEqual(expected_manifest['size_bytes'], file_def.size_bytes)

    def test_build_from_manifest_nonexistentfile_fails(self):
        sample_path = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                                   'data_examples', 'data1', 'in', 'files')

        with self.assertRaises(ValueError):
            FileDefinition.build_from_manifest(os.path.join(sample_path, 'orphaned.csv.manifest'))

    def test_user_tags(self):
        all_tags = ['foo',
                    'bar',
                    'componentId: 1234',
                    'configurationId: 12345',
                    'configurationRowId: 12345',
                    'runId: 22123',
                    'branchId: 312321'
                    ]
        file_def = FileDefinition("123_test_Def", is_permanent=True,
                                  is_encrypted=True,
                                  is_public=True,
                                  tags=all_tags,
                                  notify=True
                                  )

        self.assertDictEqual(
            {'tags': all_tags,
             'is_public': True,
             'is_permanent': True,
             'is_encrypted': True,
             'notify': True
             },
            file_def.get_manifest_dictionary()
        )

        self.assertEqual(['foo', 'bar'], file_def.user_tags)

    def test_all_tags(self):
        all_tags = ['foo',
                    'bar',
                    'componentId: 1234',
                    'configurationId: 12345',
                    'configurationRowId: 12345',
                    'runId: 22123',
                    'branchId: 312321'
                    ]
        file_def = FileDefinition("123_test_Def",
                                  tags=all_tags
                                  )

        self.assertEqual(all_tags, file_def.tags)


================================================
File: tests/test_interface.py
================================================
import json
import os
import unittest

from keboola.component import CommonInterface, Configuration


class TestCommonInterface(unittest.TestCase):

    def setUp(self):
        path = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                            'data_examples', 'data1')
        os.environ["KBC_DATADIR"] = path
        os.environ['KBC_STACKID'] = 'connection.keboola.com'
        os.environ['KBC_PROJECT_FEATURE_GATES'] = 'queuev2'

    def test_all_env_variables_initialized(self):
        # set all variables
        os.environ['KBC_RUNID'] = 'KBC_RUNID'
        os.environ['KBC_PROJECTID'] = 'KBC_PROJECTID'
        os.environ['KBC_STACKID'] = 'KBC_STACKID'
        os.environ['KBC_CONFIGID'] = 'KBC_CONFIGID'
        os.environ['KBC_COMPONENTID'] = 'KBC_COMPONENTID'
        os.environ['KBC_PROJECTNAME'] = 'KBC_PROJECTNAME'
        os.environ['KBC_TOKENID'] = 'KBC_TOKENID'
        os.environ['KBC_TOKENDESC'] = 'KBC_TOKENDESC'
        os.environ['KBC_TOKEN'] = 'KBC_TOKEN'
        os.environ['KBC_URL'] = 'KBC_URL'
        os.environ['KBC_LOGGER_ADDR'] = 'KBC_LOGGER_ADDR'
        os.environ['KBC_LOGGER_PORT'] = 'KBC_LOGGER_PORT'

        ci = CommonInterface()
        self.assertEqual(ci.environment_variables.data_dir, os.environ["KBC_DATADIR"])
        self.assertEqual(ci.environment_variables.run_id, 'KBC_RUNID')
        self.assertEqual(ci.environment_variables.project_id, 'KBC_PROJECTID')
        self.assertEqual(ci.environment_variables.stack_id, 'KBC_STACKID')
        self.assertEqual(ci.environment_variables.config_id, 'KBC_CONFIGID')
        self.assertEqual(ci.environment_variables.component_id, 'KBC_COMPONENTID')
        self.assertEqual(ci.environment_variables.project_name, 'KBC_PROJECTNAME')
        self.assertEqual(ci.environment_variables.token_id, 'KBC_TOKENID')
        self.assertEqual(ci.environment_variables.token_desc, 'KBC_TOKENDESC')
        self.assertEqual(ci.environment_variables.token, 'KBC_TOKEN')
        self.assertEqual(ci.environment_variables.url, 'KBC_URL')
        self.assertEqual(ci.environment_variables.logger_addr, 'KBC_LOGGER_ADDR')
        self.assertEqual(ci.environment_variables.logger_port, 'KBC_LOGGER_PORT')

    def test_empty_required_params_pass(self):
        c = CommonInterface
        return True
        # # set env
        # interface = CommonInterface(mandatory_params=[])
        # `
        # # tests
        # try:
        #     interface.validate_config()
        # except Exception:  # noeq
        #     self.fail("validateConfig() fails on empty Parameters!")

    def test_required_params_missing_fail(self):
        return True
        # set env - missing notbar
        # hdlr = CommonInterface(mandatory_params=['fooBar', 'notbar'])
        #
        # with self.assertRaises(ValueError) as er:
        #     hdlr.validate_config(['fooBar', 'notbar'])
        #
        # self.assertEqual('Missing mandatory config parameters fields: [notbar] ', str(er.exception))

    def test_unknown_config_tables_input_mapping_properties_pass(self):
        """Unknown properties in storage.intpu.tables will be ignored when getting dataclass"""

    def test_missing_dir(self):
        os.environ["KBC_DATADIR"] = "asdf"
        with self.assertRaisesRegex(
                ValueError,
                "The data directory does not exist"):
            CommonInterface()

    # ########## PROPERTIES

    def test_missing_config(self):
        os.environ["KBC_DATADIR"] = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                                                 'data_examples')
        with self.assertRaisesRegex(
                ValueError,
                "Configuration file config.json not found"):
            ci = CommonInterface()
            c = ci.configuration

    def test_get_data_dir(self):
        ci = CommonInterface()
        self.assertEqual(os.getenv('KBC_DATADIR', ''), ci.data_folder_path)

    def test_get_tables_out_dir(self):
        ci = CommonInterface()
        tables_out = os.path.join(os.getenv('KBC_DATADIR', ''), 'out', 'tables')
        self.assertEqual(tables_out, ci.tables_out_path)

    def test_get_tables_in_dir(self):
        ci = CommonInterface()
        tables_out = os.path.join(os.getenv('KBC_DATADIR', ''), 'in', 'files')
        self.assertEqual(tables_out, ci.files_in_path)

    def test_get_files_out_dir(self):
        ci = CommonInterface()
        tables_out = os.path.join(os.getenv('KBC_DATADIR', ''), 'out', 'files')
        self.assertEqual(tables_out, ci.files_out_path)

    def test_get_files_in_dir(self):
        ci = CommonInterface()
        tables_out = os.path.join(os.getenv('KBC_DATADIR', ''), 'in', 'tables')
        self.assertEqual(tables_out, ci.tables_in_path)

    def test_legacy_queue(self):
        os.environ['KBC_PROJECT_FEATURE_GATES'] = ''
        ci = CommonInterface()

        # with no KBC_PROJECT_FEATURE_GATES env default to legacy queue
        self.assertEqual(True, ci.is_legacy_queue)

        # otherwise check for queuev2
        os.environ['KBC_PROJECT_FEATURE_GATES'] = 'queuev2;someotherfeature'
        ci = CommonInterface()
        self.assertEqual(False, ci.is_legacy_queue)

        # If feature gates exists but doesn't contain queuev2 it's old queue
        os.environ['KBC_PROJECT_FEATURE_GATES'] = 'feature1;someotherfeature'
        ci = CommonInterface()
        self.assertEqual(True, ci.is_legacy_queue)

        # when running locally default to queue v2
        os.environ['KBC_STACKID'] = ''
        ci = CommonInterface()
        self.assertEqual(False, ci.is_legacy_queue)

    def test_create_and_write_table_manifest_deprecated(self):
        ci = CommonInterface()
        # create table def
        out_table = ci.create_out_table_definition('some-table.csv',
                                                   columns=['foo', 'bar'],
                                                   destination='some-destination',
                                                   primary_key=['foo'],
                                                   incremental=True,
                                                   delete_where={'column': 'lilly',
                                                                 'values': ['a', 'b'],
                                                                 'operator': 'eq'}
                                                   )
        out_table.table_metadata.add_table_metadata('bar', 'kochba')
        out_table.table_metadata.add_column_metadata('bar', 'foo', 'gogo')

        # write
        ci.write_tabledef_manifest(out_table)
        manifest_filename = out_table.full_path + '.manifest'
        with open(manifest_filename) as manifest_file:
            config = json.load(manifest_file)
        self.assertEqual(
            {
                'destination': 'some-destination',
                'columns': ['foo', 'bar'],
                'primary_key': ['foo'],
                'incremental': True,
                'delimiter': ',',
                'enclosure': '"',
                'metadata': [{'key': 'bar', 'value': 'kochba'}],
                'column_metadata': {'bar': [{'key': 'foo', 'value': 'gogo'}]},
                'delete_where_column': 'lilly',
                'delete_where_values': ['a', 'b'],
                'delete_where_operator': 'eq',
                'write_always': False
            },
            config
        )
        os.remove(manifest_filename)

    def test_create_and_write_table_manifest(self):
        ci = CommonInterface()
        # create table def
        out_table = ci.create_out_table_definition('some-table.csv',
                                                   columns=['foo', 'bar'],
                                                   destination='some-destination',
                                                   primary_key=['foo'],
                                                   incremental=True,
                                                   delete_where={'column': 'lilly',
                                                                 'values': ['a', 'b'],
                                                                 'operator': 'eq'},
                                                   write_always=True,
                                                   description='some-description'
                                                   )
        out_table.table_metadata.add_table_metadata('bar', 'kochba')
        out_table.table_metadata.add_column_metadata('bar', 'foo', 'gogo')

        # write
        ci.write_manifest(out_table, legacy_manifest=True)
        manifest_filename = out_table.full_path + '.manifest'
        with open(manifest_filename) as manifest_file:
            config = json.load(manifest_file)
        self.assertEqual(
            {
                'destination': 'some-destination',
                'columns': ['foo', 'bar'],
                'primary_key': ['foo'],
                'incremental': True,
                'write_always': True,
                'delimiter': ',',
                'enclosure': '"',
                'metadata': [{'key': 'KBC.description', 'value': 'some-description'},
                             {'key': 'bar', 'value': 'kochba'}],
                'column_metadata': {'bar': [{'key': 'foo', 'value': 'gogo'}]},
                'delete_where_column': 'lilly',
                'delete_where_values': ['a', 'b'],
                'delete_where_operator': 'eq'
            },
            config
        )
        os.remove(manifest_filename)

    def test_create_and_write_table_manifest_old_queue(self):
        # If feature gates exists but doesn't contain queuev2 it's old queue
        os.environ['KBC_PROJECT_FEATURE_GATES'] = 'feature1;someotherfeature'

        ci = CommonInterface()
        # create table def
        out_table = ci.create_out_table_definition('some-table.csv',
                                                   columns=['foo', 'bar'],
                                                   destination='some-destination',
                                                   primary_key=['foo'],
                                                   incremental=True,
                                                   # the write_always will then not be present in the manifest even if set
                                                   write_always=True,
                                                   delete_where={'column': 'lilly',
                                                                 'values': ['a', 'b'],
                                                                 'operator': 'eq'}
                                                   )
        out_table.table_metadata.add_table_metadata('bar', 'kochba')
        out_table.table_metadata.add_column_metadata('bar', 'foo', 'gogo')

        # write
        ci.write_manifest(out_table, legacy_manifest=True)
        manifest_filename = out_table.full_path + '.manifest'
        with open(manifest_filename) as manifest_file:
            config = json.load(manifest_file)
        self.assertEqual(
            {
                'destination': 'some-destination',
                'columns': ['foo', 'bar'],
                'primary_key': ['foo'],
                'incremental': True,
                'delimiter': ',',
                'enclosure': '"',
                'metadata': [{'key': 'bar', 'value': 'kochba'}],
                'column_metadata': {'bar': [{'key': 'foo', 'value': 'gogo'}]},
                'delete_where_column': 'lilly',
                'delete_where_values': ['a', 'b'],
                'delete_where_operator': 'eq'
            },
            config
        )
        os.remove(manifest_filename)

    def test_legacy_manifest_without_columns_with_header(self):
        # If feature gates exists but doesn't contain queuev2 it's old queue
        os.environ['KBC_PROJECT_FEATURE_GATES'] = 'feature1;someotherfeature'

        ci = CommonInterface()
        # create table def
        out_table = ci.create_out_table_definition('some-table.csv',
                                                   columns=['foo', 'bar'],
                                                   destination='some-destination',
                                                   primary_key=['foo'],
                                                   incremental=True,
                                                   # the write_always will then not be present in the manifest even if set
                                                   write_always=True,
                                                   has_header=True,
                                                   delete_where={'column': 'lilly',
                                                                 'values': ['a', 'b'],
                                                                 'operator': 'eq'}
                                                   )
        out_table.table_metadata.add_table_metadata('bar', 'kochba')
        out_table.table_metadata.add_column_metadata('bar', 'foo', 'gogo')

        # write
        ci.write_manifest(out_table, legacy_manifest=True)
        manifest_filename = out_table.full_path + '.manifest'
        with open(manifest_filename) as manifest_file:
            config = json.load(manifest_file)
        self.assertEqual(
            {
                'destination': 'some-destination',
                'primary_key': ['foo'],
                'incremental': True,
                'delimiter': ',',
                'enclosure': '"',
                'metadata': [{'key': 'bar', 'value': 'kochba'}],
                'column_metadata': {'bar': [{'key': 'foo', 'value': 'gogo'}]},
                'delete_where_column': 'lilly',
                'delete_where_values': ['a', 'b'],
                'delete_where_operator': 'eq'
            },
            config
        )
        os.remove(manifest_filename)

    # #### DATA FOLDER MANIPULATION
    def test_create_and_write_table_manifest_multi_deprecated(self):
        ci = CommonInterface()
        # create table def
        out_table = ci.create_out_table_definition('some-table.csv',
                                                   columns=['foo', 'bar'],
                                                   destination='some-destination',
                                                   primary_key=['foo'],
                                                   incremental=True,
                                                   delete_where={'column': 'lilly',
                                                                 'values': ['a', 'b'],
                                                                 'operator': 'eq'}
                                                   )
        out_table.table_metadata.add_table_metadata('bar', 'kochba')
        out_table.table_metadata.add_column_metadata('bar', 'foo', 'gogo')

        # write
        ci.write_tabledef_manifests([out_table])
        manifest_filename = out_table.full_path + '.manifest'
        with open(manifest_filename) as manifest_file:
            config = json.load(manifest_file)
        self.assertEqual(
            {
                'destination': 'some-destination',
                'columns': ['foo', 'bar'],
                'primary_key': ['foo'],
                'incremental': True,
                'metadata': [{'key': 'bar', 'value': 'kochba'}],
                'delimiter': ',',
                'enclosure': '"',
                'column_metadata': {'bar': [{'key': 'foo', 'value': 'gogo'}]},
                'delete_where_column': 'lilly',
                'delete_where_values': ['a', 'b'],
                'delete_where_operator': 'eq',
                'write_always': False
            },
            config
        )
        os.remove(manifest_filename)

    def test_create_and_write_table_manifest_multi(self):
        ci = CommonInterface()
        # create table def
        out_table = ci.create_out_table_definition('some-table.csv',
                                                   columns=['foo', 'bar'],
                                                   destination='some-destination',
                                                   primary_key=['foo'],
                                                   incremental=True,
                                                   delete_where={'column': 'lilly',
                                                                 'values': ['a', 'b'],
                                                                 'operator': 'eq'}
                                                   )
        out_table.table_metadata.add_table_metadata('bar', 'kochba')
        out_table.table_metadata.add_column_metadata('bar', 'foo', 'gogo')

        # write
        ci.write_manifests([out_table], legacy_manifest=True)
        manifest_filename = out_table.full_path + '.manifest'
        with open(manifest_filename) as manifest_file:
            config = json.load(manifest_file)
        self.assertEqual(
            {
                'destination': 'some-destination',
                'columns': ['foo', 'bar'],
                'primary_key': ['foo'],
                'incremental': True,
                'metadata': [{'key': 'bar', 'value': 'kochba'}],
                'delimiter': ',',
                'enclosure': '"',
                'column_metadata': {'bar': [{'key': 'foo', 'value': 'gogo'}]},
                'delete_where_column': 'lilly',
                'delete_where_values': ['a', 'b'],
                'delete_where_operator': 'eq',
                'write_always': False
            },
            config
        )
        os.remove(manifest_filename)

    def test_create_and_write_table_manifest_new(self):
        os.environ['KBC_DATA_TYPE_SUPPORT'] = "authoritative"
        ci = CommonInterface()
        del os.environ['KBC_DATA_TYPE_SUPPORT']

        # create table def
        out_table = ci.create_out_table_definition('some-table.csv',
                                                   schema=['foo', 'bar'],
                                                   has_header=True,
                                                   destination='some-destination',
                                                   description='some-description',
                                                   primary_key=['foo'],
                                                   incremental=True,
                                                   delete_where={'column': 'lilly',
                                                                 'values': ['a', 'b'],
                                                                 'operator': 'eq'}
                                                   )
        out_table.table_metadata.add_table_metadata('bar', 'kochba')
        out_table.table_metadata.add_column_metadata('bar', 'foo', 'gogo')

        # write
        ci.write_manifests([out_table])

        manifest_filename = out_table.full_path + '.manifest'
        with open(manifest_filename) as manifest_file:
            config = json.load(manifest_file)
        self.assertEqual(
            {'delete_where_column': 'lilly',
             'delete_where_operator': 'eq',
             'delete_where_values': ['a', 'b'],
             'delimiter': ',',
             'destination': 'some-destination',
             'enclosure': '"',
             'has_header': True,
             'incremental': True,
             'manifest_type': 'out',
             'schema': [{'data_type': {'base': {'type': 'STRING'}},
                         'name': 'foo',
                         'nullable': True,
                         'primary_key': True},
                        {'data_type': {'base': {'type': 'STRING'}},
                         'name': 'bar',
                         'nullable': True}],
             'table_metadata': {'KBC.description': 'some-description', 'bar': 'kochba'},
             'write_always': False},
            config
        )
        os.remove(manifest_filename)

    def test_legacy_column_metadata_ignored_on_new_schema(self):
        # TODO: this is not implemented on purpose
        os.environ['KBC_DATA_TYPE_SUPPORT'] = "authoritative"
        ci = CommonInterface()
        # create table def
        out_table = ci.create_out_table_definition('some-table.csv',
                                                   columns=['foo', 'bar'],
                                                   destination='some-destination',
                                                   primary_key=['foo'],
                                                   incremental=True,
                                                   delete_where={'column': 'lilly',
                                                                 'values': ['a', 'b'],
                                                                 'operator': 'eq'}
                                                   )
        # this will be ignored
        out_table.table_metadata.add_table_metadata('bar', 'kochba')
        # this will be ignored
        out_table.table_metadata.add_column_metadata('bar', 'foo', 'gogo')
        # this will be ignored
        out_table.table_metadata.add_column_data_type('bar', 'NUMERIC')

        # write
        ci.write_manifest(out_table)

        del os.environ['KBC_DATA_TYPE_SUPPORT']
        manifest_filename = out_table.full_path + '.manifest'
        with open(manifest_filename) as manifest_file:
            config = json.load(manifest_file)
        self.assertEqual(
            {'destination': 'some-destination',
             'incremental': True,
             'manifest_type': 'out',
             'write_always': False,
             'delimiter': ',',
             'enclosure': '"',
             'table_metadata': {'bar': 'kochba'},
             'has_header': False,
             'delete_where_column': 'lilly', 'delete_where_values': ['a', 'b'], 'delete_where_operator': 'eq',
             'schema': [
                 {'name': 'foo', 'data_type': {'base': {'type': 'STRING'}}, 'nullable': True, 'primary_key': True},
                 {'name': 'bar', 'data_type': {'base': {'type': 'STRING'}}, 'nullable': True}]},
            config
        )

    def test_get_input_tables_definition(self):
        ci = CommonInterface()

        tables = ci.get_input_tables_definitions()

        self.assertEqual(6, len(tables))
        for table in tables:
            if table.name == 'sample.csv':
                self.assertEqual(table.columns, [
                    "x",
                    "Sales",
                    "CompPrice",
                    "Income",
                    "Advertising",
                    "Population",
                    "Price",
                    "ShelveLoc",
                    "Age",
                    "Education",
                    "Urban",
                    "US",
                    "High"
                ])
                self.assertEqual(table.rows_count, 400)
                self.assertEqual(table.data_size_bytes, 81920)
            elif table.name == 'fooBar':
                self.assertEqual(table.id, 'in.c-main.test2')
                self.assertEqual(table.full_path, os.path.join(ci.tables_in_path, 'fooBar'))
                self.assertEqual(table.name, 'fooBar')

    def test_get_input_tables_definition_orphaned_manifest(self):
        ci = CommonInterface()

        tables = ci.get_input_tables_definitions(orphaned_manifests=True)

        self.assertEqual(7, len(tables))
        for table in tables:
            if table.name == 'sample.csv':
                self.assertEqual(table.columns, [
                    "x",
                    "Sales",
                    "CompPrice",
                    "Income",
                    "Advertising",
                    "Population",
                    "Price",
                    "ShelveLoc",
                    "Age",
                    "Education",
                    "Urban",
                    "US",
                    "High"
                ])
                self.assertEqual(table.rows_count, 400)
                self.assertEqual(table.data_size_bytes, 81920)
            elif table.name == 'fooBar':
                self.assertEqual(table.id, 'in.c-main.test2')
                self.assertEqual(table.full_path, os.path.join(ci.tables_in_path, 'fooBar'))
                self.assertEqual(table.name, 'fooBar')

    def test_state_file_initialized(self):
        ci = CommonInterface()
        state = ci.get_state_file()
        self.assertEqual(state['test_state'], 1234)

    def test_state_file_created(self):
        ci = CommonInterface()
        # write
        ci.write_state_file({"some_state": 1234})

        # load
        state_filename = os.path.join(ci.data_folder_path, 'out', 'state.json')
        with open(state_filename) as state_file:
            state = json.load(state_file)

        self.assertEqual(
            {"some_state": 1234},
            state
        )

        # cleanup
        os.remove(state_filename)

    def test_get_input_table_by_name_fails_on_nonexistent(self):
        ci = CommonInterface()
        with self.assertRaises(ValueError):
            ci.get_input_table_definition_by_name('nonexistent.csv')

    def test_get_input_table_by_name_existing_passes(self):
        ci = CommonInterface()
        in_table = ci.get_input_table_definition_by_name('fooBar')
        self.assertEqual(in_table.id, 'in.c-main.test2')
        self.assertEqual(in_table.full_path, os.path.join(ci.tables_in_path, 'fooBar'))
        self.assertEqual(in_table.name, 'fooBar')

    # Files

    def test_create_and_write_file_manifest_deprecated(self):
        ci = CommonInterface()
        # create table def
        out_file = ci.create_out_file_definition('some-file.jpg',
                                                 is_permanent=True,
                                                 is_encrypted=True,
                                                 is_public=True,
                                                 tags=['foo', 'bar'],
                                                 notify=True
                                                 )

        # write
        ci.write_filedef_manifest(out_file)
        manifest_filename = out_file.full_path + '.manifest'
        with open(manifest_filename) as manifest_file:
            config = json.load(manifest_file)
        self.assertEqual(
            {'tags': ['foo', 'bar'],
             'is_public': True,
             'is_permanent': True,
             'is_encrypted': True,
             'notify': True},
            config
        )
        os.remove(manifest_filename)

    def test_create_and_write_file_manifest(self):
        ci = CommonInterface()
        # create table def
        out_file = ci.create_out_file_definition('some-file.jpg',
                                                 is_permanent=True,
                                                 is_encrypted=True,
                                                 is_public=True,
                                                 tags=['foo', 'bar'],
                                                 notify=True
                                                 )

        # write
        ci.write_manifest(out_file)

        manifest_filename = out_file.full_path + '.manifest'
        with open(manifest_filename) as manifest_file:
            config = json.load(manifest_file)
        self.assertEqual(
            {'tags': ['foo', 'bar'],
             'is_public': True,
             'is_permanent': True,
             'is_encrypted': True,
             'notify': True},
            config
        )
        os.remove(manifest_filename)

    def test_get_input_files_definition_latest(self):
        ci = CommonInterface()

        files = ci.get_input_files_definitions()

        self.assertEqual(len(files), 5)
        for file in files:
            if file.name == 'duty_calls.png':
                self.assertEqual(file.id, '151971455')

    def test_get_input_files_definition_by_tag(self):
        ci = CommonInterface()

        files = ci.get_input_files_definitions(tags=['dilbert'])

        self.assertEqual(len(files), 3)
        for file in files:
            if file.name == '21702.strip.print.gif':
                self.assertEqual(file.tags, [
                    "dilbert"
                ])
                self.assertEqual(file.max_age_days, 180)
                self.assertEqual(file.size_bytes, 4931)

    def test_get_input_files_definition_by_tag_w_system(self):
        ci = CommonInterface(os.path.join(os.path.dirname(os.path.realpath(__file__)),
                                          'data_examples', 'data_system_tags'))

        files = ci.get_input_files_definitions(tags=['dilbert'])

        self.assertEqual(len(files), 3)
        for file in files:
            if file.name == '21702.strip.print.gif':
                self.assertEqual(file.tags, [
                    "dilbert",
                    "componentId: 1234",
                    "configurationId: 12345",
                    "configurationRowId: 12345",
                    "runId: 22123",
                    "branchId: 312321"
                ])
                self.assertEqual(file.max_age_days, 180)
                self.assertEqual(file.size_bytes, 4931)

    def test_get_input_files_definition_tag_group_w_system(self):
        ci = CommonInterface(os.path.join(os.path.dirname(os.path.realpath(__file__)),
                                          'data_examples', 'data_system_tags'))

        files = ci.get_input_file_definitions_grouped_by_tag_group(only_latest_files=False)

        self.assertEqual(len(files), 2)
        self.assertEqual(len(files["bar;foo"]), 3)
        for file in files["bar;foo"]:
            if file.name == 'compiler_complaint.png':
                self.assertEqual(file.tags, [
                    "foo",
                    "bar",
                    "componentId: 1234",
                    "configurationId: 12345",
                    "configurationRowId: 12345",
                    "runId: 22123",
                    "branchId: 312321"
                ])

    def test_get_input_files_definition_nofilter(self):
        ci = CommonInterface()

        files = ci.get_input_files_definitions(only_latest_files=False)

        self.assertEqual(len(files), 6)
        for file in files:
            if file.name == 'duty_calls':
                self.assertEqual(file.tags, [
                    "xkcd"
                ])
                self.assertEqual(file.max_age_days, 180)
                self.assertEqual(file.size_bytes, 30027)

    def test_get_input_files_definition_no_manifest_passes(self):
        ci = CommonInterface(os.path.join(os.path.dirname(os.path.realpath(__file__)),
                                          'data_examples', 'data2'))

        files = ci.get_input_files_definitions(only_latest_files=True)

        self.assertEqual(len(files), 1)
        for file in files:
            self.assertEqual(file.max_age_days, 0)
            self.assertEqual(file.size_bytes, 0)
            self.assertEqual(file.created, None)

    def test_convert_old_to_new_manifest(self):
        path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data_examples', 'data4')
        os.environ["KBC_DATADIR"] = path

        ci = CommonInterface()
        tables = ci.get_input_tables_definitions()

        os.environ['KBC_DATA_TYPE_SUPPORT'] = "authoritative"

        new_manifest = tables[0].get_manifest_dictionary('out')

        self.assertEqual({
            'write_always': False,
            'delimiter': ',',
            'enclosure': '"',
            'manifest_type': 'out',
            'has_header': True,
            'schema': [
                {'name': 'x', 'data_type': {'base': {'type': 'STRING'}}, 'nullable': True, 'metadata': {'foo': 'gogo'}},
                {'name': 'Sales', 'data_type': {'base': {'type': 'STRING'}}, 'nullable': True},
                {'name': 'CompPrice', 'data_type': {'base': {'type': 'STRING'}}, 'nullable': True},
                {'name': 'Income', 'data_type': {'base': {'type': 'STRING'}}, 'nullable': True},
                {'name': 'Advertising', 'data_type': {'base': {'type': 'STRING'}}, 'nullable': True},
                {'name': 'Population', 'data_type': {'base': {'type': 'STRING'}}, 'nullable': True},
                {'name': 'Price', 'data_type': {'base': {'type': 'STRING'}}, 'nullable': True},
                {'name': 'ShelveLoc', 'data_type': {'base': {'type': 'STRING'}}, 'nullable': True},
                {'name': 'Age', 'data_type': {'base': {'type': 'STRING'}}, 'nullable': True},
                {'name': 'Education', 'data_type': {'base': {'type': 'STRING'}}, 'nullable': True},
                {'name': 'Urban', 'data_type': {'base': {'type': 'STRING'}}, 'nullable': True},
                {'name': 'US', 'data_type': {'base': {'type': 'STRING'}}, 'nullable': True},
                {'name': 'High', 'data_type': {'base': {'type': 'STRING'}}, 'nullable': True}]
        }, new_manifest)

        del os.environ['KBC_DATA_TYPE_SUPPORT']

    def test_convert_new_to_old_manifest_has_header_false(self):
        path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data_examples', 'data_new_manifest')
        os.environ["KBC_DATADIR"] = path

        ci = CommonInterface()
        tables = ci.get_input_tables_definitions()

        old_manifest = tables[0].get_manifest_dictionary('out', legacy_manifest=True)

        self.assertEqual({
            'columns': ['x', 'Sales', 'CompPrice', 'Income', 'Advertising', 'Population', 'Price', 'ShelveLoc', 'Age',
                        'Education', 'Urban', 'US', 'High'],
            'delimiter': ',',
            'enclosure': '"',
            'incremental': False,
            'write_always': False
        }, old_manifest)

    def test_convert_new_to_old_manifest_storage_param(self):
        path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data_examples',
                            'data_storage_parameter_data_types')
        os.environ["KBC_DATADIR"] = path
        os.environ['KBC_DATA_TYPE_SUPPORT'] = 'authoritative'

        ci = CommonInterface()
        tables = ci.get_input_tables_definitions()

        ci.write_manifests([tables[0]])
        manifest_filename = tables[0].full_path + '.manifest'
        with open(manifest_filename) as manifest_file:
            old_manifest = json.load(manifest_file)

        self.assertEqual({
            'columns': ['x', 'Sales', 'CompPrice', 'Income', 'Advertising', 'Population', 'Price', 'ShelveLoc', 'Age',
                        'Education', 'Urban', 'US', 'High'],
            'delimiter': ',',
            'enclosure': '"',
            'incremental': False,
            'write_always': False
        }, old_manifest)

    def test_full_input_manifest(self):
        path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data_examples', 'data_full_input_manifest')
        os.environ["KBC_DATADIR"] = path

        ci = CommonInterface()
        tables = ci.get_input_tables_definitions()

        ci.write_manifests([tables[0]])
        manifest_filename = tables[0].full_path + '.manifest'
        with open(manifest_filename) as manifest_file:
            old_manifest = json.load(manifest_file)

        self.assertEqual({
            'id': 'in.c-main.test',
            'uri': 'https://connection.keboola.com//v2/storage/tables/in.c-main.test',
            'name': 'sample.csv',
            'created': '2015-11-02T09:11:37+0100',
            'last_change_date': '2015-11-02T09:11:37+0100',
            'last_import_date': '2015-11-02T09:11:37+0100',
            'rows_count': 400,
            'data_size_bytes': 81920,
            'is_alias': False,
            'indexed_columns': ['x'],
            'primary_key': ['x'],
            'column_metadata': {'x': [{'key': 'foo', 'value': 'gogo'}]},
            'columns': ['x', 'Sales', 'CompPrice', 'Income', 'Advertising', 'Population', 'Price', 'ShelveLoc', 'Age',
                        'Education', 'Urban', 'US', 'High']
        }, old_manifest)

    def test_full_input_manifest_dtypes_support(self):
        path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data_examples', 'data_full_input_manifest')
        os.environ["KBC_DATADIR"] = path
        os.environ['KBC_DATA_TYPE_SUPPORT'] = 'authoritative'

        ci = CommonInterface()
        tables = ci.get_input_tables_definitions()

        ci.write_manifests([tables[0]])
        manifest_filename = tables[0].full_path + '.manifest'
        with open(manifest_filename) as manifest_file:
            old_manifest = json.load(manifest_file)

        self.maxDiff = None

        self.assertEqual({
            'id': 'in.c-main.test',
            'uri': 'https://connection.keboola.com//v2/storage/tables/in.c-main.test',
            'name': 'sample.csv',
            'created': '2015-11-02T09:11:37+0100',
            'last_change_date': '2015-11-02T09:11:37+0100',
            'last_import_date': '2015-11-02T09:11:37+0100',
            'rows_count': 400,
            'data_size_bytes': 81920,
            'is_alias': False,
            'indexed_columns': ['x'],
            'primary_key': ['x'],
            'column_metadata': {'x': [{'key': 'foo', 'value': 'gogo'}]},
            'columns': ['x', 'Sales', 'CompPrice', 'Income', 'Advertising', 'Population', 'Price', 'ShelveLoc', 'Age',
                        'Education', 'Urban', 'US', 'High']
        }, old_manifest)

    def test_separator_delimiter(self):
        path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data_examples', 'data5')
        os.environ["KBC_DATADIR"] = path

        ci = CommonInterface()
        tables = ci.get_input_tables_definitions()

        old_manifest = tables[0].get_manifest_dictionary('out', legacy_manifest=True)

        self.assertEqual({
            'columns': [
                'x',
                'Sales',
                'CompPrice',
                'Income',
                'Advertising',
                'Population',
                'Price',
                'ShelveLoc',
                'Age',
                'Education',
                'Urban',
                'US',
                'High'
            ],
            'delimiter': '\t',
            'enclosure': "'",
            'incremental': True,
            'primary_key': [
                'x'
            ],
            'write_always': False,
            'delete_where_column': 'Advertising',
            'delete_where_values': ['Video', 'Search'],
            'delete_where_operator': 'eq',
            'destination': 'out.c-main.Leads'
        }, old_manifest)

    def test_separator_delimiter_dtypes(self):
        path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data_examples', 'data5')
        os.environ["KBC_DATADIR"] = path

        ci = CommonInterface()
        tables = ci.get_input_tables_definitions()

        os.environ['KBC_DATA_TYPE_SUPPORT'] = "authoritative"

        new_manifest = tables[0].get_manifest_dictionary('out')

        self.assertEqual({
            'write_always': False,
            'delimiter': '\t',
            'enclosure': '\'',
            'manifest_type': 'out',
            'has_header': False,
            'incremental': True,
            'schema': [
                {'name': 'x', 'data_type': {'base': {'type': 'STRING'}}, 'nullable': True, 'primary_key': True},
                {'name': 'Sales', 'data_type': {'base': {'type': 'STRING'}}, 'nullable': True},
                {'name': 'CompPrice', 'data_type': {'base': {'type': 'STRING'}}, 'nullable': True},
                {'name': 'Income', 'data_type': {'base': {'type': 'STRING'}}, 'nullable': True},
                {'name': 'Advertising', 'data_type': {'base': {'type': 'STRING'}}, 'nullable': True},
                {'name': 'Population', 'data_type': {'base': {'type': 'STRING'}}, 'nullable': True},
                {'name': 'Price', 'data_type': {'base': {'type': 'STRING'}}, 'nullable': True},
                {'name': 'ShelveLoc', 'data_type': {'base': {'type': 'STRING'}}, 'nullable': True},
                {'name': 'Age', 'data_type': {'base': {'type': 'STRING'}}, 'nullable': True},
                {'name': 'Education', 'data_type': {'base': {'type': 'STRING'}}, 'nullable': True},
                {'name': 'Urban', 'data_type': {'base': {'type': 'STRING'}}, 'nullable': True},
                {'name': 'US', 'data_type': {'base': {'type': 'STRING'}}, 'nullable': True},
                {'name': 'High', 'data_type': {'base': {'type': 'STRING'}}, 'nullable': True}],
            'delete_where_column': 'Advertising',
            'delete_where_values': ['Video', 'Search'],
            'delete_where_operator': 'eq',
            'destination': 'out.c-main.Leads'
        }, new_manifest)

        del os.environ['KBC_DATA_TYPE_SUPPORT']


class TestConfiguration(unittest.TestCase):

    def setUp(self):
        path = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                            'data_examples', 'data1')
        os.environ["KBC_DATADIR"] = path

    def test_missing_config(self):
        with self.assertRaisesRegex(
                ValueError,
                "Configuration file config.json not found"):
            Configuration('/non-existent/')

    def test_get_parameters(self):
        cfg = Configuration(os.environ["KBC_DATADIR"])
        params = cfg.parameters
        self.assertEqual({'fooBar': {'bar': 24, 'foo': 42}, 'baz': 'bazBar'},
                         params)
        self.assertEqual(params['fooBar']['foo'], 42)
        self.assertEqual(params['fooBar']['bar'], 24)

    def test_get_action(self):
        cfg = Configuration(os.environ["KBC_DATADIR"])

        self.assertEqual(cfg.action, 'run')

    def test_get_action_empty_config(self):
        cfg = Configuration(os.path.join(os.getenv('KBC_DATADIR', ''), '..',
                                         'data2'))
        self.assertEqual(cfg.action, '')

    def test_get_input_mappings(self):
        cfg = Configuration(os.environ["KBC_DATADIR"])
        tables = cfg.tables_input_mapping

        self.assertEqual(len(tables), 2)
        for table in tables:
            if table['destination'] == 'sample.csv':
                self.assertEqual(table['source'], 'in.c-main.test')
            else:
                self.assertEqual('in.c-main.test2', table['source'])

    def test_get_input_mappings_with_column_types(self):
        path = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                            'data_examples', 'data4')
        cfg = Configuration(path)
        tables = cfg.tables_input_mapping
        coltypes = tables[0].column_types[0]
        source = coltypes.source
        self.assertEqual(source, "Sales")
        column_type = coltypes.type
        self.assertEqual(column_type, "VARCHAR")
        destination = coltypes.destination
        self.assertEqual(destination, "id")
        length = coltypes.length
        self.assertEqual(length, "255")
        nullable = coltypes.nullable
        self.assertEqual(nullable, False)
        convert_empty_values_to_null = coltypes.convert_empty_values_to_null
        self.assertEqual(convert_empty_values_to_null, False)

    def test_get_output_mapping(self):
        cfg = Configuration(os.environ["KBC_DATADIR"])
        tables = cfg.tables_output_mapping
        self.assertEqual(len(tables), 2)
        self.assertEqual(tables[0]['source'], 'results.csv')
        self.assertEqual(tables[1]['source'], 'results-new.csv')

    def test_empty_storage(self):
        cfg = Configuration(os.path.join(os.getenv('KBC_DATADIR', ''), '..',
                                         'data2'))
        self.assertEqual(cfg.tables_output_mapping, [])
        self.assertEqual(cfg.files_output_mapping, [])
        self.assertEqual(cfg.tables_input_mapping, [])
        self.assertEqual(cfg.files_input_mapping, [])
        self.assertEqual(cfg.parameters, {})

    def test_empty_params(self):
        cfg = Configuration(os.path.join(os.getenv('KBC_DATADIR', ''), '..',
                                         'data3'))
        self.assertEqual([], cfg.tables_output_mapping)
        self.assertEqual([], cfg.files_output_mapping)
        self.assertEqual({}, cfg.parameters)

    def test_get_authorization(self):
        cfg = Configuration(os.environ["KBC_DATADIR"])
        auth = cfg.oauth_credentials
        # self.assertEqual(auth['id'], "123456")
        self.assertEqual(auth["id"], "main")

    def test_get_oauthapi_data(self):
        cfg = Configuration(os.environ["KBC_DATADIR"])
        self.assertDictEqual(cfg.oauth_credentials.data, {"mykey": "myval"})

    def test_get_oauthapi_appsecret(self):
        cfg = Configuration(os.environ["KBC_DATADIR"])
        self.assertEqual(cfg.oauth_credentials.appSecret, "myappsecret")

    def test_get_oauthapi_appkey(self):
        cfg = Configuration(os.environ["KBC_DATADIR"])
        self.assertEqual(cfg.oauth_credentials.appKey, "myappkey")

    # def test_file_manifest(self):
    #     cfg = docker.Config()
    #     some_file = os.path.join(tempfile.mkdtemp('kbc-test') + 'someFile.txt')
    #     cfg.write_file_manifest(some_file, file_tags=['foo', 'bar'],
    #                             is_public=True, is_permanent=False,
    #                             notify=True)
    #     manifest_filename = some_file + '.manifest'
    #     with open(manifest_filename) as manifest_file:
    #         config = json.load(manifest_file)
    #     self.assertEqual(
    #         {'is_public': True, 'is_permanent': False, 'notify': True,
    #          'tags': ['foo', 'bar']},
    #         config
    #     )
    #     os.remove(manifest_filename)


if __name__ == '__main__':
    unittest.main()


================================================
File: tests/test_schema.py
================================================
import os
import unittest

from keboola.component.base import ComponentBase


class MockComponent(ComponentBase):
    def run(self):
        return 'run_executed'


class TestCommonInterface(unittest.TestCase):

    def setUp(self):
        path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data_examples', 'data1')
        os.environ["KBC_DATADIR"] = path
        # to simulate kbc run
        os.environ["KBC_STACKID"] = 'test'

    def test_create_out_table_definition_from_schema_name(self):
        schema_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'schema_examples', 'schemas')
        comp = MockComponent(schema_path_override=schema_path)
        order_schema = comp.get_table_schema_by_name(schema_name="order")
        order_table_definition_from_schema = comp.create_out_table_definition_from_schema(order_schema)
        self.assertEqual("order.csv", order_table_definition_from_schema.name)
        self.assertEqual(["id", "product_id", "quantity"], order_table_definition_from_schema.columns)
        self.assertEqual(["id"], order_table_definition_from_schema.primary_key)

    def test_created_manifest_against_schema(self):
        schema_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'schema_examples', 'schemas')
        comp = MockComponent(schema_path_override=schema_path)
        order_schema = comp.get_table_schema_by_name(schema_name="order")
        order_table_definition_from_schema = comp.create_out_table_definition_from_schema(order_schema)
        manifest_dict = order_table_definition_from_schema.get_manifest_dictionary(legacy_manifest=True)
        expected_manifest = {'primary_key': ['id'], 'columns': ['id', 'product_id', 'quantity'], 'enclosure': '"',
                             'delimiter': ',',
                             'write_always': False,
                             'metadata': [{'key': 'KBC.description', 'value': 'this table holds data on orders'}],
                             'column_metadata': {'id': [{'key': 'KBC.description', 'value': 'ID of the order'},
                                                        {'key': 'KBC.datatype.basetype', 'value': 'STRING'},
                                                        {'key': 'KBC.datatype.nullable', 'value': False}],
                                                 'product_id': [
                                                     {'key': 'KBC.description', 'value': 'Id of the product in order'},
                                                     {'key': 'KBC.datatype.basetype', 'value': 'NUMERIC'},
                                                     {'key': 'KBC.datatype.nullable', 'value': False}],
                                                 'quantity': [
                                                     {'key': 'KBC.description',
                                                      'value': 'Quantity of the product in order'},
                                                     {'key': 'KBC.datatype.basetype', 'value': 'STRING'},
                                                     {'key': 'KBC.datatype.nullable', 'value': False}]}}
        self.assertEqual(expected_manifest, manifest_dict)

    def test_created_manifest_against_schema_new_manifest(self):
        os.environ['KBC_DATA_TYPE_SUPPORT'] = "authoritative"

        schema_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'schema_examples', 'schemas')
        comp = MockComponent(schema_path_override=schema_path)
        order_schema = comp.get_table_schema_by_name(schema_name="order")
        order_table_definition_from_schema = comp.create_out_table_definition_from_schema(order_schema)
        manifest_dict = order_table_definition_from_schema.get_manifest_dictionary(legacy_manifest=False)

        expected_manifest = {'delimiter': ',',
                             'enclosure': '"',
                             'has_header': False,
                             'manifest_type': 'out',
                             'table_metadata': {'KBC.description': 'this table holds data on orders'},
                             'schema': [{'data_type': {'base': {'type': 'STRING'}},
                                         'description': 'ID of the order',
                                         'name': 'id',
                                         'primary_key': True},
                                        {'data_type': {'base': {'type': 'NUMERIC'}},
                                         'description': 'Id of the product in order',
                                         'name': 'product_id'},
                                        {'data_type': {'base': {'type': 'STRING'}},
                                         'description': 'Quantity of the product in order',
                                         'name': 'quantity'}],
                             'write_always': False}
        del os.environ['KBC_DATA_TYPE_SUPPORT']
        self.assertEqual(expected_manifest, manifest_dict)

    def test_invalid_column_schema_raises_key_error(self):
        with self.assertRaises(KeyError):
            schema_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'schema_examples', 'faulty-schemas')
            comp = MockComponent(schema_path_override=schema_path)
            table_schema = comp.get_table_schema_by_name(schema_name="invalid_column_schema")
            comp.create_out_table_definition_from_schema(table_schema)

    def test_invalid_schema_raises_key_error(self):
        with self.assertRaises(KeyError):
            schema_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'schema_examples', 'faulty-schemas')
            comp = MockComponent(schema_path_override=schema_path)
            table_schema = comp.get_table_schema_by_name(schema_name="invalid_table_schema")
            comp.create_out_table_definition_from_schema(table_schema)

    def test_missing_schema_raises_key_error(self):
        with self.assertRaises(FileNotFoundError):
            schema_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'schema_examples', 'faulty-schemas')
            comp = MockComponent(schema_path_override=schema_path)
            table_schema = comp.get_table_schema_by_name(schema_name="missing")
            comp.create_out_table_definition_from_schema(table_schema)

    def test_invalid_schema_path_raises_key_error(self):
        with self.assertRaises(FileNotFoundError):
            schema_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'schema_examples', 'missing')
            comp = MockComponent(schema_path_override=schema_path)
            table_schema = comp.get_table_schema_by_name(schema_name="missing")
            comp.create_out_table_definition_from_schema(table_schema)

    def test_invalid_base_type_raises_key_error(self):
        with self.assertRaises(ValueError):
            schema_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'schema_examples', 'faulty-schemas')
            comp = MockComponent(schema_path_override=schema_path)
            table_schema = comp.get_table_schema_by_name(schema_name="invalid_base_type")
            comp.create_out_table_definition_from_schema(table_schema)


if __name__ == '__main__':
    unittest.main()


================================================
File: tests/test_sync_actions.py
================================================
import unittest

from keboola.component.sync_actions import SelectElement, ValidationResult, process_sync_action_result, MessageType


class TestSyncActions(unittest.TestCase):

    def test_select_element_return_value(self):
        select_options = [SelectElement("value_a", "label_a"),
                          SelectElement("value_b")]
        expected = '[{"value": "value_a", "label": "label_a"}, {"value": "value_b", "label": "value_b"}]'
        self.assertEqual(process_sync_action_result(select_options), expected)

    def test_select_element_return_value_legacy(self):
        select_options = [dict(value="value_a", label="label_a"),
                          dict(value="value_b", label="value_b")]
        expected = '[{"value": "value_a", "label": "label_a"}, {"value": "value_b", "label": "value_b"}]'
        self.assertEqual(process_sync_action_result(select_options), expected)

    def test_validation_result_value(self):
        result = ValidationResult("Some Message", MessageType.WARNING)
        expected = '{"message": "Some Message", "type": "warning", "status": "success"}'
        self.assertEqual(process_sync_action_result(result), expected)

        # default type
        result = ValidationResult("Some Message")
        expected = '{"message": "Some Message", "type": "info", "status": "success"}'
        self.assertEqual(process_sync_action_result(result), expected)


================================================
File: tests/data_examples/data1/config.json
================================================
{
    "storage": {
        "input": {
            "files": [
                {
                    "tags": [
                        "dilbert"
                    ],
                    "processed_tags": []
                },
                {
                    "tags": [
                        "xkcd"
                    ],
                    "processed_tags": []
                }
            ],
            "tables": [
                {
                    "source": "in.c-main.test",
                    "destination": "sample.csv",
                    "columns": [],
                    "where_values": [],
                    "where_operator": "eq"
                },
                {
                    "source": "in.c-main.test2",
                    "destination": "fooBar",
                    "columns": [],
                    "where_values": [],
                    "where_operator": "eq"
                }
            ]
        },
        "output": {
            "tables": [
                {
                    "source": "results.csv",
                    "destination": "out.c-main.test",
                    "incremental": false,
                    "primary_key": [],
                    "delete_where_values": [],
                    "delete_where_operator": "eq"
                },
                {
                    "source": "results-new.csv",
                    "destination": "out.c-main.test2",
                    "incremental": false,
                    "primary_key": [],
                    "delete_where_values": [],
                    "delete_where_operator": "eq"
                }
            ],
            "files": [
                {
                    "source": "processed.png",
                    "tags": [
                        "processed-file"
                    ],
                    "is_public": false,
                    "is_permanent": false,
                    "is_encrypted": true,
                    "notify": false
                }
            ]
        }
    },
    "parameters": {
        "fooBar": {
            "foo": 42,
            "bar": 24
        },
        "baz": "bazBar"
    },
    "action": "run",
    "authorization": {
        "oauth_api": {
            "id": "123456",
            "credentials": {
                "id": "main",
                "authorizedFor": "Myself",
                "creator": {
                    "id": "1234",
                    "description": "me@keboola.com"
                },
                "created": "2016-01-31 00:13:30",
                "oauthVersion": "2.0",
                "appKey": "myappkey",
                "#data": "{\"mykey\":\"myval\"}",
                "#appSecret": "myappsecret"
            }
        }
    }
}


================================================
File: tests/data_examples/data1/in/state.json
================================================
{
  "test_state": 1234
}

================================================
File: tests/data_examples/data1/in/files/151971405_21702.strip.print.gif.manifest
================================================
{
    "id": 151971405,
    "name": "21702.strip.print.gif",
    "created": "2015-11-01T20:14:19+0100",
    "is_public": false,
    "is_encrypted": true,
    "tags": [
        "dilbert"
    ],
    "max_age_days": 180,
    "size_bytes": 4931
}

================================================
File: tests/data_examples/data1/in/files/151971412_30221.strip.print.gif.manifest
================================================
{
    "id": 151971412,
    "name": "30221.strip.print.gif",
    "created": "2015-11-01T20:14:27+0100",
    "is_public": false,
    "is_encrypted": true,
    "tags": [
        "dilbert"
    ],
    "max_age_days": 180,
    "size_bytes": 21230
}

================================================
File: tests/data_examples/data1/in/files/151971423_5655.strip.print.gif.manifest
================================================
{
    "id": 151971423,
    "name": "5655.strip.print.gif",
    "created": "2015-11-01T20:14:35+0100",
    "is_public": false,
    "is_encrypted": true,
    "tags": [
        "dilbert"
    ],
    "max_age_days": 180,
    "size_bytes": 20276
}

================================================
File: tests/data_examples/data1/in/files/151971432_compiler_complaint.png.manifest
================================================
{
    "id": 151971432,
    "name": "compiler_complaint.png",
    "created": "2015-11-01T20:14:48+0100",
    "is_public": false,
    "is_encrypted": true,
    "tags": [
        "xkcd"
    ],
    "max_age_days": 180,
    "size_bytes": 14833
}

================================================
File: tests/data_examples/data1/in/files/151971450_duty_calls.png.manifest
================================================
{
    "id": 151971450,
    "name": "duty_calls.png",
    "created": "2015-11-01T20:14:57+0100",
    "is_public": false,
    "is_encrypted": true,
    "tags": [
        "xkcd"
    ],
    "max_age_days": 180,
    "size_bytes": 30027
}

================================================
File: tests/data_examples/data1/in/files/151971455_duty_calls.png.manifest
================================================
{
    "id": 151971455,
    "name": "duty_calls.png",
    "created": "2015-11-01T20:14:58+0100",
    "is_public": false,
    "is_encrypted": true,
    "tags": [
        "xkcd"
    ],
    "max_age_days": 200,
    "size_bytes": 30027
}

================================================
File: tests/data_examples/data1/in/tables/fooBar
================================================
"id","timestamp"


================================================
File: tests/data_examples/data1/in/tables/fooBar.manifest
================================================
{
    "id": "in.c-main.test2",
    "uri": "https:\/\/connection.keboola.com\/\/v2\/storage\/tables\/in.c-main.test2",
    "name": "fooBar",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2015-09-22T17:04:52+0200",
    "last_change_date": "2015-09-22T17:04:53+0200",
    "last_import_date": "2015-09-22T17:04:53+0200",
    "rows_count": 0,
    "data_size_bytes": 32768,
    "is_alias": false,
    "columns": [
        "id",
        "timestamp"
    ],
    "attributes": []
}

================================================
File: tests/data_examples/data1/in/tables/orphaned.csv
================================================
"id","timestamp"


================================================
File: tests/data_examples/data1/in/tables/orphaned_manifest.csv.manifest
================================================
{
    "id": "in.c-main.test",
    "uri": "https:\/\/connection.keboola.com\/\/v2\/storage\/tables\/in.c-main.test",
    "name": "orphaned_manifest.csv",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2015-11-02T09:11:37+0100",
    "last_change_date": "2015-11-02T09:11:37+0100",
    "last_import_date": "2015-11-02T09:11:37+0100",
    "rows_count": 400,
    "data_size_bytes": 81920,
    "is_alias": false,
    "columns": [
        "x",
        "Sales",
        "CompPrice",
        "Income",
        "Advertising",
        "Population",
        "Price",
        "ShelveLoc",
        "Age",
        "Education",
        "Urban",
        "US",
        "High"
    ],
    "attributes": []
}

================================================
File: tests/data_examples/data1/in/tables/sample.csv
================================================
"x","Sales","CompPrice","Income","Advertising","Population","Price","ShelveLoc","Age","Education","Urban","US","High"
"1","9.5","138","73","11","276","120","Bad","42","17","Yes","Yes","Yes"
"2","11.22","111","48","16","260","83","Good","65","10","Yes","Yes","Yes"
"3","10.06","113","35","10","269","80","Medium","59","12","Yes","Yes","Yes"
"4","7.4","117","100","4","466","97","Medium","55","14","Yes","Yes","No"
"5","4.15","141","64","3","340","128","Bad","38","13","Yes","No","No"
"6","10.81","124","113","13","501","72","Bad","78","16","No","Yes","Yes"
"7","6.63","115","105","0","45","108","Medium","71","15","Yes","No","No"
"8","11.85","136","81","15","425","120","Good","67","10","Yes","Yes","Yes"
"9","6.54","132","110","0","108","124","Medium","76","10","No","No","No"
"10","4.69","132","113","0","131","124","Medium","76","17","No","Yes","No"
"11","9.01","121","78","9","150","100","Bad","26","10","No","Yes","Yes"
"12","11.96","117","94","4","503","94","Good","50","13","Yes","Yes","Yes"
"13","3.98","122","35","2","393","136","Medium","62","18","Yes","No","No"
"14","10.96","115","28","11","29","86","Good","53","18","Yes","Yes","Yes"
"15","11.17","107","117","11","148","118","Good","52","18","Yes","Yes","Yes"
"16","8.71","149","95","5","400","144","Medium","76","18","No","No","Yes"
"17","7.58","118","32","0","284","110","Good","63","13","Yes","No","No"
"18","12.29","147","74","13","251","131","Good","52","10","Yes","Yes","Yes"
"19","13.91","110","110","0","408","68","Good","46","17","No","Yes","Yes"
"20","8.73","129","76","16","58","121","Medium","69","12","Yes","Yes","Yes"
"21","6.41","125","90","2","367","131","Medium","35","18","Yes","Yes","No"
"22","12.13","134","29","12","239","109","Good","62","18","No","Yes","Yes"
"23","5.08","128","46","6","497","138","Medium","42","13","Yes","No","No"
"24","5.87","121","31","0","292","109","Medium","79","10","Yes","No","No"
"25","10.14","145","119","16","294","113","Bad","42","12","Yes","Yes","Yes"
"26","14.9","139","32","0","176","82","Good","54","11","No","No","Yes"
"27","8.33","107","115","11","496","131","Good","50","11","No","Yes","Yes"
"28","5.27","98","118","0","19","107","Medium","64","17","Yes","No","No"
"29","2.99","103","74","0","359","97","Bad","55","11","Yes","Yes","No"
"30","7.81","104","99","15","226","102","Bad","58","17","Yes","Yes","No"
"31","13.55","125","94","0","447","89","Good","30","12","Yes","No","Yes"
"32","8.25","136","58","16","241","131","Medium","44","18","Yes","Yes","Yes"
"33","6.2","107","32","12","236","137","Good","64","10","No","Yes","No"
"34","8.77","114","38","13","317","128","Good","50","16","Yes","Yes","Yes"
"35","2.67","115","54","0","406","128","Medium","42","17","Yes","Yes","No"
"36","11.07","131","84","11","29","96","Medium","44","17","No","Yes","Yes"
"37","8.89","122","76","0","270","100","Good","60","18","No","No","Yes"
"38","4.95","121","41","5","412","110","Medium","54","10","Yes","Yes","No"
"39","6.59","109","73","0","454","102","Medium","65","15","Yes","No","No"
"40","3.24","130","60","0","144","138","Bad","38","10","No","No","No"
"41","2.07","119","98","0","18","126","Bad","73","17","No","No","No"
"42","7.96","157","53","0","403","124","Bad","58","16","Yes","No","No"
"43","10.43","77","69","0","25","24","Medium","50","18","Yes","No","Yes"
"44","4.12","123","42","11","16","134","Medium","59","13","Yes","Yes","No"
"45","4.16","85","79","6","325","95","Medium","69","13","Yes","Yes","No"
"46","4.56","141","63","0","168","135","Bad","44","12","Yes","Yes","No"
"47","12.44","127","90","14","16","70","Medium","48","15","No","Yes","Yes"
"48","4.38","126","98","0","173","108","Bad","55","16","Yes","No","No"
"49","3.91","116","52","0","349","98","Bad","69","18","Yes","No","No"
"50","10.61","157","93","0","51","149","Good","32","17","Yes","No","Yes"
"51","1.42","99","32","18","341","108","Bad","80","16","Yes","Yes","No"
"52","4.42","121","90","0","150","108","Bad","75","16","Yes","No","No"
"53","7.91","153","40","3","112","129","Bad","39","18","Yes","Yes","No"
"54","6.92","109","64","13","39","119","Medium","61","17","Yes","Yes","No"
"55","4.9","134","103","13","25","144","Medium","76","17","No","Yes","No"
"56","6.85","143","81","5","60","154","Medium","61","18","Yes","Yes","No"
"57","11.91","133","82","0","54","84","Medium","50","17","Yes","No","Yes"
"58","0.91","93","91","0","22","117","Bad","75","11","Yes","No","No"
"59","5.42","103","93","15","188","103","Bad","74","16","Yes","Yes","No"
"60","5.21","118","71","4","148","114","Medium","80","13","Yes","No","No"
"61","8.32","122","102","19","469","123","Bad","29","13","Yes","Yes","Yes"
"62","7.32","105","32","0","358","107","Medium","26","13","No","No","No"
"63","1.82","139","45","0","146","133","Bad","77","17","Yes","Yes","No"
"64","8.47","119","88","10","170","101","Medium","61","13","Yes","Yes","Yes"
"65","7.8","100","67","12","184","104","Medium","32","16","No","Yes","No"
"66","4.9","122","26","0","197","128","Medium","55","13","No","No","No"
"67","8.85","127","92","0","508","91","Medium","56","18","Yes","No","Yes"
"68","9.01","126","61","14","152","115","Medium","47","16","Yes","Yes","Yes"
"69","13.39","149","69","20","366","134","Good","60","13","Yes","Yes","Yes"
"70","7.99","127","59","0","339","99","Medium","65","12","Yes","No","No"
"71","9.46","89","81","15","237","99","Good","74","12","Yes","Yes","Yes"
"72","6.5","148","51","16","148","150","Medium","58","17","No","Yes","No"
"73","5.52","115","45","0","432","116","Medium","25","15","Yes","No","No"
"74","12.61","118","90","10","54","104","Good","31","11","No","Yes","Yes"
"75","6.2","150","68","5","125","136","Medium","64","13","No","Yes","No"
"76","8.55","88","111","23","480","92","Bad","36","16","No","Yes","Yes"
"77","10.64","102","87","10","346","70","Medium","64","15","Yes","Yes","Yes"
"78","7.7","118","71","12","44","89","Medium","67","18","No","Yes","No"
"79","4.43","134","48","1","139","145","Medium","65","12","Yes","Yes","No"
"80","9.14","134","67","0","286","90","Bad","41","13","Yes","No","Yes"
"81","8.01","113","100","16","353","79","Bad","68","11","Yes","Yes","Yes"
"82","7.52","116","72","0","237","128","Good","70","13","Yes","No","No"
"83","11.62","151","83","4","325","139","Good","28","17","Yes","Yes","Yes"
"84","4.42","109","36","7","468","94","Bad","56","11","Yes","Yes","No"
"85","2.23","111","25","0","52","121","Bad","43","18","No","No","No"
"86","8.47","125","103","0","304","112","Medium","49","13","No","No","Yes"
"87","8.7","150","84","9","432","134","Medium","64","15","Yes","No","Yes"
"88","11.7","131","67","7","272","126","Good","54","16","No","Yes","Yes"
"89","6.56","117","42","7","144","111","Medium","62","10","Yes","Yes","No"
"90","7.95","128","66","3","493","119","Medium","45","16","No","No","No"
"91","5.33","115","22","0","491","103","Medium","64","11","No","No","No"
"92","4.81","97","46","11","267","107","Medium","80","15","Yes","Yes","No"
"93","4.53","114","113","0","97","125","Medium","29","12","Yes","No","No"
"94","8.86","145","30","0","67","104","Medium","55","17","Yes","No","Yes"
"95","8.39","115","97","5","134","84","Bad","55","11","Yes","Yes","Yes"
"96","5.58","134","25","10","237","148","Medium","59","13","Yes","Yes","No"
"97","9.48","147","42","10","407","132","Good","73","16","No","Yes","Yes"
"98","7.45","161","82","5","287","129","Bad","33","16","Yes","Yes","No"
"99","12.49","122","77","24","382","127","Good","36","16","No","Yes","Yes"
"100","4.88","121","47","3","220","107","Bad","56","16","No","Yes","No"
"101","4.11","113","69","11","94","106","Medium","76","12","No","Yes","No"
"102","6.2","128","93","0","89","118","Medium","34","18","Yes","No","No"
"103","5.3","113","22","0","57","97","Medium","65","16","No","No","No"
"104","5.07","123","91","0","334","96","Bad","78","17","Yes","Yes","No"
"105","4.62","121","96","0","472","138","Medium","51","12","Yes","No","No"
"106","5.55","104","100","8","398","97","Medium","61","11","Yes","Yes","No"
"107","0.16","102","33","0","217","139","Medium","70","18","No","No","No"
"108","8.55","134","107","0","104","108","Medium","60","12","Yes","No","Yes"
"109","3.47","107","79","2","488","103","Bad","65","16","Yes","No","No"
"110","8.98","115","65","0","217","90","Medium","60","17","No","No","Yes"
"111","9","128","62","7","125","116","Medium","43","14","Yes","Yes","Yes"
"112","6.62","132","118","12","272","151","Medium","43","14","Yes","Yes","No"
"113","6.67","116","99","5","298","125","Good","62","12","Yes","Yes","No"
"114","6.01","131","29","11","335","127","Bad","33","12","Yes","Yes","No"
"115","9.31","122","87","9","17","106","Medium","65","13","Yes","Yes","Yes"
"116","8.54","139","35","0","95","129","Medium","42","13","Yes","No","Yes"
"117","5.08","135","75","0","202","128","Medium","80","10","No","No","No"
"118","8.8","145","53","0","507","119","Medium","41","12","Yes","No","Yes"
"119","7.57","112","88","2","243","99","Medium","62","11","Yes","Yes","No"
"120","7.37","130","94","8","137","128","Medium","64","12","Yes","Yes","No"
"121","6.87","128","105","11","249","131","Medium","63","13","Yes","Yes","No"
"122","11.67","125","89","10","380","87","Bad","28","10","Yes","Yes","Yes"
"123","6.88","119","100","5","45","108","Medium","75","10","Yes","Yes","No"
"124","8.19","127","103","0","125","155","Good","29","15","No","Yes","Yes"
"125","8.87","131","113","0","181","120","Good","63","14","Yes","No","Yes"
"126","9.34","89","78","0","181","49","Medium","43","15","No","No","Yes"
"127","11.27","153","68","2","60","133","Good","59","16","Yes","Yes","Yes"
"128","6.52","125","48","3","192","116","Medium","51","14","Yes","Yes","No"
"129","4.96","133","100","3","350","126","Bad","55","13","Yes","Yes","No"
"130","4.47","143","120","7","279","147","Bad","40","10","No","Yes","No"
"131","8.41","94","84","13","497","77","Medium","51","12","Yes","Yes","Yes"
"132","6.5","108","69","3","208","94","Medium","77","16","Yes","No","No"
"133","9.54","125","87","9","232","136","Good","72","10","Yes","Yes","Yes"
"134","7.62","132","98","2","265","97","Bad","62","12","Yes","Yes","No"
"135","3.67","132","31","0","327","131","Medium","76","16","Yes","No","No"
"136","6.44","96","94","14","384","120","Medium","36","18","No","Yes","No"
"137","5.17","131","75","0","10","120","Bad","31","18","No","No","No"
"138","6.52","128","42","0","436","118","Medium","80","11","Yes","No","No"
"139","10.27","125","103","12","371","109","Medium","44","10","Yes","Yes","Yes"
"140","12.3","146","62","10","310","94","Medium","30","13","No","Yes","Yes"
"141","6.03","133","60","10","277","129","Medium","45","18","Yes","Yes","No"
"142","6.53","140","42","0","331","131","Bad","28","15","Yes","No","No"
"143","7.44","124","84","0","300","104","Medium","77","15","Yes","No","No"
"144","0.53","122","88","7","36","159","Bad","28","17","Yes","Yes","No"
"145","9.09","132","68","0","264","123","Good","34","11","No","No","Yes"
"146","8.77","144","63","11","27","117","Medium","47","17","Yes","Yes","Yes"
"147","3.9","114","83","0","412","131","Bad","39","14","Yes","No","No"
"148","10.51","140","54","9","402","119","Good","41","16","No","Yes","Yes"
"149","7.56","110","119","0","384","97","Medium","72","14","No","Yes","No"
"150","11.48","121","120","13","140","87","Medium","56","11","Yes","Yes","Yes"
"151","10.49","122","84","8","176","114","Good","57","10","No","Yes","Yes"
"152","10.77","111","58","17","407","103","Good","75","17","No","Yes","Yes"
"153","7.64","128","78","0","341","128","Good","45","13","No","No","No"
"154","5.93","150","36","7","488","150","Medium","25","17","No","Yes","No"
"155","6.89","129","69","10","289","110","Medium","50","16","No","Yes","No"
"156","7.71","98","72","0","59","69","Medium","65","16","Yes","No","No"
"157","7.49","146","34","0","220","157","Good","51","16","Yes","No","No"
"158","10.21","121","58","8","249","90","Medium","48","13","No","Yes","Yes"
"159","12.53","142","90","1","189","112","Good","39","10","No","Yes","Yes"
"160","9.32","119","60","0","372","70","Bad","30","18","No","No","Yes"
"161","4.67","111","28","0","486","111","Medium","29","12","No","No","No"
"162","2.93","143","21","5","81","160","Medium","67","12","No","Yes","No"
"163","3.63","122","74","0","424","149","Medium","51","13","Yes","No","No"
"164","5.68","130","64","0","40","106","Bad","39","17","No","No","No"
"165","8.22","148","64","0","58","141","Medium","27","13","No","Yes","Yes"
"166","0.37","147","58","7","100","191","Bad","27","15","Yes","Yes","No"
"167","6.71","119","67","17","151","137","Medium","55","11","Yes","Yes","No"
"168","6.71","106","73","0","216","93","Medium","60","13","Yes","No","No"
"169","7.3","129","89","0","425","117","Medium","45","10","Yes","No","No"
"170","11.48","104","41","15","492","77","Good","73","18","Yes","Yes","Yes"
"171","8.01","128","39","12","356","118","Medium","71","10","Yes","Yes","Yes"
"172","12.49","93","106","12","416","55","Medium","75","15","Yes","Yes","Yes"
"173","9.03","104","102","13","123","110","Good","35","16","Yes","Yes","Yes"
"174","6.38","135","91","5","207","128","Medium","66","18","Yes","Yes","No"
"175","0","139","24","0","358","185","Medium","79","15","No","No","No"
"176","7.54","115","89","0","38","122","Medium","25","12","Yes","No","No"
"177","5.61","138","107","9","480","154","Medium","47","11","No","Yes","No"
"178","10.48","138","72","0","148","94","Medium","27","17","Yes","Yes","Yes"
"179","10.66","104","71","14","89","81","Medium","25","14","No","Yes","Yes"
"180","7.78","144","25","3","70","116","Medium","77","18","Yes","Yes","No"
"181","4.94","137","112","15","434","149","Bad","66","13","Yes","Yes","No"
"182","7.43","121","83","0","79","91","Medium","68","11","Yes","No","No"
"183","4.74","137","60","4","230","140","Bad","25","13","Yes","No","No"
"184","5.32","118","74","6","426","102","Medium","80","18","Yes","Yes","No"
"185","9.95","132","33","7","35","97","Medium","60","11","No","Yes","Yes"
"186","10.07","130","100","11","449","107","Medium","64","10","Yes","Yes","Yes"
"187","8.68","120","51","0","93","86","Medium","46","17","No","No","Yes"
"188","6.03","117","32","0","142","96","Bad","62","17","Yes","No","No"
"189","8.07","116","37","0","426","90","Medium","76","15","Yes","No","Yes"
"190","12.11","118","117","18","509","104","Medium","26","15","No","Yes","Yes"
"191","8.79","130","37","13","297","101","Medium","37","13","No","Yes","Yes"
"192","6.67","156","42","13","170","173","Good","74","14","Yes","Yes","No"
"193","7.56","108","26","0","408","93","Medium","56","14","No","No","No"
"194","13.28","139","70","7","71","96","Good","61","10","Yes","Yes","Yes"
"195","7.23","112","98","18","481","128","Medium","45","11","Yes","Yes","No"
"196","4.19","117","93","4","420","112","Bad","66","11","Yes","Yes","No"
"197","4.1","130","28","6","410","133","Bad","72","16","Yes","Yes","No"
"198","2.52","124","61","0","333","138","Medium","76","16","Yes","No","No"
"199","3.62","112","80","5","500","128","Medium","69","10","Yes","Yes","No"
"200","6.42","122","88","5","335","126","Medium","64","14","Yes","Yes","No"
"201","5.56","144","92","0","349","146","Medium","62","12","No","No","No"
"202","5.94","138","83","0","139","134","Medium","54","18","Yes","No","No"
"203","4.1","121","78","4","413","130","Bad","46","10","No","Yes","No"
"204","2.05","131","82","0","132","157","Bad","25","14","Yes","No","No"
"205","8.74","155","80","0","237","124","Medium","37","14","Yes","No","Yes"
"206","5.68","113","22","1","317","132","Medium","28","12","Yes","No","No"
"207","4.97","162","67","0","27","160","Medium","77","17","Yes","Yes","No"
"208","8.19","111","105","0","466","97","Bad","61","10","No","No","Yes"
"209","7.78","86","54","0","497","64","Bad","33","12","Yes","No","No"
"210","3.02","98","21","11","326","90","Bad","76","11","No","Yes","No"
"211","4.36","125","41","2","357","123","Bad","47","14","No","Yes","No"
"212","9.39","117","118","14","445","120","Medium","32","15","Yes","Yes","Yes"
"213","12.04","145","69","19","501","105","Medium","45","11","Yes","Yes","Yes"
"214","8.23","149","84","5","220","139","Medium","33","10","Yes","Yes","Yes"
"215","4.83","115","115","3","48","107","Medium","73","18","Yes","Yes","No"
"216","2.34","116","83","15","170","144","Bad","71","11","Yes","Yes","No"
"217","5.73","141","33","0","243","144","Medium","34","17","Yes","No","No"
"218","4.34","106","44","0","481","111","Medium","70","14","No","No","No"
"219","9.7","138","61","12","156","120","Medium","25","14","Yes","Yes","Yes"
"220","10.62","116","79","19","359","116","Good","58","17","Yes","Yes","Yes"
"221","10.59","131","120","15","262","124","Medium","30","10","Yes","Yes","Yes"
"222","6.43","124","44","0","125","107","Medium","80","11","Yes","No","No"
"223","7.49","136","119","6","178","145","Medium","35","13","Yes","Yes","No"
"224","3.45","110","45","9","276","125","Medium","62","14","Yes","Yes","No"
"225","4.1","134","82","0","464","141","Medium","48","13","No","No","No"
"226","6.68","107","25","0","412","82","Bad","36","14","Yes","No","No"
"227","7.8","119","33","0","245","122","Good","56","14","Yes","No","No"
"228","8.69","113","64","10","68","101","Medium","57","16","Yes","Yes","Yes"
"229","5.4","149","73","13","381","163","Bad","26","11","No","Yes","No"
"230","11.19","98","104","0","404","72","Medium","27","18","No","No","Yes"
"231","5.16","115","60","0","119","114","Bad","38","14","No","No","No"
"232","8.09","132","69","0","123","122","Medium","27","11","No","No","Yes"
"233","13.14","137","80","10","24","105","Good","61","15","Yes","Yes","Yes"
"234","8.65","123","76","18","218","120","Medium","29","14","No","Yes","Yes"
"235","9.43","115","62","11","289","129","Good","56","16","No","Yes","Yes"
"236","5.53","126","32","8","95","132","Medium","50","17","Yes","Yes","No"
"237","9.32","141","34","16","361","108","Medium","69","10","Yes","Yes","Yes"
"238","9.62","151","28","8","499","135","Medium","48","10","Yes","Yes","Yes"
"239","7.36","121","24","0","200","133","Good","73","13","Yes","No","No"
"240","3.89","123","105","0","149","118","Bad","62","16","Yes","Yes","No"
"241","10.31","159","80","0","362","121","Medium","26","18","Yes","No","Yes"
"242","12.01","136","63","0","160","94","Medium","38","12","Yes","No","Yes"
"243","4.68","124","46","0","199","135","Medium","52","14","No","No","No"
"244","7.82","124","25","13","87","110","Medium","57","10","Yes","Yes","No"
"245","8.78","130","30","0","391","100","Medium","26","18","Yes","No","Yes"
"246","10","114","43","0","199","88","Good","57","10","No","Yes","Yes"
"247","6.9","120","56","20","266","90","Bad","78","18","Yes","Yes","No"
"248","5.04","123","114","0","298","151","Bad","34","16","Yes","No","No"
"249","5.36","111","52","0","12","101","Medium","61","11","Yes","Yes","No"
"250","5.05","125","67","0","86","117","Bad","65","11","Yes","No","No"
"251","9.16","137","105","10","435","156","Good","72","14","Yes","Yes","Yes"
"252","3.72","139","111","5","310","132","Bad","62","13","Yes","Yes","No"
"253","8.31","133","97","0","70","117","Medium","32","16","Yes","No","Yes"
"254","5.64","124","24","5","288","122","Medium","57","12","No","Yes","No"
"255","9.58","108","104","23","353","129","Good","37","17","Yes","Yes","Yes"
"256","7.71","123","81","8","198","81","Bad","80","15","Yes","Yes","No"
"257","4.2","147","40","0","277","144","Medium","73","10","Yes","No","No"
"258","8.67","125","62","14","477","112","Medium","80","13","Yes","Yes","Yes"
"259","3.47","108","38","0","251","81","Bad","72","14","No","No","No"
"260","5.12","123","36","10","467","100","Bad","74","11","No","Yes","No"
"261","7.67","129","117","8","400","101","Bad","36","10","Yes","Yes","No"
"262","5.71","121","42","4","188","118","Medium","54","15","Yes","Yes","No"
"263","6.37","120","77","15","86","132","Medium","48","18","Yes","Yes","No"
"264","7.77","116","26","6","434","115","Medium","25","17","Yes","Yes","No"
"265","6.95","128","29","5","324","159","Good","31","15","Yes","Yes","No"
"266","5.31","130","35","10","402","129","Bad","39","17","Yes","Yes","No"
"267","9.1","128","93","12","343","112","Good","73","17","No","Yes","Yes"
"268","5.83","134","82","7","473","112","Bad","51","12","No","Yes","No"
"269","6.53","123","57","0","66","105","Medium","39","11","Yes","No","No"
"270","5.01","159","69","0","438","166","Medium","46","17","Yes","No","No"
"271","11.99","119","26","0","284","89","Good","26","10","Yes","No","Yes"
"272","4.55","111","56","0","504","110","Medium","62","16","Yes","No","No"
"273","12.98","113","33","0","14","63","Good","38","12","Yes","No","Yes"
"274","10.04","116","106","8","244","86","Medium","58","12","Yes","Yes","Yes"
"275","7.22","135","93","2","67","119","Medium","34","11","Yes","Yes","No"
"276","6.67","107","119","11","210","132","Medium","53","11","Yes","Yes","No"
"277","6.93","135","69","14","296","130","Medium","73","15","Yes","Yes","No"
"278","7.8","136","48","12","326","125","Medium","36","16","Yes","Yes","No"
"279","7.22","114","113","2","129","151","Good","40","15","No","Yes","No"
"280","3.42","141","57","13","376","158","Medium","64","18","Yes","Yes","No"
"281","2.86","121","86","10","496","145","Bad","51","10","Yes","Yes","No"
"282","11.19","122","69","7","303","105","Good","45","16","No","Yes","Yes"
"283","7.74","150","96","0","80","154","Good","61","11","Yes","No","No"
"284","5.36","135","110","0","112","117","Medium","80","16","No","No","No"
"285","6.97","106","46","11","414","96","Bad","79","17","No","No","No"
"286","7.6","146","26","11","261","131","Medium","39","10","Yes","Yes","No"
"287","7.53","117","118","11","429","113","Medium","67","18","No","Yes","No"
"288","6.88","95","44","4","208","72","Bad","44","17","Yes","Yes","No"
"289","6.98","116","40","0","74","97","Medium","76","15","No","No","No"
"290","8.75","143","77","25","448","156","Medium","43","17","Yes","Yes","Yes"
"291","9.49","107","111","14","400","103","Medium","41","11","No","Yes","Yes"
"292","6.64","118","70","0","106","89","Bad","39","17","Yes","No","No"
"293","11.82","113","66","16","322","74","Good","76","15","Yes","Yes","Yes"
"294","11.28","123","84","0","74","89","Good","59","10","Yes","No","Yes"
"295","12.66","148","76","3","126","99","Good","60","11","Yes","Yes","Yes"
"296","4.21","118","35","14","502","137","Medium","79","10","No","Yes","No"
"297","8.21","127","44","13","160","123","Good","63","18","Yes","Yes","Yes"
"298","3.07","118","83","13","276","104","Bad","75","10","Yes","Yes","No"
"299","10.98","148","63","0","312","130","Good","63","15","Yes","No","Yes"
"300","9.4","135","40","17","497","96","Medium","54","17","No","Yes","Yes"
"301","8.57","116","78","1","158","99","Medium","45","11","Yes","Yes","Yes"
"302","7.41","99","93","0","198","87","Medium","57","16","Yes","Yes","No"
"303","5.28","108","77","13","388","110","Bad","74","14","Yes","Yes","No"
"304","10.01","133","52","16","290","99","Medium","43","11","Yes","Yes","Yes"
"305","11.93","123","98","12","408","134","Good","29","10","Yes","Yes","Yes"
"306","8.03","115","29","26","394","132","Medium","33","13","Yes","Yes","Yes"
"307","4.78","131","32","1","85","133","Medium","48","12","Yes","Yes","No"
"308","5.9","138","92","0","13","120","Bad","61","12","Yes","No","No"
"309","9.24","126","80","19","436","126","Medium","52","10","Yes","Yes","Yes"
"310","11.18","131","111","13","33","80","Bad","68","18","Yes","Yes","Yes"
"311","9.53","175","65","29","419","166","Medium","53","12","Yes","Yes","Yes"
"312","6.15","146","68","12","328","132","Bad","51","14","Yes","Yes","No"
"313","6.8","137","117","5","337","135","Bad","38","10","Yes","Yes","No"
"314","9.33","103","81","3","491","54","Medium","66","13","Yes","No","Yes"
"315","7.72","133","33","10","333","129","Good","71","14","Yes","Yes","No"
"316","6.39","131","21","8","220","171","Good","29","14","Yes","Yes","No"
"317","15.63","122","36","5","369","72","Good","35","10","Yes","Yes","Yes"
"318","6.41","142","30","0","472","136","Good","80","15","No","No","No"
"319","10.08","116","72","10","456","130","Good","41","14","No","Yes","Yes"
"320","6.97","127","45","19","459","129","Medium","57","11","No","Yes","No"
"321","5.86","136","70","12","171","152","Medium","44","18","Yes","Yes","No"
"322","7.52","123","39","5","499","98","Medium","34","15","Yes","No","No"
"323","9.16","140","50","10","300","139","Good","60","15","Yes","Yes","Yes"
"324","10.36","107","105","18","428","103","Medium","34","12","Yes","Yes","Yes"
"325","2.66","136","65","4","133","150","Bad","53","13","Yes","Yes","No"
"326","11.7","144","69","11","131","104","Medium","47","11","Yes","Yes","Yes"
"327","4.69","133","30","0","152","122","Medium","53","17","Yes","No","No"
"328","6.23","112","38","17","316","104","Medium","80","16","Yes","Yes","No"
"329","3.15","117","66","1","65","111","Bad","55","11","Yes","Yes","No"
"330","11.27","100","54","9","433","89","Good","45","12","Yes","Yes","Yes"
"331","4.99","122","59","0","501","112","Bad","32","14","No","No","No"
"332","10.1","135","63","15","213","134","Medium","32","10","Yes","Yes","Yes"
"333","5.74","106","33","20","354","104","Medium","61","12","Yes","Yes","No"
"334","5.87","136","60","7","303","147","Medium","41","10","Yes","Yes","No"
"335","7.63","93","117","9","489","83","Bad","42","13","Yes","Yes","No"
"336","6.18","120","70","15","464","110","Medium","72","15","Yes","Yes","No"
"337","5.17","138","35","6","60","143","Bad","28","18","Yes","No","No"
"338","8.61","130","38","0","283","102","Medium","80","15","Yes","No","Yes"
"339","5.97","112","24","0","164","101","Medium","45","11","Yes","No","No"
"340","11.54","134","44","4","219","126","Good","44","15","Yes","Yes","Yes"
"341","7.5","140","29","0","105","91","Bad","43","16","Yes","No","No"
"342","7.38","98","120","0","268","93","Medium","72","10","No","No","No"
"343","7.81","137","102","13","422","118","Medium","71","10","No","Yes","No"
"344","5.99","117","42","10","371","121","Bad","26","14","Yes","Yes","No"
"345","8.43","138","80","0","108","126","Good","70","13","No","Yes","Yes"
"346","4.81","121","68","0","279","149","Good","79","12","Yes","No","No"
"347","8.97","132","107","0","144","125","Medium","33","13","No","No","Yes"
"348","6.88","96","39","0","161","112","Good","27","14","No","No","No"
"349","12.57","132","102","20","459","107","Good","49","11","Yes","Yes","Yes"
"350","9.32","134","27","18","467","96","Medium","49","14","No","Yes","Yes"
"351","8.64","111","101","17","266","91","Medium","63","17","No","Yes","Yes"
"352","10.44","124","115","16","458","105","Medium","62","16","No","Yes","Yes"
"353","13.44","133","103","14","288","122","Good","61","17","Yes","Yes","Yes"
"354","9.45","107","67","12","430","92","Medium","35","12","No","Yes","Yes"
"355","5.3","133","31","1","80","145","Medium","42","18","Yes","Yes","No"
"356","7.02","130","100","0","306","146","Good","42","11","Yes","No","No"
"357","3.58","142","109","0","111","164","Good","72","12","Yes","No","No"
"358","13.36","103","73","3","276","72","Medium","34","15","Yes","Yes","Yes"
"359","4.17","123","96","10","71","118","Bad","69","11","Yes","Yes","No"
"360","3.13","130","62","11","396","130","Bad","66","14","Yes","Yes","No"
"361","8.77","118","86","7","265","114","Good","52","15","No","Yes","Yes"
"362","8.68","131","25","10","183","104","Medium","56","15","No","Yes","Yes"
"363","5.25","131","55","0","26","110","Bad","79","12","Yes","Yes","No"
"364","10.26","111","75","1","377","108","Good","25","12","Yes","No","Yes"
"365","10.5","122","21","16","488","131","Good","30","14","Yes","Yes","Yes"
"366","6.53","154","30","0","122","162","Medium","57","17","No","No","No"
"367","5.98","124","56","11","447","134","Medium","53","12","No","Yes","No"
"368","14.37","95","106","0","256","53","Good","52","17","Yes","No","Yes"
"369","10.71","109","22","10","348","79","Good","74","14","No","Yes","Yes"
"370","10.26","135","100","22","463","122","Medium","36","14","Yes","Yes","Yes"
"371","7.68","126","41","22","403","119","Bad","42","12","Yes","Yes","No"
"372","9.08","152","81","0","191","126","Medium","54","16","Yes","No","Yes"
"373","7.8","121","50","0","508","98","Medium","65","11","No","No","No"
"374","5.58","137","71","0","402","116","Medium","78","17","Yes","No","No"
"375","9.44","131","47","7","90","118","Medium","47","12","Yes","Yes","Yes"
"376","7.9","132","46","4","206","124","Medium","73","11","Yes","No","No"
"377","16.27","141","60","19","319","92","Good","44","11","Yes","Yes","Yes"
"378","6.81","132","61","0","263","125","Medium","41","12","No","No","No"
"379","6.11","133","88","3","105","119","Medium","79","12","Yes","Yes","No"
"380","5.81","125","111","0","404","107","Bad","54","15","Yes","No","No"
"381","9.64","106","64","10","17","89","Medium","68","17","Yes","Yes","Yes"
"382","3.9","124","65","21","496","151","Bad","77","13","Yes","Yes","No"
"383","4.95","121","28","19","315","121","Medium","66","14","Yes","Yes","No"
"384","9.35","98","117","0","76","68","Medium","63","10","Yes","No","Yes"
"385","12.85","123","37","15","348","112","Good","28","12","Yes","Yes","Yes"
"386","5.87","131","73","13","455","132","Medium","62","17","Yes","Yes","No"
"387","5.32","152","116","0","170","160","Medium","39","16","Yes","No","No"
"388","8.67","142","73","14","238","115","Medium","73","14","No","Yes","Yes"
"389","8.14","135","89","11","245","78","Bad","79","16","Yes","Yes","Yes"
"390","8.44","128","42","8","328","107","Medium","35","12","Yes","Yes","Yes"
"391","5.47","108","75","9","61","111","Medium","67","12","Yes","Yes","No"
"392","6.1","153","63","0","49","124","Bad","56","16","Yes","No","No"
"393","4.53","129","42","13","315","130","Bad","34","13","Yes","Yes","No"
"394","5.57","109","51","10","26","120","Medium","30","17","No","Yes","No"
"395","5.35","130","58","19","366","139","Bad","33","16","Yes","Yes","No"
"396","12.57","138","108","17","203","128","Good","33","14","Yes","Yes","Yes"
"397","6.14","139","23","3","37","120","Medium","55","11","No","Yes","No"
"398","7.41","162","26","12","368","159","Medium","40","18","Yes","Yes","No"
"399","5.94","100","79","7","284","95","Bad","50","12","Yes","Yes","No"
"400","9.71","134","37","0","27","120","Good","49","16","Yes","Yes","Yes"


================================================
File: tests/data_examples/data1/in/tables/sample.csv.manifest
================================================
{
    "id": "in.c-main.test",
    "uri": "https:\/\/connection.keboola.com\/\/v2\/storage\/tables\/in.c-main.test",
    "name": "sample.csv",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2015-11-02T09:11:37+0100",
    "last_change_date": "2015-11-02T09:11:37+0100",
    "last_import_date": "2015-11-02T09:11:37+0100",
    "rows_count": 400,
    "data_size_bytes": 81920,
    "is_alias": false,
    "columns": [
        "x",
        "Sales",
        "CompPrice",
        "Income",
        "Advertising",
        "Population",
        "Price",
        "ShelveLoc",
        "Age",
        "Education",
        "Urban",
        "US",
        "High"
    ],
    "attributes": []
}

================================================
File: tests/data_examples/data1/in/tables/sample_output.csv
================================================
"1","9.5","138","73","11","276","120","Bad","42","17","Yes","Yes","Yes"
"2","11.22","111","48","16","260","83","Good","65","10","Yes","Yes","Yes"
"3","10.06","113","35","10","269","80","Medium","59","12","Yes","Yes","Yes"
"4","7.4","117","100","4","466","97","Medium","55","14","Yes","Yes","No"
"5","4.15","141","64","3","340","128","Bad","38","13","Yes","No","No"
"6","10.81","124","113","13","501","72","Bad","78","16","No","Yes","Yes"
"7","6.63","115","105","0","45","108","Medium","71","15","Yes","No","No"
"8","11.85","136","81","15","425","120","Good","67","10","Yes","Yes","Yes"
"9","6.54","132","110","0","108","124","Medium","76","10","No","No","No"
"10","4.69","132","113","0","131","124","Medium","76","17","No","Yes","No"
"11","9.01","121","78","9","150","100","Bad","26","10","No","Yes","Yes"
"12","11.96","117","94","4","503","94","Good","50","13","Yes","Yes","Yes"
"13","3.98","122","35","2","393","136","Medium","62","18","Yes","No","No"
"14","10.96","115","28","11","29","86","Good","53","18","Yes","Yes","Yes"
"15","11.17","107","117","11","148","118","Good","52","18","Yes","Yes","Yes"
"16","8.71","149","95","5","400","144","Medium","76","18","No","No","Yes"
"17","7.58","118","32","0","284","110","Good","63","13","Yes","No","No"
"18","12.29","147","74","13","251","131","Good","52","10","Yes","Yes","Yes"
"19","13.91","110","110","0","408","68","Good","46","17","No","Yes","Yes"
"20","8.73","129","76","16","58","121","Medium","69","12","Yes","Yes","Yes"
"21","6.41","125","90","2","367","131","Medium","35","18","Yes","Yes","No"
"22","12.13","134","29","12","239","109","Good","62","18","No","Yes","Yes"
"23","5.08","128","46","6","497","138","Medium","42","13","Yes","No","No"
"24","5.87","121","31","0","292","109","Medium","79","10","Yes","No","No"
"25","10.14","145","119","16","294","113","Bad","42","12","Yes","Yes","Yes"
"26","14.9","139","32","0","176","82","Good","54","11","No","No","Yes"
"27","8.33","107","115","11","496","131","Good","50","11","No","Yes","Yes"
"28","5.27","98","118","0","19","107","Medium","64","17","Yes","No","No"
"29","2.99","103","74","0","359","97","Bad","55","11","Yes","Yes","No"
"30","7.81","104","99","15","226","102","Bad","58","17","Yes","Yes","No"
"31","13.55","125","94","0","447","89","Good","30","12","Yes","No","Yes"
"32","8.25","136","58","16","241","131","Medium","44","18","Yes","Yes","Yes"
"33","6.2","107","32","12","236","137","Good","64","10","No","Yes","No"
"34","8.77","114","38","13","317","128","Good","50","16","Yes","Yes","Yes"
"35","2.67","115","54","0","406","128","Medium","42","17","Yes","Yes","No"
"36","11.07","131","84","11","29","96","Medium","44","17","No","Yes","Yes"
"37","8.89","122","76","0","270","100","Good","60","18","No","No","Yes"
"38","4.95","121","41","5","412","110","Medium","54","10","Yes","Yes","No"
"39","6.59","109","73","0","454","102","Medium","65","15","Yes","No","No"
"40","3.24","130","60","0","144","138","Bad","38","10","No","No","No"
"41","2.07","119","98","0","18","126","Bad","73","17","No","No","No"
"42","7.96","157","53","0","403","124","Bad","58","16","Yes","No","No"
"43","10.43","77","69","0","25","24","Medium","50","18","Yes","No","Yes"
"44","4.12","123","42","11","16","134","Medium","59","13","Yes","Yes","No"
"45","4.16","85","79","6","325","95","Medium","69","13","Yes","Yes","No"
"46","4.56","141","63","0","168","135","Bad","44","12","Yes","Yes","No"
"47","12.44","127","90","14","16","70","Medium","48","15","No","Yes","Yes"
"48","4.38","126","98","0","173","108","Bad","55","16","Yes","No","No"
"49","3.91","116","52","0","349","98","Bad","69","18","Yes","No","No"
"50","10.61","157","93","0","51","149","Good","32","17","Yes","No","Yes"
"51","1.42","99","32","18","341","108","Bad","80","16","Yes","Yes","No"
"52","4.42","121","90","0","150","108","Bad","75","16","Yes","No","No"
"53","7.91","153","40","3","112","129","Bad","39","18","Yes","Yes","No"
"54","6.92","109","64","13","39","119","Medium","61","17","Yes","Yes","No"
"55","4.9","134","103","13","25","144","Medium","76","17","No","Yes","No"
"56","6.85","143","81","5","60","154","Medium","61","18","Yes","Yes","No"
"57","11.91","133","82","0","54","84","Medium","50","17","Yes","No","Yes"
"58","0.91","93","91","0","22","117","Bad","75","11","Yes","No","No"
"59","5.42","103","93","15","188","103","Bad","74","16","Yes","Yes","No"
"60","5.21","118","71","4","148","114","Medium","80","13","Yes","No","No"
"61","8.32","122","102","19","469","123","Bad","29","13","Yes","Yes","Yes"
"62","7.32","105","32","0","358","107","Medium","26","13","No","No","No"
"63","1.82","139","45","0","146","133","Bad","77","17","Yes","Yes","No"
"64","8.47","119","88","10","170","101","Medium","61","13","Yes","Yes","Yes"
"65","7.8","100","67","12","184","104","Medium","32","16","No","Yes","No"
"66","4.9","122","26","0","197","128","Medium","55","13","No","No","No"
"67","8.85","127","92","0","508","91","Medium","56","18","Yes","No","Yes"
"68","9.01","126","61","14","152","115","Medium","47","16","Yes","Yes","Yes"
"69","13.39","149","69","20","366","134","Good","60","13","Yes","Yes","Yes"
"70","7.99","127","59","0","339","99","Medium","65","12","Yes","No","No"
"71","9.46","89","81","15","237","99","Good","74","12","Yes","Yes","Yes"
"72","6.5","148","51","16","148","150","Medium","58","17","No","Yes","No"
"73","5.52","115","45","0","432","116","Medium","25","15","Yes","No","No"
"74","12.61","118","90","10","54","104","Good","31","11","No","Yes","Yes"
"75","6.2","150","68","5","125","136","Medium","64","13","No","Yes","No"
"76","8.55","88","111","23","480","92","Bad","36","16","No","Yes","Yes"
"77","10.64","102","87","10","346","70","Medium","64","15","Yes","Yes","Yes"
"78","7.7","118","71","12","44","89","Medium","67","18","No","Yes","No"
"79","4.43","134","48","1","139","145","Medium","65","12","Yes","Yes","No"
"80","9.14","134","67","0","286","90","Bad","41","13","Yes","No","Yes"
"81","8.01","113","100","16","353","79","Bad","68","11","Yes","Yes","Yes"
"82","7.52","116","72","0","237","128","Good","70","13","Yes","No","No"
"83","11.62","151","83","4","325","139","Good","28","17","Yes","Yes","Yes"
"84","4.42","109","36","7","468","94","Bad","56","11","Yes","Yes","No"
"85","2.23","111","25","0","52","121","Bad","43","18","No","No","No"
"86","8.47","125","103","0","304","112","Medium","49","13","No","No","Yes"
"87","8.7","150","84","9","432","134","Medium","64","15","Yes","No","Yes"
"88","11.7","131","67","7","272","126","Good","54","16","No","Yes","Yes"
"89","6.56","117","42","7","144","111","Medium","62","10","Yes","Yes","No"
"90","7.95","128","66","3","493","119","Medium","45","16","No","No","No"
"91","5.33","115","22","0","491","103","Medium","64","11","No","No","No"
"92","4.81","97","46","11","267","107","Medium","80","15","Yes","Yes","No"
"93","4.53","114","113","0","97","125","Medium","29","12","Yes","No","No"
"94","8.86","145","30","0","67","104","Medium","55","17","Yes","No","Yes"
"95","8.39","115","97","5","134","84","Bad","55","11","Yes","Yes","Yes"
"96","5.58","134","25","10","237","148","Medium","59","13","Yes","Yes","No"
"97","9.48","147","42","10","407","132","Good","73","16","No","Yes","Yes"
"98","7.45","161","82","5","287","129","Bad","33","16","Yes","Yes","No"
"99","12.49","122","77","24","382","127","Good","36","16","No","Yes","Yes"
"100","4.88","121","47","3","220","107","Bad","56","16","No","Yes","No"
"101","4.11","113","69","11","94","106","Medium","76","12","No","Yes","No"
"102","6.2","128","93","0","89","118","Medium","34","18","Yes","No","No"
"103","5.3","113","22","0","57","97","Medium","65","16","No","No","No"
"104","5.07","123","91","0","334","96","Bad","78","17","Yes","Yes","No"
"105","4.62","121","96","0","472","138","Medium","51","12","Yes","No","No"
"106","5.55","104","100","8","398","97","Medium","61","11","Yes","Yes","No"
"107","0.16","102","33","0","217","139","Medium","70","18","No","No","No"
"108","8.55","134","107","0","104","108","Medium","60","12","Yes","No","Yes"
"109","3.47","107","79","2","488","103","Bad","65","16","Yes","No","No"
"110","8.98","115","65","0","217","90","Medium","60","17","No","No","Yes"
"111","9","128","62","7","125","116","Medium","43","14","Yes","Yes","Yes"
"112","6.62","132","118","12","272","151","Medium","43","14","Yes","Yes","No"
"113","6.67","116","99","5","298","125","Good","62","12","Yes","Yes","No"
"114","6.01","131","29","11","335","127","Bad","33","12","Yes","Yes","No"
"115","9.31","122","87","9","17","106","Medium","65","13","Yes","Yes","Yes"
"116","8.54","139","35","0","95","129","Medium","42","13","Yes","No","Yes"
"117","5.08","135","75","0","202","128","Medium","80","10","No","No","No"
"118","8.8","145","53","0","507","119","Medium","41","12","Yes","No","Yes"
"119","7.57","112","88","2","243","99","Medium","62","11","Yes","Yes","No"
"120","7.37","130","94","8","137","128","Medium","64","12","Yes","Yes","No"
"121","6.87","128","105","11","249","131","Medium","63","13","Yes","Yes","No"
"122","11.67","125","89","10","380","87","Bad","28","10","Yes","Yes","Yes"
"123","6.88","119","100","5","45","108","Medium","75","10","Yes","Yes","No"
"124","8.19","127","103","0","125","155","Good","29","15","No","Yes","Yes"
"125","8.87","131","113","0","181","120","Good","63","14","Yes","No","Yes"
"126","9.34","89","78","0","181","49","Medium","43","15","No","No","Yes"
"127","11.27","153","68","2","60","133","Good","59","16","Yes","Yes","Yes"
"128","6.52","125","48","3","192","116","Medium","51","14","Yes","Yes","No"
"129","4.96","133","100","3","350","126","Bad","55","13","Yes","Yes","No"
"130","4.47","143","120","7","279","147","Bad","40","10","No","Yes","No"
"131","8.41","94","84","13","497","77","Medium","51","12","Yes","Yes","Yes"
"132","6.5","108","69","3","208","94","Medium","77","16","Yes","No","No"
"133","9.54","125","87","9","232","136","Good","72","10","Yes","Yes","Yes"
"134","7.62","132","98","2","265","97","Bad","62","12","Yes","Yes","No"
"135","3.67","132","31","0","327","131","Medium","76","16","Yes","No","No"
"136","6.44","96","94","14","384","120","Medium","36","18","No","Yes","No"
"137","5.17","131","75","0","10","120","Bad","31","18","No","No","No"
"138","6.52","128","42","0","436","118","Medium","80","11","Yes","No","No"
"139","10.27","125","103","12","371","109","Medium","44","10","Yes","Yes","Yes"
"140","12.3","146","62","10","310","94","Medium","30","13","No","Yes","Yes"
"141","6.03","133","60","10","277","129","Medium","45","18","Yes","Yes","No"
"142","6.53","140","42","0","331","131","Bad","28","15","Yes","No","No"
"143","7.44","124","84","0","300","104","Medium","77","15","Yes","No","No"
"144","0.53","122","88","7","36","159","Bad","28","17","Yes","Yes","No"
"145","9.09","132","68","0","264","123","Good","34","11","No","No","Yes"
"146","8.77","144","63","11","27","117","Medium","47","17","Yes","Yes","Yes"
"147","3.9","114","83","0","412","131","Bad","39","14","Yes","No","No"
"148","10.51","140","54","9","402","119","Good","41","16","No","Yes","Yes"
"149","7.56","110","119","0","384","97","Medium","72","14","No","Yes","No"
"150","11.48","121","120","13","140","87","Medium","56","11","Yes","Yes","Yes"
"151","10.49","122","84","8","176","114","Good","57","10","No","Yes","Yes"
"152","10.77","111","58","17","407","103","Good","75","17","No","Yes","Yes"
"153","7.64","128","78","0","341","128","Good","45","13","No","No","No"
"154","5.93","150","36","7","488","150","Medium","25","17","No","Yes","No"
"155","6.89","129","69","10","289","110","Medium","50","16","No","Yes","No"
"156","7.71","98","72","0","59","69","Medium","65","16","Yes","No","No"
"157","7.49","146","34","0","220","157","Good","51","16","Yes","No","No"
"158","10.21","121","58","8","249","90","Medium","48","13","No","Yes","Yes"
"159","12.53","142","90","1","189","112","Good","39","10","No","Yes","Yes"
"160","9.32","119","60","0","372","70","Bad","30","18","No","No","Yes"
"161","4.67","111","28","0","486","111","Medium","29","12","No","No","No"
"162","2.93","143","21","5","81","160","Medium","67","12","No","Yes","No"
"163","3.63","122","74","0","424","149","Medium","51","13","Yes","No","No"
"164","5.68","130","64","0","40","106","Bad","39","17","No","No","No"
"165","8.22","148","64","0","58","141","Medium","27","13","No","Yes","Yes"
"166","0.37","147","58","7","100","191","Bad","27","15","Yes","Yes","No"
"167","6.71","119","67","17","151","137","Medium","55","11","Yes","Yes","No"
"168","6.71","106","73","0","216","93","Medium","60","13","Yes","No","No"
"169","7.3","129","89","0","425","117","Medium","45","10","Yes","No","No"
"170","11.48","104","41","15","492","77","Good","73","18","Yes","Yes","Yes"
"171","8.01","128","39","12","356","118","Medium","71","10","Yes","Yes","Yes"
"172","12.49","93","106","12","416","55","Medium","75","15","Yes","Yes","Yes"
"173","9.03","104","102","13","123","110","Good","35","16","Yes","Yes","Yes"
"174","6.38","135","91","5","207","128","Medium","66","18","Yes","Yes","No"
"175","0","139","24","0","358","185","Medium","79","15","No","No","No"
"176","7.54","115","89","0","38","122","Medium","25","12","Yes","No","No"
"177","5.61","138","107","9","480","154","Medium","47","11","No","Yes","No"
"178","10.48","138","72","0","148","94","Medium","27","17","Yes","Yes","Yes"
"179","10.66","104","71","14","89","81","Medium","25","14","No","Yes","Yes"
"180","7.78","144","25","3","70","116","Medium","77","18","Yes","Yes","No"
"181","4.94","137","112","15","434","149","Bad","66","13","Yes","Yes","No"
"182","7.43","121","83","0","79","91","Medium","68","11","Yes","No","No"
"183","4.74","137","60","4","230","140","Bad","25","13","Yes","No","No"
"184","5.32","118","74","6","426","102","Medium","80","18","Yes","Yes","No"
"185","9.95","132","33","7","35","97","Medium","60","11","No","Yes","Yes"
"186","10.07","130","100","11","449","107","Medium","64","10","Yes","Yes","Yes"
"187","8.68","120","51","0","93","86","Medium","46","17","No","No","Yes"
"188","6.03","117","32","0","142","96","Bad","62","17","Yes","No","No"
"189","8.07","116","37","0","426","90","Medium","76","15","Yes","No","Yes"
"190","12.11","118","117","18","509","104","Medium","26","15","No","Yes","Yes"
"191","8.79","130","37","13","297","101","Medium","37","13","No","Yes","Yes"
"192","6.67","156","42","13","170","173","Good","74","14","Yes","Yes","No"
"193","7.56","108","26","0","408","93","Medium","56","14","No","No","No"
"194","13.28","139","70","7","71","96","Good","61","10","Yes","Yes","Yes"
"195","7.23","112","98","18","481","128","Medium","45","11","Yes","Yes","No"
"196","4.19","117","93","4","420","112","Bad","66","11","Yes","Yes","No"
"197","4.1","130","28","6","410","133","Bad","72","16","Yes","Yes","No"
"198","2.52","124","61","0","333","138","Medium","76","16","Yes","No","No"
"199","3.62","112","80","5","500","128","Medium","69","10","Yes","Yes","No"
"200","6.42","122","88","5","335","126","Medium","64","14","Yes","Yes","No"
"201","5.56","144","92","0","349","146","Medium","62","12","No","No","No"
"202","5.94","138","83","0","139","134","Medium","54","18","Yes","No","No"
"203","4.1","121","78","4","413","130","Bad","46","10","No","Yes","No"
"204","2.05","131","82","0","132","157","Bad","25","14","Yes","No","No"
"205","8.74","155","80","0","237","124","Medium","37","14","Yes","No","Yes"
"206","5.68","113","22","1","317","132","Medium","28","12","Yes","No","No"
"207","4.97","162","67","0","27","160","Medium","77","17","Yes","Yes","No"
"208","8.19","111","105","0","466","97","Bad","61","10","No","No","Yes"
"209","7.78","86","54","0","497","64","Bad","33","12","Yes","No","No"
"210","3.02","98","21","11","326","90","Bad","76","11","No","Yes","No"
"211","4.36","125","41","2","357","123","Bad","47","14","No","Yes","No"
"212","9.39","117","118","14","445","120","Medium","32","15","Yes","Yes","Yes"
"213","12.04","145","69","19","501","105","Medium","45","11","Yes","Yes","Yes"
"214","8.23","149","84","5","220","139","Medium","33","10","Yes","Yes","Yes"
"215","4.83","115","115","3","48","107","Medium","73","18","Yes","Yes","No"
"216","2.34","116","83","15","170","144","Bad","71","11","Yes","Yes","No"
"217","5.73","141","33","0","243","144","Medium","34","17","Yes","No","No"
"218","4.34","106","44","0","481","111","Medium","70","14","No","No","No"
"219","9.7","138","61","12","156","120","Medium","25","14","Yes","Yes","Yes"
"220","10.62","116","79","19","359","116","Good","58","17","Yes","Yes","Yes"
"221","10.59","131","120","15","262","124","Medium","30","10","Yes","Yes","Yes"
"222","6.43","124","44","0","125","107","Medium","80","11","Yes","No","No"
"223","7.49","136","119","6","178","145","Medium","35","13","Yes","Yes","No"
"224","3.45","110","45","9","276","125","Medium","62","14","Yes","Yes","No"
"225","4.1","134","82","0","464","141","Medium","48","13","No","No","No"
"226","6.68","107","25","0","412","82","Bad","36","14","Yes","No","No"
"227","7.8","119","33","0","245","122","Good","56","14","Yes","No","No"
"228","8.69","113","64","10","68","101","Medium","57","16","Yes","Yes","Yes"
"229","5.4","149","73","13","381","163","Bad","26","11","No","Yes","No"
"230","11.19","98","104","0","404","72","Medium","27","18","No","No","Yes"
"231","5.16","115","60","0","119","114","Bad","38","14","No","No","No"
"232","8.09","132","69","0","123","122","Medium","27","11","No","No","Yes"
"233","13.14","137","80","10","24","105","Good","61","15","Yes","Yes","Yes"
"234","8.65","123","76","18","218","120","Medium","29","14","No","Yes","Yes"
"235","9.43","115","62","11","289","129","Good","56","16","No","Yes","Yes"
"236","5.53","126","32","8","95","132","Medium","50","17","Yes","Yes","No"
"237","9.32","141","34","16","361","108","Medium","69","10","Yes","Yes","Yes"
"238","9.62","151","28","8","499","135","Medium","48","10","Yes","Yes","Yes"
"239","7.36","121","24","0","200","133","Good","73","13","Yes","No","No"
"240","3.89","123","105","0","149","118","Bad","62","16","Yes","Yes","No"
"241","10.31","159","80","0","362","121","Medium","26","18","Yes","No","Yes"
"242","12.01","136","63","0","160","94","Medium","38","12","Yes","No","Yes"
"243","4.68","124","46","0","199","135","Medium","52","14","No","No","No"
"244","7.82","124","25","13","87","110","Medium","57","10","Yes","Yes","No"
"245","8.78","130","30","0","391","100","Medium","26","18","Yes","No","Yes"
"246","10","114","43","0","199","88","Good","57","10","No","Yes","Yes"
"247","6.9","120","56","20","266","90","Bad","78","18","Yes","Yes","No"
"248","5.04","123","114","0","298","151","Bad","34","16","Yes","No","No"
"249","5.36","111","52","0","12","101","Medium","61","11","Yes","Yes","No"
"250","5.05","125","67","0","86","117","Bad","65","11","Yes","No","No"
"251","9.16","137","105","10","435","156","Good","72","14","Yes","Yes","Yes"
"252","3.72","139","111","5","310","132","Bad","62","13","Yes","Yes","No"
"253","8.31","133","97","0","70","117","Medium","32","16","Yes","No","Yes"
"254","5.64","124","24","5","288","122","Medium","57","12","No","Yes","No"
"255","9.58","108","104","23","353","129","Good","37","17","Yes","Yes","Yes"
"256","7.71","123","81","8","198","81","Bad","80","15","Yes","Yes","No"
"257","4.2","147","40","0","277","144","Medium","73","10","Yes","No","No"
"258","8.67","125","62","14","477","112","Medium","80","13","Yes","Yes","Yes"
"259","3.47","108","38","0","251","81","Bad","72","14","No","No","No"
"260","5.12","123","36","10","467","100","Bad","74","11","No","Yes","No"
"261","7.67","129","117","8","400","101","Bad","36","10","Yes","Yes","No"
"262","5.71","121","42","4","188","118","Medium","54","15","Yes","Yes","No"
"263","6.37","120","77","15","86","132","Medium","48","18","Yes","Yes","No"
"264","7.77","116","26","6","434","115","Medium","25","17","Yes","Yes","No"
"265","6.95","128","29","5","324","159","Good","31","15","Yes","Yes","No"
"266","5.31","130","35","10","402","129","Bad","39","17","Yes","Yes","No"
"267","9.1","128","93","12","343","112","Good","73","17","No","Yes","Yes"
"268","5.83","134","82","7","473","112","Bad","51","12","No","Yes","No"
"269","6.53","123","57","0","66","105","Medium","39","11","Yes","No","No"
"270","5.01","159","69","0","438","166","Medium","46","17","Yes","No","No"
"271","11.99","119","26","0","284","89","Good","26","10","Yes","No","Yes"
"272","4.55","111","56","0","504","110","Medium","62","16","Yes","No","No"
"273","12.98","113","33","0","14","63","Good","38","12","Yes","No","Yes"
"274","10.04","116","106","8","244","86","Medium","58","12","Yes","Yes","Yes"
"275","7.22","135","93","2","67","119","Medium","34","11","Yes","Yes","No"
"276","6.67","107","119","11","210","132","Medium","53","11","Yes","Yes","No"
"277","6.93","135","69","14","296","130","Medium","73","15","Yes","Yes","No"
"278","7.8","136","48","12","326","125","Medium","36","16","Yes","Yes","No"
"279","7.22","114","113","2","129","151","Good","40","15","No","Yes","No"
"280","3.42","141","57","13","376","158","Medium","64","18","Yes","Yes","No"
"281","2.86","121","86","10","496","145","Bad","51","10","Yes","Yes","No"
"282","11.19","122","69","7","303","105","Good","45","16","No","Yes","Yes"
"283","7.74","150","96","0","80","154","Good","61","11","Yes","No","No"
"284","5.36","135","110","0","112","117","Medium","80","16","No","No","No"
"285","6.97","106","46","11","414","96","Bad","79","17","No","No","No"
"286","7.6","146","26","11","261","131","Medium","39","10","Yes","Yes","No"
"287","7.53","117","118","11","429","113","Medium","67","18","No","Yes","No"
"288","6.88","95","44","4","208","72","Bad","44","17","Yes","Yes","No"
"289","6.98","116","40","0","74","97","Medium","76","15","No","No","No"
"290","8.75","143","77","25","448","156","Medium","43","17","Yes","Yes","Yes"
"291","9.49","107","111","14","400","103","Medium","41","11","No","Yes","Yes"
"292","6.64","118","70","0","106","89","Bad","39","17","Yes","No","No"
"293","11.82","113","66","16","322","74","Good","76","15","Yes","Yes","Yes"
"294","11.28","123","84","0","74","89","Good","59","10","Yes","No","Yes"
"295","12.66","148","76","3","126","99","Good","60","11","Yes","Yes","Yes"
"296","4.21","118","35","14","502","137","Medium","79","10","No","Yes","No"
"297","8.21","127","44","13","160","123","Good","63","18","Yes","Yes","Yes"
"298","3.07","118","83","13","276","104","Bad","75","10","Yes","Yes","No"
"299","10.98","148","63","0","312","130","Good","63","15","Yes","No","Yes"
"300","9.4","135","40","17","497","96","Medium","54","17","No","Yes","Yes"
"301","8.57","116","78","1","158","99","Medium","45","11","Yes","Yes","Yes"
"302","7.41","99","93","0","198","87","Medium","57","16","Yes","Yes","No"
"303","5.28","108","77","13","388","110","Bad","74","14","Yes","Yes","No"
"304","10.01","133","52","16","290","99","Medium","43","11","Yes","Yes","Yes"
"305","11.93","123","98","12","408","134","Good","29","10","Yes","Yes","Yes"
"306","8.03","115","29","26","394","132","Medium","33","13","Yes","Yes","Yes"
"307","4.78","131","32","1","85","133","Medium","48","12","Yes","Yes","No"
"308","5.9","138","92","0","13","120","Bad","61","12","Yes","No","No"
"309","9.24","126","80","19","436","126","Medium","52","10","Yes","Yes","Yes"
"310","11.18","131","111","13","33","80","Bad","68","18","Yes","Yes","Yes"
"311","9.53","175","65","29","419","166","Medium","53","12","Yes","Yes","Yes"
"312","6.15","146","68","12","328","132","Bad","51","14","Yes","Yes","No"
"313","6.8","137","117","5","337","135","Bad","38","10","Yes","Yes","No"
"314","9.33","103","81","3","491","54","Medium","66","13","Yes","No","Yes"
"315","7.72","133","33","10","333","129","Good","71","14","Yes","Yes","No"
"316","6.39","131","21","8","220","171","Good","29","14","Yes","Yes","No"
"317","15.63","122","36","5","369","72","Good","35","10","Yes","Yes","Yes"
"318","6.41","142","30","0","472","136","Good","80","15","No","No","No"
"319","10.08","116","72","10","456","130","Good","41","14","No","Yes","Yes"
"320","6.97","127","45","19","459","129","Medium","57","11","No","Yes","No"
"321","5.86","136","70","12","171","152","Medium","44","18","Yes","Yes","No"
"322","7.52","123","39","5","499","98","Medium","34","15","Yes","No","No"
"323","9.16","140","50","10","300","139","Good","60","15","Yes","Yes","Yes"
"324","10.36","107","105","18","428","103","Medium","34","12","Yes","Yes","Yes"
"325","2.66","136","65","4","133","150","Bad","53","13","Yes","Yes","No"
"326","11.7","144","69","11","131","104","Medium","47","11","Yes","Yes","Yes"
"327","4.69","133","30","0","152","122","Medium","53","17","Yes","No","No"
"328","6.23","112","38","17","316","104","Medium","80","16","Yes","Yes","No"
"329","3.15","117","66","1","65","111","Bad","55","11","Yes","Yes","No"
"330","11.27","100","54","9","433","89","Good","45","12","Yes","Yes","Yes"
"331","4.99","122","59","0","501","112","Bad","32","14","No","No","No"
"332","10.1","135","63","15","213","134","Medium","32","10","Yes","Yes","Yes"
"333","5.74","106","33","20","354","104","Medium","61","12","Yes","Yes","No"
"334","5.87","136","60","7","303","147","Medium","41","10","Yes","Yes","No"
"335","7.63","93","117","9","489","83","Bad","42","13","Yes","Yes","No"
"336","6.18","120","70","15","464","110","Medium","72","15","Yes","Yes","No"
"337","5.17","138","35","6","60","143","Bad","28","18","Yes","No","No"
"338","8.61","130","38","0","283","102","Medium","80","15","Yes","No","Yes"
"339","5.97","112","24","0","164","101","Medium","45","11","Yes","No","No"
"340","11.54","134","44","4","219","126","Good","44","15","Yes","Yes","Yes"
"341","7.5","140","29","0","105","91","Bad","43","16","Yes","No","No"
"342","7.38","98","120","0","268","93","Medium","72","10","No","No","No"
"343","7.81","137","102","13","422","118","Medium","71","10","No","Yes","No"
"344","5.99","117","42","10","371","121","Bad","26","14","Yes","Yes","No"
"345","8.43","138","80","0","108","126","Good","70","13","No","Yes","Yes"
"346","4.81","121","68","0","279","149","Good","79","12","Yes","No","No"
"347","8.97","132","107","0","144","125","Medium","33","13","No","No","Yes"
"348","6.88","96","39","0","161","112","Good","27","14","No","No","No"
"349","12.57","132","102","20","459","107","Good","49","11","Yes","Yes","Yes"
"350","9.32","134","27","18","467","96","Medium","49","14","No","Yes","Yes"
"351","8.64","111","101","17","266","91","Medium","63","17","No","Yes","Yes"
"352","10.44","124","115","16","458","105","Medium","62","16","No","Yes","Yes"
"353","13.44","133","103","14","288","122","Good","61","17","Yes","Yes","Yes"
"354","9.45","107","67","12","430","92","Medium","35","12","No","Yes","Yes"
"355","5.3","133","31","1","80","145","Medium","42","18","Yes","Yes","No"
"356","7.02","130","100","0","306","146","Good","42","11","Yes","No","No"
"357","3.58","142","109","0","111","164","Good","72","12","Yes","No","No"
"358","13.36","103","73","3","276","72","Medium","34","15","Yes","Yes","Yes"
"359","4.17","123","96","10","71","118","Bad","69","11","Yes","Yes","No"
"360","3.13","130","62","11","396","130","Bad","66","14","Yes","Yes","No"
"361","8.77","118","86","7","265","114","Good","52","15","No","Yes","Yes"
"362","8.68","131","25","10","183","104","Medium","56","15","No","Yes","Yes"
"363","5.25","131","55","0","26","110","Bad","79","12","Yes","Yes","No"
"364","10.26","111","75","1","377","108","Good","25","12","Yes","No","Yes"
"365","10.5","122","21","16","488","131","Good","30","14","Yes","Yes","Yes"
"366","6.53","154","30","0","122","162","Medium","57","17","No","No","No"
"367","5.98","124","56","11","447","134","Medium","53","12","No","Yes","No"
"368","14.37","95","106","0","256","53","Good","52","17","Yes","No","Yes"
"369","10.71","109","22","10","348","79","Good","74","14","No","Yes","Yes"
"370","10.26","135","100","22","463","122","Medium","36","14","Yes","Yes","Yes"
"371","7.68","126","41","22","403","119","Bad","42","12","Yes","Yes","No"
"372","9.08","152","81","0","191","126","Medium","54","16","Yes","No","Yes"
"373","7.8","121","50","0","508","98","Medium","65","11","No","No","No"
"374","5.58","137","71","0","402","116","Medium","78","17","Yes","No","No"
"375","9.44","131","47","7","90","118","Medium","47","12","Yes","Yes","Yes"
"376","7.9","132","46","4","206","124","Medium","73","11","Yes","No","No"
"377","16.27","141","60","19","319","92","Good","44","11","Yes","Yes","Yes"
"378","6.81","132","61","0","263","125","Medium","41","12","No","No","No"
"379","6.11","133","88","3","105","119","Medium","79","12","Yes","Yes","No"
"380","5.81","125","111","0","404","107","Bad","54","15","Yes","No","No"
"381","9.64","106","64","10","17","89","Medium","68","17","Yes","Yes","Yes"
"382","3.9","124","65","21","496","151","Bad","77","13","Yes","Yes","No"
"383","4.95","121","28","19","315","121","Medium","66","14","Yes","Yes","No"
"384","9.35","98","117","0","76","68","Medium","63","10","Yes","No","Yes"
"385","12.85","123","37","15","348","112","Good","28","12","Yes","Yes","Yes"
"386","5.87","131","73","13","455","132","Medium","62","17","Yes","Yes","No"
"387","5.32","152","116","0","170","160","Medium","39","16","Yes","No","No"
"388","8.67","142","73","14","238","115","Medium","73","14","No","Yes","Yes"
"389","8.14","135","89","11","245","78","Bad","79","16","Yes","Yes","Yes"
"390","8.44","128","42","8","328","107","Medium","35","12","Yes","Yes","Yes"
"391","5.47","108","75","9","61","111","Medium","67","12","Yes","Yes","No"
"392","6.1","153","63","0","49","124","Bad","56","16","Yes","No","No"
"393","4.53","129","42","13","315","130","Bad","34","13","Yes","Yes","No"
"394","5.57","109","51","10","26","120","Medium","30","17","No","Yes","No"
"395","5.35","130","58","19","366","139","Bad","33","16","Yes","Yes","No"
"396","12.57","138","108","17","203","128","Good","33","14","Yes","Yes","Yes"
"397","6.14","139","23","3","37","120","Medium","55","11","No","Yes","No"
"398","7.41","162","26","12","368","159","Medium","40","18","Yes","Yes","No"
"399","5.94","100","79","7","284","95","Bad","50","12","Yes","Yes","No"
"400","9.71","134","37","0","27","120","Good","49","16","Yes","Yes","Yes"


================================================
File: tests/data_examples/data1/in/tables/sample_output.csv.manifest
================================================
{
  "primary_key": [
    "x"
  ],
  "incremental": true,
  "delimiter": ",",
  "enclosure": "\"",
  "columns": [
    "x",
    "Sales",
    "CompPrice",
    "Income",
    "Advertising",
    "Population",
    "Price",
    "ShelveLoc",
    "Age",
    "Education",
    "Urban",
    "US",
    "High"
  ],
  "attributes": []
}

================================================
File: tests/data_examples/data1/in/tables/sample_output_header.csv
================================================

"x","Sales","CompPrice","Income","Advertising","Population","Price","ShelveLoc","Age","Education","Urban","US","High"
"1","9.5","138","73","11","276","120","Bad","42","17","Yes","Yes","Yes"
"2","11.22","111","48","16","260","83","Good","65","10","Yes","Yes","Yes"
"3","10.06","113","35","10","269","80","Medium","59","12","Yes","Yes","Yes"
"4","7.4","117","100","4","466","97","Medium","55","14","Yes","Yes","No"
"5","4.15","141","64","3","340","128","Bad","38","13","Yes","No","No"
"6","10.81","124","113","13","501","72","Bad","78","16","No","Yes","Yes"
"7","6.63","115","105","0","45","108","Medium","71","15","Yes","No","No"
"8","11.85","136","81","15","425","120","Good","67","10","Yes","Yes","Yes"
"9","6.54","132","110","0","108","124","Medium","76","10","No","No","No"
"10","4.69","132","113","0","131","124","Medium","76","17","No","Yes","No"
"11","9.01","121","78","9","150","100","Bad","26","10","No","Yes","Yes"
"12","11.96","117","94","4","503","94","Good","50","13","Yes","Yes","Yes"
"13","3.98","122","35","2","393","136","Medium","62","18","Yes","No","No"
"14","10.96","115","28","11","29","86","Good","53","18","Yes","Yes","Yes"
"15","11.17","107","117","11","148","118","Good","52","18","Yes","Yes","Yes"
"16","8.71","149","95","5","400","144","Medium","76","18","No","No","Yes"
"17","7.58","118","32","0","284","110","Good","63","13","Yes","No","No"
"18","12.29","147","74","13","251","131","Good","52","10","Yes","Yes","Yes"
"19","13.91","110","110","0","408","68","Good","46","17","No","Yes","Yes"
"20","8.73","129","76","16","58","121","Medium","69","12","Yes","Yes","Yes"
"21","6.41","125","90","2","367","131","Medium","35","18","Yes","Yes","No"
"22","12.13","134","29","12","239","109","Good","62","18","No","Yes","Yes"
"23","5.08","128","46","6","497","138","Medium","42","13","Yes","No","No"
"24","5.87","121","31","0","292","109","Medium","79","10","Yes","No","No"
"25","10.14","145","119","16","294","113","Bad","42","12","Yes","Yes","Yes"
"26","14.9","139","32","0","176","82","Good","54","11","No","No","Yes"
"27","8.33","107","115","11","496","131","Good","50","11","No","Yes","Yes"
"28","5.27","98","118","0","19","107","Medium","64","17","Yes","No","No"
"29","2.99","103","74","0","359","97","Bad","55","11","Yes","Yes","No"
"30","7.81","104","99","15","226","102","Bad","58","17","Yes","Yes","No"
"31","13.55","125","94","0","447","89","Good","30","12","Yes","No","Yes"
"32","8.25","136","58","16","241","131","Medium","44","18","Yes","Yes","Yes"
"33","6.2","107","32","12","236","137","Good","64","10","No","Yes","No"
"34","8.77","114","38","13","317","128","Good","50","16","Yes","Yes","Yes"
"35","2.67","115","54","0","406","128","Medium","42","17","Yes","Yes","No"
"36","11.07","131","84","11","29","96","Medium","44","17","No","Yes","Yes"
"37","8.89","122","76","0","270","100","Good","60","18","No","No","Yes"
"38","4.95","121","41","5","412","110","Medium","54","10","Yes","Yes","No"
"39","6.59","109","73","0","454","102","Medium","65","15","Yes","No","No"
"40","3.24","130","60","0","144","138","Bad","38","10","No","No","No"
"41","2.07","119","98","0","18","126","Bad","73","17","No","No","No"
"42","7.96","157","53","0","403","124","Bad","58","16","Yes","No","No"
"43","10.43","77","69","0","25","24","Medium","50","18","Yes","No","Yes"
"44","4.12","123","42","11","16","134","Medium","59","13","Yes","Yes","No"
"45","4.16","85","79","6","325","95","Medium","69","13","Yes","Yes","No"
"46","4.56","141","63","0","168","135","Bad","44","12","Yes","Yes","No"
"47","12.44","127","90","14","16","70","Medium","48","15","No","Yes","Yes"
"48","4.38","126","98","0","173","108","Bad","55","16","Yes","No","No"
"49","3.91","116","52","0","349","98","Bad","69","18","Yes","No","No"
"50","10.61","157","93","0","51","149","Good","32","17","Yes","No","Yes"
"51","1.42","99","32","18","341","108","Bad","80","16","Yes","Yes","No"
"52","4.42","121","90","0","150","108","Bad","75","16","Yes","No","No"
"53","7.91","153","40","3","112","129","Bad","39","18","Yes","Yes","No"
"54","6.92","109","64","13","39","119","Medium","61","17","Yes","Yes","No"
"55","4.9","134","103","13","25","144","Medium","76","17","No","Yes","No"
"56","6.85","143","81","5","60","154","Medium","61","18","Yes","Yes","No"
"57","11.91","133","82","0","54","84","Medium","50","17","Yes","No","Yes"
"58","0.91","93","91","0","22","117","Bad","75","11","Yes","No","No"
"59","5.42","103","93","15","188","103","Bad","74","16","Yes","Yes","No"
"60","5.21","118","71","4","148","114","Medium","80","13","Yes","No","No"
"61","8.32","122","102","19","469","123","Bad","29","13","Yes","Yes","Yes"
"62","7.32","105","32","0","358","107","Medium","26","13","No","No","No"
"63","1.82","139","45","0","146","133","Bad","77","17","Yes","Yes","No"
"64","8.47","119","88","10","170","101","Medium","61","13","Yes","Yes","Yes"
"65","7.8","100","67","12","184","104","Medium","32","16","No","Yes","No"
"66","4.9","122","26","0","197","128","Medium","55","13","No","No","No"
"67","8.85","127","92","0","508","91","Medium","56","18","Yes","No","Yes"
"68","9.01","126","61","14","152","115","Medium","47","16","Yes","Yes","Yes"
"69","13.39","149","69","20","366","134","Good","60","13","Yes","Yes","Yes"
"70","7.99","127","59","0","339","99","Medium","65","12","Yes","No","No"
"71","9.46","89","81","15","237","99","Good","74","12","Yes","Yes","Yes"
"72","6.5","148","51","16","148","150","Medium","58","17","No","Yes","No"
"73","5.52","115","45","0","432","116","Medium","25","15","Yes","No","No"
"74","12.61","118","90","10","54","104","Good","31","11","No","Yes","Yes"
"75","6.2","150","68","5","125","136","Medium","64","13","No","Yes","No"
"76","8.55","88","111","23","480","92","Bad","36","16","No","Yes","Yes"
"77","10.64","102","87","10","346","70","Medium","64","15","Yes","Yes","Yes"
"78","7.7","118","71","12","44","89","Medium","67","18","No","Yes","No"
"79","4.43","134","48","1","139","145","Medium","65","12","Yes","Yes","No"
"80","9.14","134","67","0","286","90","Bad","41","13","Yes","No","Yes"
"81","8.01","113","100","16","353","79","Bad","68","11","Yes","Yes","Yes"
"82","7.52","116","72","0","237","128","Good","70","13","Yes","No","No"
"83","11.62","151","83","4","325","139","Good","28","17","Yes","Yes","Yes"
"84","4.42","109","36","7","468","94","Bad","56","11","Yes","Yes","No"
"85","2.23","111","25","0","52","121","Bad","43","18","No","No","No"
"86","8.47","125","103","0","304","112","Medium","49","13","No","No","Yes"
"87","8.7","150","84","9","432","134","Medium","64","15","Yes","No","Yes"
"88","11.7","131","67","7","272","126","Good","54","16","No","Yes","Yes"
"89","6.56","117","42","7","144","111","Medium","62","10","Yes","Yes","No"
"90","7.95","128","66","3","493","119","Medium","45","16","No","No","No"
"91","5.33","115","22","0","491","103","Medium","64","11","No","No","No"
"92","4.81","97","46","11","267","107","Medium","80","15","Yes","Yes","No"
"93","4.53","114","113","0","97","125","Medium","29","12","Yes","No","No"
"94","8.86","145","30","0","67","104","Medium","55","17","Yes","No","Yes"
"95","8.39","115","97","5","134","84","Bad","55","11","Yes","Yes","Yes"
"96","5.58","134","25","10","237","148","Medium","59","13","Yes","Yes","No"
"97","9.48","147","42","10","407","132","Good","73","16","No","Yes","Yes"
"98","7.45","161","82","5","287","129","Bad","33","16","Yes","Yes","No"
"99","12.49","122","77","24","382","127","Good","36","16","No","Yes","Yes"
"100","4.88","121","47","3","220","107","Bad","56","16","No","Yes","No"
"101","4.11","113","69","11","94","106","Medium","76","12","No","Yes","No"
"102","6.2","128","93","0","89","118","Medium","34","18","Yes","No","No"
"103","5.3","113","22","0","57","97","Medium","65","16","No","No","No"
"104","5.07","123","91","0","334","96","Bad","78","17","Yes","Yes","No"
"105","4.62","121","96","0","472","138","Medium","51","12","Yes","No","No"
"106","5.55","104","100","8","398","97","Medium","61","11","Yes","Yes","No"
"107","0.16","102","33","0","217","139","Medium","70","18","No","No","No"
"108","8.55","134","107","0","104","108","Medium","60","12","Yes","No","Yes"
"109","3.47","107","79","2","488","103","Bad","65","16","Yes","No","No"
"110","8.98","115","65","0","217","90","Medium","60","17","No","No","Yes"
"111","9","128","62","7","125","116","Medium","43","14","Yes","Yes","Yes"
"112","6.62","132","118","12","272","151","Medium","43","14","Yes","Yes","No"
"113","6.67","116","99","5","298","125","Good","62","12","Yes","Yes","No"
"114","6.01","131","29","11","335","127","Bad","33","12","Yes","Yes","No"
"115","9.31","122","87","9","17","106","Medium","65","13","Yes","Yes","Yes"
"116","8.54","139","35","0","95","129","Medium","42","13","Yes","No","Yes"
"117","5.08","135","75","0","202","128","Medium","80","10","No","No","No"
"118","8.8","145","53","0","507","119","Medium","41","12","Yes","No","Yes"
"119","7.57","112","88","2","243","99","Medium","62","11","Yes","Yes","No"
"120","7.37","130","94","8","137","128","Medium","64","12","Yes","Yes","No"
"121","6.87","128","105","11","249","131","Medium","63","13","Yes","Yes","No"
"122","11.67","125","89","10","380","87","Bad","28","10","Yes","Yes","Yes"
"123","6.88","119","100","5","45","108","Medium","75","10","Yes","Yes","No"
"124","8.19","127","103","0","125","155","Good","29","15","No","Yes","Yes"
"125","8.87","131","113","0","181","120","Good","63","14","Yes","No","Yes"
"126","9.34","89","78","0","181","49","Medium","43","15","No","No","Yes"
"127","11.27","153","68","2","60","133","Good","59","16","Yes","Yes","Yes"
"128","6.52","125","48","3","192","116","Medium","51","14","Yes","Yes","No"
"129","4.96","133","100","3","350","126","Bad","55","13","Yes","Yes","No"
"130","4.47","143","120","7","279","147","Bad","40","10","No","Yes","No"
"131","8.41","94","84","13","497","77","Medium","51","12","Yes","Yes","Yes"
"132","6.5","108","69","3","208","94","Medium","77","16","Yes","No","No"
"133","9.54","125","87","9","232","136","Good","72","10","Yes","Yes","Yes"
"134","7.62","132","98","2","265","97","Bad","62","12","Yes","Yes","No"
"135","3.67","132","31","0","327","131","Medium","76","16","Yes","No","No"
"136","6.44","96","94","14","384","120","Medium","36","18","No","Yes","No"
"137","5.17","131","75","0","10","120","Bad","31","18","No","No","No"
"138","6.52","128","42","0","436","118","Medium","80","11","Yes","No","No"
"139","10.27","125","103","12","371","109","Medium","44","10","Yes","Yes","Yes"
"140","12.3","146","62","10","310","94","Medium","30","13","No","Yes","Yes"
"141","6.03","133","60","10","277","129","Medium","45","18","Yes","Yes","No"
"142","6.53","140","42","0","331","131","Bad","28","15","Yes","No","No"
"143","7.44","124","84","0","300","104","Medium","77","15","Yes","No","No"
"144","0.53","122","88","7","36","159","Bad","28","17","Yes","Yes","No"
"145","9.09","132","68","0","264","123","Good","34","11","No","No","Yes"
"146","8.77","144","63","11","27","117","Medium","47","17","Yes","Yes","Yes"
"147","3.9","114","83","0","412","131","Bad","39","14","Yes","No","No"
"148","10.51","140","54","9","402","119","Good","41","16","No","Yes","Yes"
"149","7.56","110","119","0","384","97","Medium","72","14","No","Yes","No"
"150","11.48","121","120","13","140","87","Medium","56","11","Yes","Yes","Yes"
"151","10.49","122","84","8","176","114","Good","57","10","No","Yes","Yes"
"152","10.77","111","58","17","407","103","Good","75","17","No","Yes","Yes"
"153","7.64","128","78","0","341","128","Good","45","13","No","No","No"
"154","5.93","150","36","7","488","150","Medium","25","17","No","Yes","No"
"155","6.89","129","69","10","289","110","Medium","50","16","No","Yes","No"
"156","7.71","98","72","0","59","69","Medium","65","16","Yes","No","No"
"157","7.49","146","34","0","220","157","Good","51","16","Yes","No","No"
"158","10.21","121","58","8","249","90","Medium","48","13","No","Yes","Yes"
"159","12.53","142","90","1","189","112","Good","39","10","No","Yes","Yes"
"160","9.32","119","60","0","372","70","Bad","30","18","No","No","Yes"
"161","4.67","111","28","0","486","111","Medium","29","12","No","No","No"
"162","2.93","143","21","5","81","160","Medium","67","12","No","Yes","No"
"163","3.63","122","74","0","424","149","Medium","51","13","Yes","No","No"
"164","5.68","130","64","0","40","106","Bad","39","17","No","No","No"
"165","8.22","148","64","0","58","141","Medium","27","13","No","Yes","Yes"
"166","0.37","147","58","7","100","191","Bad","27","15","Yes","Yes","No"
"167","6.71","119","67","17","151","137","Medium","55","11","Yes","Yes","No"
"168","6.71","106","73","0","216","93","Medium","60","13","Yes","No","No"
"169","7.3","129","89","0","425","117","Medium","45","10","Yes","No","No"
"170","11.48","104","41","15","492","77","Good","73","18","Yes","Yes","Yes"
"171","8.01","128","39","12","356","118","Medium","71","10","Yes","Yes","Yes"
"172","12.49","93","106","12","416","55","Medium","75","15","Yes","Yes","Yes"
"173","9.03","104","102","13","123","110","Good","35","16","Yes","Yes","Yes"
"174","6.38","135","91","5","207","128","Medium","66","18","Yes","Yes","No"
"175","0","139","24","0","358","185","Medium","79","15","No","No","No"
"176","7.54","115","89","0","38","122","Medium","25","12","Yes","No","No"
"177","5.61","138","107","9","480","154","Medium","47","11","No","Yes","No"
"178","10.48","138","72","0","148","94","Medium","27","17","Yes","Yes","Yes"
"179","10.66","104","71","14","89","81","Medium","25","14","No","Yes","Yes"
"180","7.78","144","25","3","70","116","Medium","77","18","Yes","Yes","No"
"181","4.94","137","112","15","434","149","Bad","66","13","Yes","Yes","No"
"182","7.43","121","83","0","79","91","Medium","68","11","Yes","No","No"
"183","4.74","137","60","4","230","140","Bad","25","13","Yes","No","No"
"184","5.32","118","74","6","426","102","Medium","80","18","Yes","Yes","No"
"185","9.95","132","33","7","35","97","Medium","60","11","No","Yes","Yes"
"186","10.07","130","100","11","449","107","Medium","64","10","Yes","Yes","Yes"
"187","8.68","120","51","0","93","86","Medium","46","17","No","No","Yes"
"188","6.03","117","32","0","142","96","Bad","62","17","Yes","No","No"
"189","8.07","116","37","0","426","90","Medium","76","15","Yes","No","Yes"
"190","12.11","118","117","18","509","104","Medium","26","15","No","Yes","Yes"
"191","8.79","130","37","13","297","101","Medium","37","13","No","Yes","Yes"
"192","6.67","156","42","13","170","173","Good","74","14","Yes","Yes","No"
"193","7.56","108","26","0","408","93","Medium","56","14","No","No","No"
"194","13.28","139","70","7","71","96","Good","61","10","Yes","Yes","Yes"
"195","7.23","112","98","18","481","128","Medium","45","11","Yes","Yes","No"
"196","4.19","117","93","4","420","112","Bad","66","11","Yes","Yes","No"
"197","4.1","130","28","6","410","133","Bad","72","16","Yes","Yes","No"
"198","2.52","124","61","0","333","138","Medium","76","16","Yes","No","No"
"199","3.62","112","80","5","500","128","Medium","69","10","Yes","Yes","No"
"200","6.42","122","88","5","335","126","Medium","64","14","Yes","Yes","No"
"201","5.56","144","92","0","349","146","Medium","62","12","No","No","No"
"202","5.94","138","83","0","139","134","Medium","54","18","Yes","No","No"
"203","4.1","121","78","4","413","130","Bad","46","10","No","Yes","No"
"204","2.05","131","82","0","132","157","Bad","25","14","Yes","No","No"
"205","8.74","155","80","0","237","124","Medium","37","14","Yes","No","Yes"
"206","5.68","113","22","1","317","132","Medium","28","12","Yes","No","No"
"207","4.97","162","67","0","27","160","Medium","77","17","Yes","Yes","No"
"208","8.19","111","105","0","466","97","Bad","61","10","No","No","Yes"
"209","7.78","86","54","0","497","64","Bad","33","12","Yes","No","No"
"210","3.02","98","21","11","326","90","Bad","76","11","No","Yes","No"
"211","4.36","125","41","2","357","123","Bad","47","14","No","Yes","No"
"212","9.39","117","118","14","445","120","Medium","32","15","Yes","Yes","Yes"
"213","12.04","145","69","19","501","105","Medium","45","11","Yes","Yes","Yes"
"214","8.23","149","84","5","220","139","Medium","33","10","Yes","Yes","Yes"
"215","4.83","115","115","3","48","107","Medium","73","18","Yes","Yes","No"
"216","2.34","116","83","15","170","144","Bad","71","11","Yes","Yes","No"
"217","5.73","141","33","0","243","144","Medium","34","17","Yes","No","No"
"218","4.34","106","44","0","481","111","Medium","70","14","No","No","No"
"219","9.7","138","61","12","156","120","Medium","25","14","Yes","Yes","Yes"
"220","10.62","116","79","19","359","116","Good","58","17","Yes","Yes","Yes"
"221","10.59","131","120","15","262","124","Medium","30","10","Yes","Yes","Yes"
"222","6.43","124","44","0","125","107","Medium","80","11","Yes","No","No"
"223","7.49","136","119","6","178","145","Medium","35","13","Yes","Yes","No"
"224","3.45","110","45","9","276","125","Medium","62","14","Yes","Yes","No"
"225","4.1","134","82","0","464","141","Medium","48","13","No","No","No"
"226","6.68","107","25","0","412","82","Bad","36","14","Yes","No","No"
"227","7.8","119","33","0","245","122","Good","56","14","Yes","No","No"
"228","8.69","113","64","10","68","101","Medium","57","16","Yes","Yes","Yes"
"229","5.4","149","73","13","381","163","Bad","26","11","No","Yes","No"
"230","11.19","98","104","0","404","72","Medium","27","18","No","No","Yes"
"231","5.16","115","60","0","119","114","Bad","38","14","No","No","No"
"232","8.09","132","69","0","123","122","Medium","27","11","No","No","Yes"
"233","13.14","137","80","10","24","105","Good","61","15","Yes","Yes","Yes"
"234","8.65","123","76","18","218","120","Medium","29","14","No","Yes","Yes"
"235","9.43","115","62","11","289","129","Good","56","16","No","Yes","Yes"
"236","5.53","126","32","8","95","132","Medium","50","17","Yes","Yes","No"
"237","9.32","141","34","16","361","108","Medium","69","10","Yes","Yes","Yes"
"238","9.62","151","28","8","499","135","Medium","48","10","Yes","Yes","Yes"
"239","7.36","121","24","0","200","133","Good","73","13","Yes","No","No"
"240","3.89","123","105","0","149","118","Bad","62","16","Yes","Yes","No"
"241","10.31","159","80","0","362","121","Medium","26","18","Yes","No","Yes"
"242","12.01","136","63","0","160","94","Medium","38","12","Yes","No","Yes"
"243","4.68","124","46","0","199","135","Medium","52","14","No","No","No"
"244","7.82","124","25","13","87","110","Medium","57","10","Yes","Yes","No"
"245","8.78","130","30","0","391","100","Medium","26","18","Yes","No","Yes"
"246","10","114","43","0","199","88","Good","57","10","No","Yes","Yes"
"247","6.9","120","56","20","266","90","Bad","78","18","Yes","Yes","No"
"248","5.04","123","114","0","298","151","Bad","34","16","Yes","No","No"
"249","5.36","111","52","0","12","101","Medium","61","11","Yes","Yes","No"
"250","5.05","125","67","0","86","117","Bad","65","11","Yes","No","No"
"251","9.16","137","105","10","435","156","Good","72","14","Yes","Yes","Yes"
"252","3.72","139","111","5","310","132","Bad","62","13","Yes","Yes","No"
"253","8.31","133","97","0","70","117","Medium","32","16","Yes","No","Yes"
"254","5.64","124","24","5","288","122","Medium","57","12","No","Yes","No"
"255","9.58","108","104","23","353","129","Good","37","17","Yes","Yes","Yes"
"256","7.71","123","81","8","198","81","Bad","80","15","Yes","Yes","No"
"257","4.2","147","40","0","277","144","Medium","73","10","Yes","No","No"
"258","8.67","125","62","14","477","112","Medium","80","13","Yes","Yes","Yes"
"259","3.47","108","38","0","251","81","Bad","72","14","No","No","No"
"260","5.12","123","36","10","467","100","Bad","74","11","No","Yes","No"
"261","7.67","129","117","8","400","101","Bad","36","10","Yes","Yes","No"
"262","5.71","121","42","4","188","118","Medium","54","15","Yes","Yes","No"
"263","6.37","120","77","15","86","132","Medium","48","18","Yes","Yes","No"
"264","7.77","116","26","6","434","115","Medium","25","17","Yes","Yes","No"
"265","6.95","128","29","5","324","159","Good","31","15","Yes","Yes","No"
"266","5.31","130","35","10","402","129","Bad","39","17","Yes","Yes","No"
"267","9.1","128","93","12","343","112","Good","73","17","No","Yes","Yes"
"268","5.83","134","82","7","473","112","Bad","51","12","No","Yes","No"
"269","6.53","123","57","0","66","105","Medium","39","11","Yes","No","No"
"270","5.01","159","69","0","438","166","Medium","46","17","Yes","No","No"
"271","11.99","119","26","0","284","89","Good","26","10","Yes","No","Yes"
"272","4.55","111","56","0","504","110","Medium","62","16","Yes","No","No"
"273","12.98","113","33","0","14","63","Good","38","12","Yes","No","Yes"
"274","10.04","116","106","8","244","86","Medium","58","12","Yes","Yes","Yes"
"275","7.22","135","93","2","67","119","Medium","34","11","Yes","Yes","No"
"276","6.67","107","119","11","210","132","Medium","53","11","Yes","Yes","No"
"277","6.93","135","69","14","296","130","Medium","73","15","Yes","Yes","No"
"278","7.8","136","48","12","326","125","Medium","36","16","Yes","Yes","No"
"279","7.22","114","113","2","129","151","Good","40","15","No","Yes","No"
"280","3.42","141","57","13","376","158","Medium","64","18","Yes","Yes","No"
"281","2.86","121","86","10","496","145","Bad","51","10","Yes","Yes","No"
"282","11.19","122","69","7","303","105","Good","45","16","No","Yes","Yes"
"283","7.74","150","96","0","80","154","Good","61","11","Yes","No","No"
"284","5.36","135","110","0","112","117","Medium","80","16","No","No","No"
"285","6.97","106","46","11","414","96","Bad","79","17","No","No","No"
"286","7.6","146","26","11","261","131","Medium","39","10","Yes","Yes","No"
"287","7.53","117","118","11","429","113","Medium","67","18","No","Yes","No"
"288","6.88","95","44","4","208","72","Bad","44","17","Yes","Yes","No"
"289","6.98","116","40","0","74","97","Medium","76","15","No","No","No"
"290","8.75","143","77","25","448","156","Medium","43","17","Yes","Yes","Yes"
"291","9.49","107","111","14","400","103","Medium","41","11","No","Yes","Yes"
"292","6.64","118","70","0","106","89","Bad","39","17","Yes","No","No"
"293","11.82","113","66","16","322","74","Good","76","15","Yes","Yes","Yes"
"294","11.28","123","84","0","74","89","Good","59","10","Yes","No","Yes"
"295","12.66","148","76","3","126","99","Good","60","11","Yes","Yes","Yes"
"296","4.21","118","35","14","502","137","Medium","79","10","No","Yes","No"
"297","8.21","127","44","13","160","123","Good","63","18","Yes","Yes","Yes"
"298","3.07","118","83","13","276","104","Bad","75","10","Yes","Yes","No"
"299","10.98","148","63","0","312","130","Good","63","15","Yes","No","Yes"
"300","9.4","135","40","17","497","96","Medium","54","17","No","Yes","Yes"
"301","8.57","116","78","1","158","99","Medium","45","11","Yes","Yes","Yes"
"302","7.41","99","93","0","198","87","Medium","57","16","Yes","Yes","No"
"303","5.28","108","77","13","388","110","Bad","74","14","Yes","Yes","No"
"304","10.01","133","52","16","290","99","Medium","43","11","Yes","Yes","Yes"
"305","11.93","123","98","12","408","134","Good","29","10","Yes","Yes","Yes"
"306","8.03","115","29","26","394","132","Medium","33","13","Yes","Yes","Yes"
"307","4.78","131","32","1","85","133","Medium","48","12","Yes","Yes","No"
"308","5.9","138","92","0","13","120","Bad","61","12","Yes","No","No"
"309","9.24","126","80","19","436","126","Medium","52","10","Yes","Yes","Yes"
"310","11.18","131","111","13","33","80","Bad","68","18","Yes","Yes","Yes"
"311","9.53","175","65","29","419","166","Medium","53","12","Yes","Yes","Yes"
"312","6.15","146","68","12","328","132","Bad","51","14","Yes","Yes","No"
"313","6.8","137","117","5","337","135","Bad","38","10","Yes","Yes","No"
"314","9.33","103","81","3","491","54","Medium","66","13","Yes","No","Yes"
"315","7.72","133","33","10","333","129","Good","71","14","Yes","Yes","No"
"316","6.39","131","21","8","220","171","Good","29","14","Yes","Yes","No"
"317","15.63","122","36","5","369","72","Good","35","10","Yes","Yes","Yes"
"318","6.41","142","30","0","472","136","Good","80","15","No","No","No"
"319","10.08","116","72","10","456","130","Good","41","14","No","Yes","Yes"
"320","6.97","127","45","19","459","129","Medium","57","11","No","Yes","No"
"321","5.86","136","70","12","171","152","Medium","44","18","Yes","Yes","No"
"322","7.52","123","39","5","499","98","Medium","34","15","Yes","No","No"
"323","9.16","140","50","10","300","139","Good","60","15","Yes","Yes","Yes"
"324","10.36","107","105","18","428","103","Medium","34","12","Yes","Yes","Yes"
"325","2.66","136","65","4","133","150","Bad","53","13","Yes","Yes","No"
"326","11.7","144","69","11","131","104","Medium","47","11","Yes","Yes","Yes"
"327","4.69","133","30","0","152","122","Medium","53","17","Yes","No","No"
"328","6.23","112","38","17","316","104","Medium","80","16","Yes","Yes","No"
"329","3.15","117","66","1","65","111","Bad","55","11","Yes","Yes","No"
"330","11.27","100","54","9","433","89","Good","45","12","Yes","Yes","Yes"
"331","4.99","122","59","0","501","112","Bad","32","14","No","No","No"
"332","10.1","135","63","15","213","134","Medium","32","10","Yes","Yes","Yes"
"333","5.74","106","33","20","354","104","Medium","61","12","Yes","Yes","No"
"334","5.87","136","60","7","303","147","Medium","41","10","Yes","Yes","No"
"335","7.63","93","117","9","489","83","Bad","42","13","Yes","Yes","No"
"336","6.18","120","70","15","464","110","Medium","72","15","Yes","Yes","No"
"337","5.17","138","35","6","60","143","Bad","28","18","Yes","No","No"
"338","8.61","130","38","0","283","102","Medium","80","15","Yes","No","Yes"
"339","5.97","112","24","0","164","101","Medium","45","11","Yes","No","No"
"340","11.54","134","44","4","219","126","Good","44","15","Yes","Yes","Yes"
"341","7.5","140","29","0","105","91","Bad","43","16","Yes","No","No"
"342","7.38","98","120","0","268","93","Medium","72","10","No","No","No"
"343","7.81","137","102","13","422","118","Medium","71","10","No","Yes","No"
"344","5.99","117","42","10","371","121","Bad","26","14","Yes","Yes","No"
"345","8.43","138","80","0","108","126","Good","70","13","No","Yes","Yes"
"346","4.81","121","68","0","279","149","Good","79","12","Yes","No","No"
"347","8.97","132","107","0","144","125","Medium","33","13","No","No","Yes"
"348","6.88","96","39","0","161","112","Good","27","14","No","No","No"
"349","12.57","132","102","20","459","107","Good","49","11","Yes","Yes","Yes"
"350","9.32","134","27","18","467","96","Medium","49","14","No","Yes","Yes"
"351","8.64","111","101","17","266","91","Medium","63","17","No","Yes","Yes"
"352","10.44","124","115","16","458","105","Medium","62","16","No","Yes","Yes"
"353","13.44","133","103","14","288","122","Good","61","17","Yes","Yes","Yes"
"354","9.45","107","67","12","430","92","Medium","35","12","No","Yes","Yes"
"355","5.3","133","31","1","80","145","Medium","42","18","Yes","Yes","No"
"356","7.02","130","100","0","306","146","Good","42","11","Yes","No","No"
"357","3.58","142","109","0","111","164","Good","72","12","Yes","No","No"
"358","13.36","103","73","3","276","72","Medium","34","15","Yes","Yes","Yes"
"359","4.17","123","96","10","71","118","Bad","69","11","Yes","Yes","No"
"360","3.13","130","62","11","396","130","Bad","66","14","Yes","Yes","No"
"361","8.77","118","86","7","265","114","Good","52","15","No","Yes","Yes"
"362","8.68","131","25","10","183","104","Medium","56","15","No","Yes","Yes"
"363","5.25","131","55","0","26","110","Bad","79","12","Yes","Yes","No"
"364","10.26","111","75","1","377","108","Good","25","12","Yes","No","Yes"
"365","10.5","122","21","16","488","131","Good","30","14","Yes","Yes","Yes"
"366","6.53","154","30","0","122","162","Medium","57","17","No","No","No"
"367","5.98","124","56","11","447","134","Medium","53","12","No","Yes","No"
"368","14.37","95","106","0","256","53","Good","52","17","Yes","No","Yes"
"369","10.71","109","22","10","348","79","Good","74","14","No","Yes","Yes"
"370","10.26","135","100","22","463","122","Medium","36","14","Yes","Yes","Yes"
"371","7.68","126","41","22","403","119","Bad","42","12","Yes","Yes","No"
"372","9.08","152","81","0","191","126","Medium","54","16","Yes","No","Yes"
"373","7.8","121","50","0","508","98","Medium","65","11","No","No","No"
"374","5.58","137","71","0","402","116","Medium","78","17","Yes","No","No"
"375","9.44","131","47","7","90","118","Medium","47","12","Yes","Yes","Yes"
"376","7.9","132","46","4","206","124","Medium","73","11","Yes","No","No"
"377","16.27","141","60","19","319","92","Good","44","11","Yes","Yes","Yes"
"378","6.81","132","61","0","263","125","Medium","41","12","No","No","No"
"379","6.11","133","88","3","105","119","Medium","79","12","Yes","Yes","No"
"380","5.81","125","111","0","404","107","Bad","54","15","Yes","No","No"
"381","9.64","106","64","10","17","89","Medium","68","17","Yes","Yes","Yes"
"382","3.9","124","65","21","496","151","Bad","77","13","Yes","Yes","No"
"383","4.95","121","28","19","315","121","Medium","66","14","Yes","Yes","No"
"384","9.35","98","117","0","76","68","Medium","63","10","Yes","No","Yes"
"385","12.85","123","37","15","348","112","Good","28","12","Yes","Yes","Yes"
"386","5.87","131","73","13","455","132","Medium","62","17","Yes","Yes","No"
"387","5.32","152","116","0","170","160","Medium","39","16","Yes","No","No"
"388","8.67","142","73","14","238","115","Medium","73","14","No","Yes","Yes"
"389","8.14","135","89","11","245","78","Bad","79","16","Yes","Yes","Yes"
"390","8.44","128","42","8","328","107","Medium","35","12","Yes","Yes","Yes"
"391","5.47","108","75","9","61","111","Medium","67","12","Yes","Yes","No"
"392","6.1","153","63","0","49","124","Bad","56","16","Yes","No","No"
"393","4.53","129","42","13","315","130","Bad","34","13","Yes","Yes","No"
"394","5.57","109","51","10","26","120","Medium","30","17","No","Yes","No"
"395","5.35","130","58","19","366","139","Bad","33","16","Yes","Yes","No"
"396","12.57","138","108","17","203","128","Good","33","14","Yes","Yes","Yes"
"397","6.14","139","23","3","37","120","Medium","55","11","No","Yes","No"
"398","7.41","162","26","12","368","159","Medium","40","18","Yes","Yes","No"
"399","5.94","100","79","7","284","95","Bad","50","12","Yes","Yes","No"
"400","9.71","134","37","0","27","120","Good","49","16","Yes","Yes","Yes"


================================================
File: tests/data_examples/data1/in/tables/sample_output_header.csv.manifest
================================================
{
  "primary_key": [
    "x"
  ],
  "incremental": true,
  "delimiter": ",",
  "enclosure": "\"",
  "attributes": []
}

================================================
File: tests/data_examples/data1/in/tables/sliced.csv.manifest
================================================
{
  "primary_key": [
    "x"
  ],
  "incremental": true,
  "delimiter": ",",
  "enclosure": "\"",
  "metadata": [
    {
      "key": "bar",
      "value": "kochba"
    }
  ],
  "column_metadata": {
    "x": [
      {
        "key": "foo",
        "value": "gogo"
      }
    ]
  },
  "columns": [
    "x",
    "Sales",
    "CompPrice",
    "Income",
    "Advertising",
    "Population",
    "Price",
    "ShelveLoc",
    "Age",
    "Education",
    "Urban",
    "US",
    "High"
  ],
  "attributes": []
}

================================================
File: tests/data_examples/data1/out/tables/some-table.csv.manifest
================================================
{"destination": "some-destination", "incremental": true, "write_always": false, "delimiter": ",", "enclosure": "\"", "manifest_type": "out", "has_header": false, "table_metadata": {"bar": "kochba"}, "delete_where_column": "lilly", "delete_where_values": ["a", "b"], "delete_where_operator": "eq", "schema": [{"name": "foo", "data_type": {"base": {"type": "STRING"}}, "nullable": true, "primary_key": true}, {"name": "bar", "data_type": {"base": {"type": "STRING"}}, "nullable": true}]}

================================================
File: tests/data_examples/data2/config.json
================================================
{
}

================================================
File: tests/data_examples/data3/config.json
================================================
{
	"parameters": {}
}

================================================
File: tests/data_examples/data4/config.json
================================================
{
    "storage": {
        "input": {
            "files": [],
            "tables": [
                {
                    "source": "in.c-main.test",
                    "destination": "sample.csv",
                    "columns": [],
                    "where_values": [],
                    "where_operator": "eq",
                    "column_types": [
                        {
                            "source": "Sales",
                            "type": "VARCHAR",
                            "destination": "id",
                            "length": "255",
                            "nullable": false,
                            "convert_empty_values_to_null": false
                        }
                    ]
                }
            ]
        }       

    },
    "parameters": {

    }
   
}


================================================
File: tests/data_examples/data4/in/state.json
================================================
{
  "test_state": 1234
}

================================================
File: tests/data_examples/data4/in/tables/sample.csv
================================================
"x","Sales","CompPrice","Income","Advertising","Population","Price","ShelveLoc","Age","Education","Urban","US","High"
"1","9.5","138","73","11","276","120","Bad","42","17","Yes","Yes","Yes"
"2","11.22","111","48","16","260","83","Good","65","10","Yes","Yes","Yes"
"3","10.06","113","35","10","269","80","Medium","59","12","Yes","Yes","Yes"
"4","7.4","117","100","4","466","97","Medium","55","14","Yes","Yes","No"
"5","4.15","141","64","3","340","128","Bad","38","13","Yes","No","No"
"6","10.81","124","113","13","501","72","Bad","78","16","No","Yes","Yes"
"7","6.63","115","105","0","45","108","Medium","71","15","Yes","No","No"
"8","11.85","136","81","15","425","120","Good","67","10","Yes","Yes","Yes"
"9","6.54","132","110","0","108","124","Medium","76","10","No","No","No"
"10","4.69","132","113","0","131","124","Medium","76","17","No","Yes","No"
"11","9.01","121","78","9","150","100","Bad","26","10","No","Yes","Yes"
"12","11.96","117","94","4","503","94","Good","50","13","Yes","Yes","Yes"
"13","3.98","122","35","2","393","136","Medium","62","18","Yes","No","No"
"14","10.96","115","28","11","29","86","Good","53","18","Yes","Yes","Yes"
"15","11.17","107","117","11","148","118","Good","52","18","Yes","Yes","Yes"
"16","8.71","149","95","5","400","144","Medium","76","18","No","No","Yes"
"17","7.58","118","32","0","284","110","Good","63","13","Yes","No","No"
"18","12.29","147","74","13","251","131","Good","52","10","Yes","Yes","Yes"
"19","13.91","110","110","0","408","68","Good","46","17","No","Yes","Yes"
"20","8.73","129","76","16","58","121","Medium","69","12","Yes","Yes","Yes"
"21","6.41","125","90","2","367","131","Medium","35","18","Yes","Yes","No"
"22","12.13","134","29","12","239","109","Good","62","18","No","Yes","Yes"
"23","5.08","128","46","6","497","138","Medium","42","13","Yes","No","No"
"24","5.87","121","31","0","292","109","Medium","79","10","Yes","No","No"
"25","10.14","145","119","16","294","113","Bad","42","12","Yes","Yes","Yes"
"26","14.9","139","32","0","176","82","Good","54","11","No","No","Yes"
"27","8.33","107","115","11","496","131","Good","50","11","No","Yes","Yes"
"28","5.27","98","118","0","19","107","Medium","64","17","Yes","No","No"
"29","2.99","103","74","0","359","97","Bad","55","11","Yes","Yes","No"
"30","7.81","104","99","15","226","102","Bad","58","17","Yes","Yes","No"
"31","13.55","125","94","0","447","89","Good","30","12","Yes","No","Yes"
"32","8.25","136","58","16","241","131","Medium","44","18","Yes","Yes","Yes"
"33","6.2","107","32","12","236","137","Good","64","10","No","Yes","No"
"34","8.77","114","38","13","317","128","Good","50","16","Yes","Yes","Yes"
"35","2.67","115","54","0","406","128","Medium","42","17","Yes","Yes","No"
"36","11.07","131","84","11","29","96","Medium","44","17","No","Yes","Yes"
"37","8.89","122","76","0","270","100","Good","60","18","No","No","Yes"
"38","4.95","121","41","5","412","110","Medium","54","10","Yes","Yes","No"
"39","6.59","109","73","0","454","102","Medium","65","15","Yes","No","No"
"40","3.24","130","60","0","144","138","Bad","38","10","No","No","No"
"41","2.07","119","98","0","18","126","Bad","73","17","No","No","No"
"42","7.96","157","53","0","403","124","Bad","58","16","Yes","No","No"
"43","10.43","77","69","0","25","24","Medium","50","18","Yes","No","Yes"
"44","4.12","123","42","11","16","134","Medium","59","13","Yes","Yes","No"
"45","4.16","85","79","6","325","95","Medium","69","13","Yes","Yes","No"
"46","4.56","141","63","0","168","135","Bad","44","12","Yes","Yes","No"
"47","12.44","127","90","14","16","70","Medium","48","15","No","Yes","Yes"
"48","4.38","126","98","0","173","108","Bad","55","16","Yes","No","No"
"49","3.91","116","52","0","349","98","Bad","69","18","Yes","No","No"
"50","10.61","157","93","0","51","149","Good","32","17","Yes","No","Yes"
"51","1.42","99","32","18","341","108","Bad","80","16","Yes","Yes","No"
"52","4.42","121","90","0","150","108","Bad","75","16","Yes","No","No"
"53","7.91","153","40","3","112","129","Bad","39","18","Yes","Yes","No"
"54","6.92","109","64","13","39","119","Medium","61","17","Yes","Yes","No"
"55","4.9","134","103","13","25","144","Medium","76","17","No","Yes","No"
"56","6.85","143","81","5","60","154","Medium","61","18","Yes","Yes","No"
"57","11.91","133","82","0","54","84","Medium","50","17","Yes","No","Yes"
"58","0.91","93","91","0","22","117","Bad","75","11","Yes","No","No"
"59","5.42","103","93","15","188","103","Bad","74","16","Yes","Yes","No"
"60","5.21","118","71","4","148","114","Medium","80","13","Yes","No","No"
"61","8.32","122","102","19","469","123","Bad","29","13","Yes","Yes","Yes"
"62","7.32","105","32","0","358","107","Medium","26","13","No","No","No"
"63","1.82","139","45","0","146","133","Bad","77","17","Yes","Yes","No"
"64","8.47","119","88","10","170","101","Medium","61","13","Yes","Yes","Yes"
"65","7.8","100","67","12","184","104","Medium","32","16","No","Yes","No"
"66","4.9","122","26","0","197","128","Medium","55","13","No","No","No"
"67","8.85","127","92","0","508","91","Medium","56","18","Yes","No","Yes"
"68","9.01","126","61","14","152","115","Medium","47","16","Yes","Yes","Yes"
"69","13.39","149","69","20","366","134","Good","60","13","Yes","Yes","Yes"
"70","7.99","127","59","0","339","99","Medium","65","12","Yes","No","No"
"71","9.46","89","81","15","237","99","Good","74","12","Yes","Yes","Yes"
"72","6.5","148","51","16","148","150","Medium","58","17","No","Yes","No"
"73","5.52","115","45","0","432","116","Medium","25","15","Yes","No","No"
"74","12.61","118","90","10","54","104","Good","31","11","No","Yes","Yes"
"75","6.2","150","68","5","125","136","Medium","64","13","No","Yes","No"
"76","8.55","88","111","23","480","92","Bad","36","16","No","Yes","Yes"
"77","10.64","102","87","10","346","70","Medium","64","15","Yes","Yes","Yes"
"78","7.7","118","71","12","44","89","Medium","67","18","No","Yes","No"
"79","4.43","134","48","1","139","145","Medium","65","12","Yes","Yes","No"
"80","9.14","134","67","0","286","90","Bad","41","13","Yes","No","Yes"
"81","8.01","113","100","16","353","79","Bad","68","11","Yes","Yes","Yes"
"82","7.52","116","72","0","237","128","Good","70","13","Yes","No","No"
"83","11.62","151","83","4","325","139","Good","28","17","Yes","Yes","Yes"
"84","4.42","109","36","7","468","94","Bad","56","11","Yes","Yes","No"
"85","2.23","111","25","0","52","121","Bad","43","18","No","No","No"
"86","8.47","125","103","0","304","112","Medium","49","13","No","No","Yes"
"87","8.7","150","84","9","432","134","Medium","64","15","Yes","No","Yes"
"88","11.7","131","67","7","272","126","Good","54","16","No","Yes","Yes"
"89","6.56","117","42","7","144","111","Medium","62","10","Yes","Yes","No"
"90","7.95","128","66","3","493","119","Medium","45","16","No","No","No"
"91","5.33","115","22","0","491","103","Medium","64","11","No","No","No"
"92","4.81","97","46","11","267","107","Medium","80","15","Yes","Yes","No"
"93","4.53","114","113","0","97","125","Medium","29","12","Yes","No","No"
"94","8.86","145","30","0","67","104","Medium","55","17","Yes","No","Yes"
"95","8.39","115","97","5","134","84","Bad","55","11","Yes","Yes","Yes"
"96","5.58","134","25","10","237","148","Medium","59","13","Yes","Yes","No"
"97","9.48","147","42","10","407","132","Good","73","16","No","Yes","Yes"
"98","7.45","161","82","5","287","129","Bad","33","16","Yes","Yes","No"
"99","12.49","122","77","24","382","127","Good","36","16","No","Yes","Yes"
"100","4.88","121","47","3","220","107","Bad","56","16","No","Yes","No"
"101","4.11","113","69","11","94","106","Medium","76","12","No","Yes","No"
"102","6.2","128","93","0","89","118","Medium","34","18","Yes","No","No"
"103","5.3","113","22","0","57","97","Medium","65","16","No","No","No"
"104","5.07","123","91","0","334","96","Bad","78","17","Yes","Yes","No"
"105","4.62","121","96","0","472","138","Medium","51","12","Yes","No","No"
"106","5.55","104","100","8","398","97","Medium","61","11","Yes","Yes","No"
"107","0.16","102","33","0","217","139","Medium","70","18","No","No","No"
"108","8.55","134","107","0","104","108","Medium","60","12","Yes","No","Yes"
"109","3.47","107","79","2","488","103","Bad","65","16","Yes","No","No"
"110","8.98","115","65","0","217","90","Medium","60","17","No","No","Yes"
"111","9","128","62","7","125","116","Medium","43","14","Yes","Yes","Yes"
"112","6.62","132","118","12","272","151","Medium","43","14","Yes","Yes","No"
"113","6.67","116","99","5","298","125","Good","62","12","Yes","Yes","No"
"114","6.01","131","29","11","335","127","Bad","33","12","Yes","Yes","No"
"115","9.31","122","87","9","17","106","Medium","65","13","Yes","Yes","Yes"
"116","8.54","139","35","0","95","129","Medium","42","13","Yes","No","Yes"
"117","5.08","135","75","0","202","128","Medium","80","10","No","No","No"
"118","8.8","145","53","0","507","119","Medium","41","12","Yes","No","Yes"
"119","7.57","112","88","2","243","99","Medium","62","11","Yes","Yes","No"
"120","7.37","130","94","8","137","128","Medium","64","12","Yes","Yes","No"
"121","6.87","128","105","11","249","131","Medium","63","13","Yes","Yes","No"
"122","11.67","125","89","10","380","87","Bad","28","10","Yes","Yes","Yes"
"123","6.88","119","100","5","45","108","Medium","75","10","Yes","Yes","No"
"124","8.19","127","103","0","125","155","Good","29","15","No","Yes","Yes"
"125","8.87","131","113","0","181","120","Good","63","14","Yes","No","Yes"
"126","9.34","89","78","0","181","49","Medium","43","15","No","No","Yes"
"127","11.27","153","68","2","60","133","Good","59","16","Yes","Yes","Yes"
"128","6.52","125","48","3","192","116","Medium","51","14","Yes","Yes","No"
"129","4.96","133","100","3","350","126","Bad","55","13","Yes","Yes","No"
"130","4.47","143","120","7","279","147","Bad","40","10","No","Yes","No"
"131","8.41","94","84","13","497","77","Medium","51","12","Yes","Yes","Yes"
"132","6.5","108","69","3","208","94","Medium","77","16","Yes","No","No"
"133","9.54","125","87","9","232","136","Good","72","10","Yes","Yes","Yes"
"134","7.62","132","98","2","265","97","Bad","62","12","Yes","Yes","No"
"135","3.67","132","31","0","327","131","Medium","76","16","Yes","No","No"
"136","6.44","96","94","14","384","120","Medium","36","18","No","Yes","No"
"137","5.17","131","75","0","10","120","Bad","31","18","No","No","No"
"138","6.52","128","42","0","436","118","Medium","80","11","Yes","No","No"
"139","10.27","125","103","12","371","109","Medium","44","10","Yes","Yes","Yes"
"140","12.3","146","62","10","310","94","Medium","30","13","No","Yes","Yes"
"141","6.03","133","60","10","277","129","Medium","45","18","Yes","Yes","No"
"142","6.53","140","42","0","331","131","Bad","28","15","Yes","No","No"
"143","7.44","124","84","0","300","104","Medium","77","15","Yes","No","No"
"144","0.53","122","88","7","36","159","Bad","28","17","Yes","Yes","No"
"145","9.09","132","68","0","264","123","Good","34","11","No","No","Yes"
"146","8.77","144","63","11","27","117","Medium","47","17","Yes","Yes","Yes"
"147","3.9","114","83","0","412","131","Bad","39","14","Yes","No","No"
"148","10.51","140","54","9","402","119","Good","41","16","No","Yes","Yes"
"149","7.56","110","119","0","384","97","Medium","72","14","No","Yes","No"
"150","11.48","121","120","13","140","87","Medium","56","11","Yes","Yes","Yes"
"151","10.49","122","84","8","176","114","Good","57","10","No","Yes","Yes"
"152","10.77","111","58","17","407","103","Good","75","17","No","Yes","Yes"
"153","7.64","128","78","0","341","128","Good","45","13","No","No","No"
"154","5.93","150","36","7","488","150","Medium","25","17","No","Yes","No"
"155","6.89","129","69","10","289","110","Medium","50","16","No","Yes","No"
"156","7.71","98","72","0","59","69","Medium","65","16","Yes","No","No"
"157","7.49","146","34","0","220","157","Good","51","16","Yes","No","No"
"158","10.21","121","58","8","249","90","Medium","48","13","No","Yes","Yes"
"159","12.53","142","90","1","189","112","Good","39","10","No","Yes","Yes"
"160","9.32","119","60","0","372","70","Bad","30","18","No","No","Yes"
"161","4.67","111","28","0","486","111","Medium","29","12","No","No","No"
"162","2.93","143","21","5","81","160","Medium","67","12","No","Yes","No"
"163","3.63","122","74","0","424","149","Medium","51","13","Yes","No","No"
"164","5.68","130","64","0","40","106","Bad","39","17","No","No","No"
"165","8.22","148","64","0","58","141","Medium","27","13","No","Yes","Yes"
"166","0.37","147","58","7","100","191","Bad","27","15","Yes","Yes","No"
"167","6.71","119","67","17","151","137","Medium","55","11","Yes","Yes","No"
"168","6.71","106","73","0","216","93","Medium","60","13","Yes","No","No"
"169","7.3","129","89","0","425","117","Medium","45","10","Yes","No","No"
"170","11.48","104","41","15","492","77","Good","73","18","Yes","Yes","Yes"
"171","8.01","128","39","12","356","118","Medium","71","10","Yes","Yes","Yes"
"172","12.49","93","106","12","416","55","Medium","75","15","Yes","Yes","Yes"
"173","9.03","104","102","13","123","110","Good","35","16","Yes","Yes","Yes"
"174","6.38","135","91","5","207","128","Medium","66","18","Yes","Yes","No"
"175","0","139","24","0","358","185","Medium","79","15","No","No","No"
"176","7.54","115","89","0","38","122","Medium","25","12","Yes","No","No"
"177","5.61","138","107","9","480","154","Medium","47","11","No","Yes","No"
"178","10.48","138","72","0","148","94","Medium","27","17","Yes","Yes","Yes"
"179","10.66","104","71","14","89","81","Medium","25","14","No","Yes","Yes"
"180","7.78","144","25","3","70","116","Medium","77","18","Yes","Yes","No"
"181","4.94","137","112","15","434","149","Bad","66","13","Yes","Yes","No"
"182","7.43","121","83","0","79","91","Medium","68","11","Yes","No","No"
"183","4.74","137","60","4","230","140","Bad","25","13","Yes","No","No"
"184","5.32","118","74","6","426","102","Medium","80","18","Yes","Yes","No"
"185","9.95","132","33","7","35","97","Medium","60","11","No","Yes","Yes"
"186","10.07","130","100","11","449","107","Medium","64","10","Yes","Yes","Yes"
"187","8.68","120","51","0","93","86","Medium","46","17","No","No","Yes"
"188","6.03","117","32","0","142","96","Bad","62","17","Yes","No","No"
"189","8.07","116","37","0","426","90","Medium","76","15","Yes","No","Yes"
"190","12.11","118","117","18","509","104","Medium","26","15","No","Yes","Yes"
"191","8.79","130","37","13","297","101","Medium","37","13","No","Yes","Yes"
"192","6.67","156","42","13","170","173","Good","74","14","Yes","Yes","No"
"193","7.56","108","26","0","408","93","Medium","56","14","No","No","No"
"194","13.28","139","70","7","71","96","Good","61","10","Yes","Yes","Yes"
"195","7.23","112","98","18","481","128","Medium","45","11","Yes","Yes","No"
"196","4.19","117","93","4","420","112","Bad","66","11","Yes","Yes","No"
"197","4.1","130","28","6","410","133","Bad","72","16","Yes","Yes","No"
"198","2.52","124","61","0","333","138","Medium","76","16","Yes","No","No"
"199","3.62","112","80","5","500","128","Medium","69","10","Yes","Yes","No"
"200","6.42","122","88","5","335","126","Medium","64","14","Yes","Yes","No"
"201","5.56","144","92","0","349","146","Medium","62","12","No","No","No"
"202","5.94","138","83","0","139","134","Medium","54","18","Yes","No","No"
"203","4.1","121","78","4","413","130","Bad","46","10","No","Yes","No"
"204","2.05","131","82","0","132","157","Bad","25","14","Yes","No","No"
"205","8.74","155","80","0","237","124","Medium","37","14","Yes","No","Yes"
"206","5.68","113","22","1","317","132","Medium","28","12","Yes","No","No"
"207","4.97","162","67","0","27","160","Medium","77","17","Yes","Yes","No"
"208","8.19","111","105","0","466","97","Bad","61","10","No","No","Yes"
"209","7.78","86","54","0","497","64","Bad","33","12","Yes","No","No"
"210","3.02","98","21","11","326","90","Bad","76","11","No","Yes","No"
"211","4.36","125","41","2","357","123","Bad","47","14","No","Yes","No"
"212","9.39","117","118","14","445","120","Medium","32","15","Yes","Yes","Yes"
"213","12.04","145","69","19","501","105","Medium","45","11","Yes","Yes","Yes"
"214","8.23","149","84","5","220","139","Medium","33","10","Yes","Yes","Yes"
"215","4.83","115","115","3","48","107","Medium","73","18","Yes","Yes","No"
"216","2.34","116","83","15","170","144","Bad","71","11","Yes","Yes","No"
"217","5.73","141","33","0","243","144","Medium","34","17","Yes","No","No"
"218","4.34","106","44","0","481","111","Medium","70","14","No","No","No"
"219","9.7","138","61","12","156","120","Medium","25","14","Yes","Yes","Yes"
"220","10.62","116","79","19","359","116","Good","58","17","Yes","Yes","Yes"
"221","10.59","131","120","15","262","124","Medium","30","10","Yes","Yes","Yes"
"222","6.43","124","44","0","125","107","Medium","80","11","Yes","No","No"
"223","7.49","136","119","6","178","145","Medium","35","13","Yes","Yes","No"
"224","3.45","110","45","9","276","125","Medium","62","14","Yes","Yes","No"
"225","4.1","134","82","0","464","141","Medium","48","13","No","No","No"
"226","6.68","107","25","0","412","82","Bad","36","14","Yes","No","No"
"227","7.8","119","33","0","245","122","Good","56","14","Yes","No","No"
"228","8.69","113","64","10","68","101","Medium","57","16","Yes","Yes","Yes"
"229","5.4","149","73","13","381","163","Bad","26","11","No","Yes","No"
"230","11.19","98","104","0","404","72","Medium","27","18","No","No","Yes"
"231","5.16","115","60","0","119","114","Bad","38","14","No","No","No"
"232","8.09","132","69","0","123","122","Medium","27","11","No","No","Yes"
"233","13.14","137","80","10","24","105","Good","61","15","Yes","Yes","Yes"
"234","8.65","123","76","18","218","120","Medium","29","14","No","Yes","Yes"
"235","9.43","115","62","11","289","129","Good","56","16","No","Yes","Yes"
"236","5.53","126","32","8","95","132","Medium","50","17","Yes","Yes","No"
"237","9.32","141","34","16","361","108","Medium","69","10","Yes","Yes","Yes"
"238","9.62","151","28","8","499","135","Medium","48","10","Yes","Yes","Yes"
"239","7.36","121","24","0","200","133","Good","73","13","Yes","No","No"
"240","3.89","123","105","0","149","118","Bad","62","16","Yes","Yes","No"
"241","10.31","159","80","0","362","121","Medium","26","18","Yes","No","Yes"
"242","12.01","136","63","0","160","94","Medium","38","12","Yes","No","Yes"
"243","4.68","124","46","0","199","135","Medium","52","14","No","No","No"
"244","7.82","124","25","13","87","110","Medium","57","10","Yes","Yes","No"
"245","8.78","130","30","0","391","100","Medium","26","18","Yes","No","Yes"
"246","10","114","43","0","199","88","Good","57","10","No","Yes","Yes"
"247","6.9","120","56","20","266","90","Bad","78","18","Yes","Yes","No"
"248","5.04","123","114","0","298","151","Bad","34","16","Yes","No","No"
"249","5.36","111","52","0","12","101","Medium","61","11","Yes","Yes","No"
"250","5.05","125","67","0","86","117","Bad","65","11","Yes","No","No"
"251","9.16","137","105","10","435","156","Good","72","14","Yes","Yes","Yes"
"252","3.72","139","111","5","310","132","Bad","62","13","Yes","Yes","No"
"253","8.31","133","97","0","70","117","Medium","32","16","Yes","No","Yes"
"254","5.64","124","24","5","288","122","Medium","57","12","No","Yes","No"
"255","9.58","108","104","23","353","129","Good","37","17","Yes","Yes","Yes"
"256","7.71","123","81","8","198","81","Bad","80","15","Yes","Yes","No"
"257","4.2","147","40","0","277","144","Medium","73","10","Yes","No","No"
"258","8.67","125","62","14","477","112","Medium","80","13","Yes","Yes","Yes"
"259","3.47","108","38","0","251","81","Bad","72","14","No","No","No"
"260","5.12","123","36","10","467","100","Bad","74","11","No","Yes","No"
"261","7.67","129","117","8","400","101","Bad","36","10","Yes","Yes","No"
"262","5.71","121","42","4","188","118","Medium","54","15","Yes","Yes","No"
"263","6.37","120","77","15","86","132","Medium","48","18","Yes","Yes","No"
"264","7.77","116","26","6","434","115","Medium","25","17","Yes","Yes","No"
"265","6.95","128","29","5","324","159","Good","31","15","Yes","Yes","No"
"266","5.31","130","35","10","402","129","Bad","39","17","Yes","Yes","No"
"267","9.1","128","93","12","343","112","Good","73","17","No","Yes","Yes"
"268","5.83","134","82","7","473","112","Bad","51","12","No","Yes","No"
"269","6.53","123","57","0","66","105","Medium","39","11","Yes","No","No"
"270","5.01","159","69","0","438","166","Medium","46","17","Yes","No","No"
"271","11.99","119","26","0","284","89","Good","26","10","Yes","No","Yes"
"272","4.55","111","56","0","504","110","Medium","62","16","Yes","No","No"
"273","12.98","113","33","0","14","63","Good","38","12","Yes","No","Yes"
"274","10.04","116","106","8","244","86","Medium","58","12","Yes","Yes","Yes"
"275","7.22","135","93","2","67","119","Medium","34","11","Yes","Yes","No"
"276","6.67","107","119","11","210","132","Medium","53","11","Yes","Yes","No"
"277","6.93","135","69","14","296","130","Medium","73","15","Yes","Yes","No"
"278","7.8","136","48","12","326","125","Medium","36","16","Yes","Yes","No"
"279","7.22","114","113","2","129","151","Good","40","15","No","Yes","No"
"280","3.42","141","57","13","376","158","Medium","64","18","Yes","Yes","No"
"281","2.86","121","86","10","496","145","Bad","51","10","Yes","Yes","No"
"282","11.19","122","69","7","303","105","Good","45","16","No","Yes","Yes"
"283","7.74","150","96","0","80","154","Good","61","11","Yes","No","No"
"284","5.36","135","110","0","112","117","Medium","80","16","No","No","No"
"285","6.97","106","46","11","414","96","Bad","79","17","No","No","No"
"286","7.6","146","26","11","261","131","Medium","39","10","Yes","Yes","No"
"287","7.53","117","118","11","429","113","Medium","67","18","No","Yes","No"
"288","6.88","95","44","4","208","72","Bad","44","17","Yes","Yes","No"
"289","6.98","116","40","0","74","97","Medium","76","15","No","No","No"
"290","8.75","143","77","25","448","156","Medium","43","17","Yes","Yes","Yes"
"291","9.49","107","111","14","400","103","Medium","41","11","No","Yes","Yes"
"292","6.64","118","70","0","106","89","Bad","39","17","Yes","No","No"
"293","11.82","113","66","16","322","74","Good","76","15","Yes","Yes","Yes"
"294","11.28","123","84","0","74","89","Good","59","10","Yes","No","Yes"
"295","12.66","148","76","3","126","99","Good","60","11","Yes","Yes","Yes"
"296","4.21","118","35","14","502","137","Medium","79","10","No","Yes","No"
"297","8.21","127","44","13","160","123","Good","63","18","Yes","Yes","Yes"
"298","3.07","118","83","13","276","104","Bad","75","10","Yes","Yes","No"
"299","10.98","148","63","0","312","130","Good","63","15","Yes","No","Yes"
"300","9.4","135","40","17","497","96","Medium","54","17","No","Yes","Yes"
"301","8.57","116","78","1","158","99","Medium","45","11","Yes","Yes","Yes"
"302","7.41","99","93","0","198","87","Medium","57","16","Yes","Yes","No"
"303","5.28","108","77","13","388","110","Bad","74","14","Yes","Yes","No"
"304","10.01","133","52","16","290","99","Medium","43","11","Yes","Yes","Yes"
"305","11.93","123","98","12","408","134","Good","29","10","Yes","Yes","Yes"
"306","8.03","115","29","26","394","132","Medium","33","13","Yes","Yes","Yes"
"307","4.78","131","32","1","85","133","Medium","48","12","Yes","Yes","No"
"308","5.9","138","92","0","13","120","Bad","61","12","Yes","No","No"
"309","9.24","126","80","19","436","126","Medium","52","10","Yes","Yes","Yes"
"310","11.18","131","111","13","33","80","Bad","68","18","Yes","Yes","Yes"
"311","9.53","175","65","29","419","166","Medium","53","12","Yes","Yes","Yes"
"312","6.15","146","68","12","328","132","Bad","51","14","Yes","Yes","No"
"313","6.8","137","117","5","337","135","Bad","38","10","Yes","Yes","No"
"314","9.33","103","81","3","491","54","Medium","66","13","Yes","No","Yes"
"315","7.72","133","33","10","333","129","Good","71","14","Yes","Yes","No"
"316","6.39","131","21","8","220","171","Good","29","14","Yes","Yes","No"
"317","15.63","122","36","5","369","72","Good","35","10","Yes","Yes","Yes"
"318","6.41","142","30","0","472","136","Good","80","15","No","No","No"
"319","10.08","116","72","10","456","130","Good","41","14","No","Yes","Yes"
"320","6.97","127","45","19","459","129","Medium","57","11","No","Yes","No"
"321","5.86","136","70","12","171","152","Medium","44","18","Yes","Yes","No"
"322","7.52","123","39","5","499","98","Medium","34","15","Yes","No","No"
"323","9.16","140","50","10","300","139","Good","60","15","Yes","Yes","Yes"
"324","10.36","107","105","18","428","103","Medium","34","12","Yes","Yes","Yes"
"325","2.66","136","65","4","133","150","Bad","53","13","Yes","Yes","No"
"326","11.7","144","69","11","131","104","Medium","47","11","Yes","Yes","Yes"
"327","4.69","133","30","0","152","122","Medium","53","17","Yes","No","No"
"328","6.23","112","38","17","316","104","Medium","80","16","Yes","Yes","No"
"329","3.15","117","66","1","65","111","Bad","55","11","Yes","Yes","No"
"330","11.27","100","54","9","433","89","Good","45","12","Yes","Yes","Yes"
"331","4.99","122","59","0","501","112","Bad","32","14","No","No","No"
"332","10.1","135","63","15","213","134","Medium","32","10","Yes","Yes","Yes"
"333","5.74","106","33","20","354","104","Medium","61","12","Yes","Yes","No"
"334","5.87","136","60","7","303","147","Medium","41","10","Yes","Yes","No"
"335","7.63","93","117","9","489","83","Bad","42","13","Yes","Yes","No"
"336","6.18","120","70","15","464","110","Medium","72","15","Yes","Yes","No"
"337","5.17","138","35","6","60","143","Bad","28","18","Yes","No","No"
"338","8.61","130","38","0","283","102","Medium","80","15","Yes","No","Yes"
"339","5.97","112","24","0","164","101","Medium","45","11","Yes","No","No"
"340","11.54","134","44","4","219","126","Good","44","15","Yes","Yes","Yes"
"341","7.5","140","29","0","105","91","Bad","43","16","Yes","No","No"
"342","7.38","98","120","0","268","93","Medium","72","10","No","No","No"
"343","7.81","137","102","13","422","118","Medium","71","10","No","Yes","No"
"344","5.99","117","42","10","371","121","Bad","26","14","Yes","Yes","No"
"345","8.43","138","80","0","108","126","Good","70","13","No","Yes","Yes"
"346","4.81","121","68","0","279","149","Good","79","12","Yes","No","No"
"347","8.97","132","107","0","144","125","Medium","33","13","No","No","Yes"
"348","6.88","96","39","0","161","112","Good","27","14","No","No","No"
"349","12.57","132","102","20","459","107","Good","49","11","Yes","Yes","Yes"
"350","9.32","134","27","18","467","96","Medium","49","14","No","Yes","Yes"
"351","8.64","111","101","17","266","91","Medium","63","17","No","Yes","Yes"
"352","10.44","124","115","16","458","105","Medium","62","16","No","Yes","Yes"
"353","13.44","133","103","14","288","122","Good","61","17","Yes","Yes","Yes"
"354","9.45","107","67","12","430","92","Medium","35","12","No","Yes","Yes"
"355","5.3","133","31","1","80","145","Medium","42","18","Yes","Yes","No"
"356","7.02","130","100","0","306","146","Good","42","11","Yes","No","No"
"357","3.58","142","109","0","111","164","Good","72","12","Yes","No","No"
"358","13.36","103","73","3","276","72","Medium","34","15","Yes","Yes","Yes"
"359","4.17","123","96","10","71","118","Bad","69","11","Yes","Yes","No"
"360","3.13","130","62","11","396","130","Bad","66","14","Yes","Yes","No"
"361","8.77","118","86","7","265","114","Good","52","15","No","Yes","Yes"
"362","8.68","131","25","10","183","104","Medium","56","15","No","Yes","Yes"
"363","5.25","131","55","0","26","110","Bad","79","12","Yes","Yes","No"
"364","10.26","111","75","1","377","108","Good","25","12","Yes","No","Yes"
"365","10.5","122","21","16","488","131","Good","30","14","Yes","Yes","Yes"
"366","6.53","154","30","0","122","162","Medium","57","17","No","No","No"
"367","5.98","124","56","11","447","134","Medium","53","12","No","Yes","No"
"368","14.37","95","106","0","256","53","Good","52","17","Yes","No","Yes"
"369","10.71","109","22","10","348","79","Good","74","14","No","Yes","Yes"
"370","10.26","135","100","22","463","122","Medium","36","14","Yes","Yes","Yes"
"371","7.68","126","41","22","403","119","Bad","42","12","Yes","Yes","No"
"372","9.08","152","81","0","191","126","Medium","54","16","Yes","No","Yes"
"373","7.8","121","50","0","508","98","Medium","65","11","No","No","No"
"374","5.58","137","71","0","402","116","Medium","78","17","Yes","No","No"
"375","9.44","131","47","7","90","118","Medium","47","12","Yes","Yes","Yes"
"376","7.9","132","46","4","206","124","Medium","73","11","Yes","No","No"
"377","16.27","141","60","19","319","92","Good","44","11","Yes","Yes","Yes"
"378","6.81","132","61","0","263","125","Medium","41","12","No","No","No"
"379","6.11","133","88","3","105","119","Medium","79","12","Yes","Yes","No"
"380","5.81","125","111","0","404","107","Bad","54","15","Yes","No","No"
"381","9.64","106","64","10","17","89","Medium","68","17","Yes","Yes","Yes"
"382","3.9","124","65","21","496","151","Bad","77","13","Yes","Yes","No"
"383","4.95","121","28","19","315","121","Medium","66","14","Yes","Yes","No"
"384","9.35","98","117","0","76","68","Medium","63","10","Yes","No","Yes"
"385","12.85","123","37","15","348","112","Good","28","12","Yes","Yes","Yes"
"386","5.87","131","73","13","455","132","Medium","62","17","Yes","Yes","No"
"387","5.32","152","116","0","170","160","Medium","39","16","Yes","No","No"
"388","8.67","142","73","14","238","115","Medium","73","14","No","Yes","Yes"
"389","8.14","135","89","11","245","78","Bad","79","16","Yes","Yes","Yes"
"390","8.44","128","42","8","328","107","Medium","35","12","Yes","Yes","Yes"
"391","5.47","108","75","9","61","111","Medium","67","12","Yes","Yes","No"
"392","6.1","153","63","0","49","124","Bad","56","16","Yes","No","No"
"393","4.53","129","42","13","315","130","Bad","34","13","Yes","Yes","No"
"394","5.57","109","51","10","26","120","Medium","30","17","No","Yes","No"
"395","5.35","130","58","19","366","139","Bad","33","16","Yes","Yes","No"
"396","12.57","138","108","17","203","128","Good","33","14","Yes","Yes","Yes"
"397","6.14","139","23","3","37","120","Medium","55","11","No","Yes","No"
"398","7.41","162","26","12","368","159","Medium","40","18","Yes","Yes","No"
"399","5.94","100","79","7","284","95","Bad","50","12","Yes","Yes","No"
"400","9.71","134","37","0","27","120","Good","49","16","Yes","Yes","Yes"


================================================
File: tests/data_examples/data4/in/tables/sample.csv.manifest
================================================
{
    "id": "in.c-main.test",
    "uri": "https:\/\/connection.keboola.com\/\/v2\/storage\/tables\/in.c-main.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2015-11-02T09:11:37+0100",
    "last_change_date": "2015-11-02T09:11:37+0100",
    "last_import_date": "2015-11-02T09:11:37+0100",
    "rows_count": 400,
    "data_size_bytes": 81920,
    "is_alias": false,
    "column_metadata": {"x": [{"key": "foo", "value": "gogo"}]},
    "columns": [
        "x",
        "Sales",
        "CompPrice",
        "Income",
        "Advertising",
        "Population",
        "Price",
        "ShelveLoc",
        "Age",
        "Education",
        "Urban",
        "US",
        "High"
    ],
    "attributes": []
}

================================================
File: tests/data_examples/data5/config.json
================================================
{
    "storage": {
        "input": {
            "files": [],
            "tables": [
                {
                    "source": "in.c-main.test",
                    "destination": "sample.csv",
                    "columns": [],
                    "where_values": [],
                    "where_operator": "eq",
                    "column_types": [
                        {
                            "source": "Sales",
                            "type": "VARCHAR",
                            "destination": "id",
                            "length": "255",
                            "nullable": false,
                            "convert_empty_values_to_null": false
                        }
                    ]
                }
            ]
        }       

    },
    "parameters": {

    }
   
}


================================================
File: tests/data_examples/data5/in/state.json
================================================
{
  "test_state": 1234
}

================================================
File: tests/data_examples/data5/in/tables/sample_output.csv
================================================
"1","9.5","138","73","11","276","120","Bad","42","17","Yes","Yes","Yes"
"2","11.22","111","48","16","260","83","Good","65","10","Yes","Yes","Yes"
"3","10.06","113","35","10","269","80","Medium","59","12","Yes","Yes","Yes"
"4","7.4","117","100","4","466","97","Medium","55","14","Yes","Yes","No"
"5","4.15","141","64","3","340","128","Bad","38","13","Yes","No","No"
"6","10.81","124","113","13","501","72","Bad","78","16","No","Yes","Yes"
"7","6.63","115","105","0","45","108","Medium","71","15","Yes","No","No"
"8","11.85","136","81","15","425","120","Good","67","10","Yes","Yes","Yes"
"9","6.54","132","110","0","108","124","Medium","76","10","No","No","No"
"10","4.69","132","113","0","131","124","Medium","76","17","No","Yes","No"
"11","9.01","121","78","9","150","100","Bad","26","10","No","Yes","Yes"
"12","11.96","117","94","4","503","94","Good","50","13","Yes","Yes","Yes"
"13","3.98","122","35","2","393","136","Medium","62","18","Yes","No","No"
"14","10.96","115","28","11","29","86","Good","53","18","Yes","Yes","Yes"
"15","11.17","107","117","11","148","118","Good","52","18","Yes","Yes","Yes"
"16","8.71","149","95","5","400","144","Medium","76","18","No","No","Yes"
"17","7.58","118","32","0","284","110","Good","63","13","Yes","No","No"
"18","12.29","147","74","13","251","131","Good","52","10","Yes","Yes","Yes"
"19","13.91","110","110","0","408","68","Good","46","17","No","Yes","Yes"
"20","8.73","129","76","16","58","121","Medium","69","12","Yes","Yes","Yes"
"21","6.41","125","90","2","367","131","Medium","35","18","Yes","Yes","No"
"22","12.13","134","29","12","239","109","Good","62","18","No","Yes","Yes"
"23","5.08","128","46","6","497","138","Medium","42","13","Yes","No","No"
"24","5.87","121","31","0","292","109","Medium","79","10","Yes","No","No"
"25","10.14","145","119","16","294","113","Bad","42","12","Yes","Yes","Yes"
"26","14.9","139","32","0","176","82","Good","54","11","No","No","Yes"
"27","8.33","107","115","11","496","131","Good","50","11","No","Yes","Yes"
"28","5.27","98","118","0","19","107","Medium","64","17","Yes","No","No"
"29","2.99","103","74","0","359","97","Bad","55","11","Yes","Yes","No"
"30","7.81","104","99","15","226","102","Bad","58","17","Yes","Yes","No"
"31","13.55","125","94","0","447","89","Good","30","12","Yes","No","Yes"
"32","8.25","136","58","16","241","131","Medium","44","18","Yes","Yes","Yes"
"33","6.2","107","32","12","236","137","Good","64","10","No","Yes","No"
"34","8.77","114","38","13","317","128","Good","50","16","Yes","Yes","Yes"
"35","2.67","115","54","0","406","128","Medium","42","17","Yes","Yes","No"
"36","11.07","131","84","11","29","96","Medium","44","17","No","Yes","Yes"
"37","8.89","122","76","0","270","100","Good","60","18","No","No","Yes"
"38","4.95","121","41","5","412","110","Medium","54","10","Yes","Yes","No"
"39","6.59","109","73","0","454","102","Medium","65","15","Yes","No","No"
"40","3.24","130","60","0","144","138","Bad","38","10","No","No","No"
"41","2.07","119","98","0","18","126","Bad","73","17","No","No","No"
"42","7.96","157","53","0","403","124","Bad","58","16","Yes","No","No"
"43","10.43","77","69","0","25","24","Medium","50","18","Yes","No","Yes"
"44","4.12","123","42","11","16","134","Medium","59","13","Yes","Yes","No"
"45","4.16","85","79","6","325","95","Medium","69","13","Yes","Yes","No"
"46","4.56","141","63","0","168","135","Bad","44","12","Yes","Yes","No"
"47","12.44","127","90","14","16","70","Medium","48","15","No","Yes","Yes"
"48","4.38","126","98","0","173","108","Bad","55","16","Yes","No","No"
"49","3.91","116","52","0","349","98","Bad","69","18","Yes","No","No"
"50","10.61","157","93","0","51","149","Good","32","17","Yes","No","Yes"
"51","1.42","99","32","18","341","108","Bad","80","16","Yes","Yes","No"
"52","4.42","121","90","0","150","108","Bad","75","16","Yes","No","No"
"53","7.91","153","40","3","112","129","Bad","39","18","Yes","Yes","No"
"54","6.92","109","64","13","39","119","Medium","61","17","Yes","Yes","No"
"55","4.9","134","103","13","25","144","Medium","76","17","No","Yes","No"
"56","6.85","143","81","5","60","154","Medium","61","18","Yes","Yes","No"
"57","11.91","133","82","0","54","84","Medium","50","17","Yes","No","Yes"
"58","0.91","93","91","0","22","117","Bad","75","11","Yes","No","No"
"59","5.42","103","93","15","188","103","Bad","74","16","Yes","Yes","No"
"60","5.21","118","71","4","148","114","Medium","80","13","Yes","No","No"
"61","8.32","122","102","19","469","123","Bad","29","13","Yes","Yes","Yes"
"62","7.32","105","32","0","358","107","Medium","26","13","No","No","No"
"63","1.82","139","45","0","146","133","Bad","77","17","Yes","Yes","No"
"64","8.47","119","88","10","170","101","Medium","61","13","Yes","Yes","Yes"
"65","7.8","100","67","12","184","104","Medium","32","16","No","Yes","No"
"66","4.9","122","26","0","197","128","Medium","55","13","No","No","No"
"67","8.85","127","92","0","508","91","Medium","56","18","Yes","No","Yes"
"68","9.01","126","61","14","152","115","Medium","47","16","Yes","Yes","Yes"
"69","13.39","149","69","20","366","134","Good","60","13","Yes","Yes","Yes"
"70","7.99","127","59","0","339","99","Medium","65","12","Yes","No","No"
"71","9.46","89","81","15","237","99","Good","74","12","Yes","Yes","Yes"
"72","6.5","148","51","16","148","150","Medium","58","17","No","Yes","No"
"73","5.52","115","45","0","432","116","Medium","25","15","Yes","No","No"
"74","12.61","118","90","10","54","104","Good","31","11","No","Yes","Yes"
"75","6.2","150","68","5","125","136","Medium","64","13","No","Yes","No"
"76","8.55","88","111","23","480","92","Bad","36","16","No","Yes","Yes"
"77","10.64","102","87","10","346","70","Medium","64","15","Yes","Yes","Yes"
"78","7.7","118","71","12","44","89","Medium","67","18","No","Yes","No"
"79","4.43","134","48","1","139","145","Medium","65","12","Yes","Yes","No"
"80","9.14","134","67","0","286","90","Bad","41","13","Yes","No","Yes"
"81","8.01","113","100","16","353","79","Bad","68","11","Yes","Yes","Yes"
"82","7.52","116","72","0","237","128","Good","70","13","Yes","No","No"
"83","11.62","151","83","4","325","139","Good","28","17","Yes","Yes","Yes"
"84","4.42","109","36","7","468","94","Bad","56","11","Yes","Yes","No"
"85","2.23","111","25","0","52","121","Bad","43","18","No","No","No"
"86","8.47","125","103","0","304","112","Medium","49","13","No","No","Yes"
"87","8.7","150","84","9","432","134","Medium","64","15","Yes","No","Yes"
"88","11.7","131","67","7","272","126","Good","54","16","No","Yes","Yes"
"89","6.56","117","42","7","144","111","Medium","62","10","Yes","Yes","No"
"90","7.95","128","66","3","493","119","Medium","45","16","No","No","No"
"91","5.33","115","22","0","491","103","Medium","64","11","No","No","No"
"92","4.81","97","46","11","267","107","Medium","80","15","Yes","Yes","No"
"93","4.53","114","113","0","97","125","Medium","29","12","Yes","No","No"
"94","8.86","145","30","0","67","104","Medium","55","17","Yes","No","Yes"
"95","8.39","115","97","5","134","84","Bad","55","11","Yes","Yes","Yes"
"96","5.58","134","25","10","237","148","Medium","59","13","Yes","Yes","No"
"97","9.48","147","42","10","407","132","Good","73","16","No","Yes","Yes"
"98","7.45","161","82","5","287","129","Bad","33","16","Yes","Yes","No"
"99","12.49","122","77","24","382","127","Good","36","16","No","Yes","Yes"
"100","4.88","121","47","3","220","107","Bad","56","16","No","Yes","No"
"101","4.11","113","69","11","94","106","Medium","76","12","No","Yes","No"
"102","6.2","128","93","0","89","118","Medium","34","18","Yes","No","No"
"103","5.3","113","22","0","57","97","Medium","65","16","No","No","No"
"104","5.07","123","91","0","334","96","Bad","78","17","Yes","Yes","No"
"105","4.62","121","96","0","472","138","Medium","51","12","Yes","No","No"
"106","5.55","104","100","8","398","97","Medium","61","11","Yes","Yes","No"
"107","0.16","102","33","0","217","139","Medium","70","18","No","No","No"
"108","8.55","134","107","0","104","108","Medium","60","12","Yes","No","Yes"
"109","3.47","107","79","2","488","103","Bad","65","16","Yes","No","No"
"110","8.98","115","65","0","217","90","Medium","60","17","No","No","Yes"
"111","9","128","62","7","125","116","Medium","43","14","Yes","Yes","Yes"
"112","6.62","132","118","12","272","151","Medium","43","14","Yes","Yes","No"
"113","6.67","116","99","5","298","125","Good","62","12","Yes","Yes","No"
"114","6.01","131","29","11","335","127","Bad","33","12","Yes","Yes","No"
"115","9.31","122","87","9","17","106","Medium","65","13","Yes","Yes","Yes"
"116","8.54","139","35","0","95","129","Medium","42","13","Yes","No","Yes"
"117","5.08","135","75","0","202","128","Medium","80","10","No","No","No"
"118","8.8","145","53","0","507","119","Medium","41","12","Yes","No","Yes"
"119","7.57","112","88","2","243","99","Medium","62","11","Yes","Yes","No"
"120","7.37","130","94","8","137","128","Medium","64","12","Yes","Yes","No"
"121","6.87","128","105","11","249","131","Medium","63","13","Yes","Yes","No"
"122","11.67","125","89","10","380","87","Bad","28","10","Yes","Yes","Yes"
"123","6.88","119","100","5","45","108","Medium","75","10","Yes","Yes","No"
"124","8.19","127","103","0","125","155","Good","29","15","No","Yes","Yes"
"125","8.87","131","113","0","181","120","Good","63","14","Yes","No","Yes"
"126","9.34","89","78","0","181","49","Medium","43","15","No","No","Yes"
"127","11.27","153","68","2","60","133","Good","59","16","Yes","Yes","Yes"
"128","6.52","125","48","3","192","116","Medium","51","14","Yes","Yes","No"
"129","4.96","133","100","3","350","126","Bad","55","13","Yes","Yes","No"
"130","4.47","143","120","7","279","147","Bad","40","10","No","Yes","No"
"131","8.41","94","84","13","497","77","Medium","51","12","Yes","Yes","Yes"
"132","6.5","108","69","3","208","94","Medium","77","16","Yes","No","No"
"133","9.54","125","87","9","232","136","Good","72","10","Yes","Yes","Yes"
"134","7.62","132","98","2","265","97","Bad","62","12","Yes","Yes","No"
"135","3.67","132","31","0","327","131","Medium","76","16","Yes","No","No"
"136","6.44","96","94","14","384","120","Medium","36","18","No","Yes","No"
"137","5.17","131","75","0","10","120","Bad","31","18","No","No","No"
"138","6.52","128","42","0","436","118","Medium","80","11","Yes","No","No"
"139","10.27","125","103","12","371","109","Medium","44","10","Yes","Yes","Yes"
"140","12.3","146","62","10","310","94","Medium","30","13","No","Yes","Yes"
"141","6.03","133","60","10","277","129","Medium","45","18","Yes","Yes","No"
"142","6.53","140","42","0","331","131","Bad","28","15","Yes","No","No"
"143","7.44","124","84","0","300","104","Medium","77","15","Yes","No","No"
"144","0.53","122","88","7","36","159","Bad","28","17","Yes","Yes","No"
"145","9.09","132","68","0","264","123","Good","34","11","No","No","Yes"
"146","8.77","144","63","11","27","117","Medium","47","17","Yes","Yes","Yes"
"147","3.9","114","83","0","412","131","Bad","39","14","Yes","No","No"
"148","10.51","140","54","9","402","119","Good","41","16","No","Yes","Yes"
"149","7.56","110","119","0","384","97","Medium","72","14","No","Yes","No"
"150","11.48","121","120","13","140","87","Medium","56","11","Yes","Yes","Yes"
"151","10.49","122","84","8","176","114","Good","57","10","No","Yes","Yes"
"152","10.77","111","58","17","407","103","Good","75","17","No","Yes","Yes"
"153","7.64","128","78","0","341","128","Good","45","13","No","No","No"
"154","5.93","150","36","7","488","150","Medium","25","17","No","Yes","No"
"155","6.89","129","69","10","289","110","Medium","50","16","No","Yes","No"
"156","7.71","98","72","0","59","69","Medium","65","16","Yes","No","No"
"157","7.49","146","34","0","220","157","Good","51","16","Yes","No","No"
"158","10.21","121","58","8","249","90","Medium","48","13","No","Yes","Yes"
"159","12.53","142","90","1","189","112","Good","39","10","No","Yes","Yes"
"160","9.32","119","60","0","372","70","Bad","30","18","No","No","Yes"
"161","4.67","111","28","0","486","111","Medium","29","12","No","No","No"
"162","2.93","143","21","5","81","160","Medium","67","12","No","Yes","No"
"163","3.63","122","74","0","424","149","Medium","51","13","Yes","No","No"
"164","5.68","130","64","0","40","106","Bad","39","17","No","No","No"
"165","8.22","148","64","0","58","141","Medium","27","13","No","Yes","Yes"
"166","0.37","147","58","7","100","191","Bad","27","15","Yes","Yes","No"
"167","6.71","119","67","17","151","137","Medium","55","11","Yes","Yes","No"
"168","6.71","106","73","0","216","93","Medium","60","13","Yes","No","No"
"169","7.3","129","89","0","425","117","Medium","45","10","Yes","No","No"
"170","11.48","104","41","15","492","77","Good","73","18","Yes","Yes","Yes"
"171","8.01","128","39","12","356","118","Medium","71","10","Yes","Yes","Yes"
"172","12.49","93","106","12","416","55","Medium","75","15","Yes","Yes","Yes"
"173","9.03","104","102","13","123","110","Good","35","16","Yes","Yes","Yes"
"174","6.38","135","91","5","207","128","Medium","66","18","Yes","Yes","No"
"175","0","139","24","0","358","185","Medium","79","15","No","No","No"
"176","7.54","115","89","0","38","122","Medium","25","12","Yes","No","No"
"177","5.61","138","107","9","480","154","Medium","47","11","No","Yes","No"
"178","10.48","138","72","0","148","94","Medium","27","17","Yes","Yes","Yes"
"179","10.66","104","71","14","89","81","Medium","25","14","No","Yes","Yes"
"180","7.78","144","25","3","70","116","Medium","77","18","Yes","Yes","No"
"181","4.94","137","112","15","434","149","Bad","66","13","Yes","Yes","No"
"182","7.43","121","83","0","79","91","Medium","68","11","Yes","No","No"
"183","4.74","137","60","4","230","140","Bad","25","13","Yes","No","No"
"184","5.32","118","74","6","426","102","Medium","80","18","Yes","Yes","No"
"185","9.95","132","33","7","35","97","Medium","60","11","No","Yes","Yes"
"186","10.07","130","100","11","449","107","Medium","64","10","Yes","Yes","Yes"
"187","8.68","120","51","0","93","86","Medium","46","17","No","No","Yes"
"188","6.03","117","32","0","142","96","Bad","62","17","Yes","No","No"
"189","8.07","116","37","0","426","90","Medium","76","15","Yes","No","Yes"
"190","12.11","118","117","18","509","104","Medium","26","15","No","Yes","Yes"
"191","8.79","130","37","13","297","101","Medium","37","13","No","Yes","Yes"
"192","6.67","156","42","13","170","173","Good","74","14","Yes","Yes","No"
"193","7.56","108","26","0","408","93","Medium","56","14","No","No","No"
"194","13.28","139","70","7","71","96","Good","61","10","Yes","Yes","Yes"
"195","7.23","112","98","18","481","128","Medium","45","11","Yes","Yes","No"
"196","4.19","117","93","4","420","112","Bad","66","11","Yes","Yes","No"
"197","4.1","130","28","6","410","133","Bad","72","16","Yes","Yes","No"
"198","2.52","124","61","0","333","138","Medium","76","16","Yes","No","No"
"199","3.62","112","80","5","500","128","Medium","69","10","Yes","Yes","No"
"200","6.42","122","88","5","335","126","Medium","64","14","Yes","Yes","No"
"201","5.56","144","92","0","349","146","Medium","62","12","No","No","No"
"202","5.94","138","83","0","139","134","Medium","54","18","Yes","No","No"
"203","4.1","121","78","4","413","130","Bad","46","10","No","Yes","No"
"204","2.05","131","82","0","132","157","Bad","25","14","Yes","No","No"
"205","8.74","155","80","0","237","124","Medium","37","14","Yes","No","Yes"
"206","5.68","113","22","1","317","132","Medium","28","12","Yes","No","No"
"207","4.97","162","67","0","27","160","Medium","77","17","Yes","Yes","No"
"208","8.19","111","105","0","466","97","Bad","61","10","No","No","Yes"
"209","7.78","86","54","0","497","64","Bad","33","12","Yes","No","No"
"210","3.02","98","21","11","326","90","Bad","76","11","No","Yes","No"
"211","4.36","125","41","2","357","123","Bad","47","14","No","Yes","No"
"212","9.39","117","118","14","445","120","Medium","32","15","Yes","Yes","Yes"
"213","12.04","145","69","19","501","105","Medium","45","11","Yes","Yes","Yes"
"214","8.23","149","84","5","220","139","Medium","33","10","Yes","Yes","Yes"
"215","4.83","115","115","3","48","107","Medium","73","18","Yes","Yes","No"
"216","2.34","116","83","15","170","144","Bad","71","11","Yes","Yes","No"
"217","5.73","141","33","0","243","144","Medium","34","17","Yes","No","No"
"218","4.34","106","44","0","481","111","Medium","70","14","No","No","No"
"219","9.7","138","61","12","156","120","Medium","25","14","Yes","Yes","Yes"
"220","10.62","116","79","19","359","116","Good","58","17","Yes","Yes","Yes"
"221","10.59","131","120","15","262","124","Medium","30","10","Yes","Yes","Yes"
"222","6.43","124","44","0","125","107","Medium","80","11","Yes","No","No"
"223","7.49","136","119","6","178","145","Medium","35","13","Yes","Yes","No"
"224","3.45","110","45","9","276","125","Medium","62","14","Yes","Yes","No"
"225","4.1","134","82","0","464","141","Medium","48","13","No","No","No"
"226","6.68","107","25","0","412","82","Bad","36","14","Yes","No","No"
"227","7.8","119","33","0","245","122","Good","56","14","Yes","No","No"
"228","8.69","113","64","10","68","101","Medium","57","16","Yes","Yes","Yes"
"229","5.4","149","73","13","381","163","Bad","26","11","No","Yes","No"
"230","11.19","98","104","0","404","72","Medium","27","18","No","No","Yes"
"231","5.16","115","60","0","119","114","Bad","38","14","No","No","No"
"232","8.09","132","69","0","123","122","Medium","27","11","No","No","Yes"
"233","13.14","137","80","10","24","105","Good","61","15","Yes","Yes","Yes"
"234","8.65","123","76","18","218","120","Medium","29","14","No","Yes","Yes"
"235","9.43","115","62","11","289","129","Good","56","16","No","Yes","Yes"
"236","5.53","126","32","8","95","132","Medium","50","17","Yes","Yes","No"
"237","9.32","141","34","16","361","108","Medium","69","10","Yes","Yes","Yes"
"238","9.62","151","28","8","499","135","Medium","48","10","Yes","Yes","Yes"
"239","7.36","121","24","0","200","133","Good","73","13","Yes","No","No"
"240","3.89","123","105","0","149","118","Bad","62","16","Yes","Yes","No"
"241","10.31","159","80","0","362","121","Medium","26","18","Yes","No","Yes"
"242","12.01","136","63","0","160","94","Medium","38","12","Yes","No","Yes"
"243","4.68","124","46","0","199","135","Medium","52","14","No","No","No"
"244","7.82","124","25","13","87","110","Medium","57","10","Yes","Yes","No"
"245","8.78","130","30","0","391","100","Medium","26","18","Yes","No","Yes"
"246","10","114","43","0","199","88","Good","57","10","No","Yes","Yes"
"247","6.9","120","56","20","266","90","Bad","78","18","Yes","Yes","No"
"248","5.04","123","114","0","298","151","Bad","34","16","Yes","No","No"
"249","5.36","111","52","0","12","101","Medium","61","11","Yes","Yes","No"
"250","5.05","125","67","0","86","117","Bad","65","11","Yes","No","No"
"251","9.16","137","105","10","435","156","Good","72","14","Yes","Yes","Yes"
"252","3.72","139","111","5","310","132","Bad","62","13","Yes","Yes","No"
"253","8.31","133","97","0","70","117","Medium","32","16","Yes","No","Yes"
"254","5.64","124","24","5","288","122","Medium","57","12","No","Yes","No"
"255","9.58","108","104","23","353","129","Good","37","17","Yes","Yes","Yes"
"256","7.71","123","81","8","198","81","Bad","80","15","Yes","Yes","No"
"257","4.2","147","40","0","277","144","Medium","73","10","Yes","No","No"
"258","8.67","125","62","14","477","112","Medium","80","13","Yes","Yes","Yes"
"259","3.47","108","38","0","251","81","Bad","72","14","No","No","No"
"260","5.12","123","36","10","467","100","Bad","74","11","No","Yes","No"
"261","7.67","129","117","8","400","101","Bad","36","10","Yes","Yes","No"
"262","5.71","121","42","4","188","118","Medium","54","15","Yes","Yes","No"
"263","6.37","120","77","15","86","132","Medium","48","18","Yes","Yes","No"
"264","7.77","116","26","6","434","115","Medium","25","17","Yes","Yes","No"
"265","6.95","128","29","5","324","159","Good","31","15","Yes","Yes","No"
"266","5.31","130","35","10","402","129","Bad","39","17","Yes","Yes","No"
"267","9.1","128","93","12","343","112","Good","73","17","No","Yes","Yes"
"268","5.83","134","82","7","473","112","Bad","51","12","No","Yes","No"
"269","6.53","123","57","0","66","105","Medium","39","11","Yes","No","No"
"270","5.01","159","69","0","438","166","Medium","46","17","Yes","No","No"
"271","11.99","119","26","0","284","89","Good","26","10","Yes","No","Yes"
"272","4.55","111","56","0","504","110","Medium","62","16","Yes","No","No"
"273","12.98","113","33","0","14","63","Good","38","12","Yes","No","Yes"
"274","10.04","116","106","8","244","86","Medium","58","12","Yes","Yes","Yes"
"275","7.22","135","93","2","67","119","Medium","34","11","Yes","Yes","No"
"276","6.67","107","119","11","210","132","Medium","53","11","Yes","Yes","No"
"277","6.93","135","69","14","296","130","Medium","73","15","Yes","Yes","No"
"278","7.8","136","48","12","326","125","Medium","36","16","Yes","Yes","No"
"279","7.22","114","113","2","129","151","Good","40","15","No","Yes","No"
"280","3.42","141","57","13","376","158","Medium","64","18","Yes","Yes","No"
"281","2.86","121","86","10","496","145","Bad","51","10","Yes","Yes","No"
"282","11.19","122","69","7","303","105","Good","45","16","No","Yes","Yes"
"283","7.74","150","96","0","80","154","Good","61","11","Yes","No","No"
"284","5.36","135","110","0","112","117","Medium","80","16","No","No","No"
"285","6.97","106","46","11","414","96","Bad","79","17","No","No","No"
"286","7.6","146","26","11","261","131","Medium","39","10","Yes","Yes","No"
"287","7.53","117","118","11","429","113","Medium","67","18","No","Yes","No"
"288","6.88","95","44","4","208","72","Bad","44","17","Yes","Yes","No"
"289","6.98","116","40","0","74","97","Medium","76","15","No","No","No"
"290","8.75","143","77","25","448","156","Medium","43","17","Yes","Yes","Yes"
"291","9.49","107","111","14","400","103","Medium","41","11","No","Yes","Yes"
"292","6.64","118","70","0","106","89","Bad","39","17","Yes","No","No"
"293","11.82","113","66","16","322","74","Good","76","15","Yes","Yes","Yes"
"294","11.28","123","84","0","74","89","Good","59","10","Yes","No","Yes"
"295","12.66","148","76","3","126","99","Good","60","11","Yes","Yes","Yes"
"296","4.21","118","35","14","502","137","Medium","79","10","No","Yes","No"
"297","8.21","127","44","13","160","123","Good","63","18","Yes","Yes","Yes"
"298","3.07","118","83","13","276","104","Bad","75","10","Yes","Yes","No"
"299","10.98","148","63","0","312","130","Good","63","15","Yes","No","Yes"
"300","9.4","135","40","17","497","96","Medium","54","17","No","Yes","Yes"
"301","8.57","116","78","1","158","99","Medium","45","11","Yes","Yes","Yes"
"302","7.41","99","93","0","198","87","Medium","57","16","Yes","Yes","No"
"303","5.28","108","77","13","388","110","Bad","74","14","Yes","Yes","No"
"304","10.01","133","52","16","290","99","Medium","43","11","Yes","Yes","Yes"
"305","11.93","123","98","12","408","134","Good","29","10","Yes","Yes","Yes"
"306","8.03","115","29","26","394","132","Medium","33","13","Yes","Yes","Yes"
"307","4.78","131","32","1","85","133","Medium","48","12","Yes","Yes","No"
"308","5.9","138","92","0","13","120","Bad","61","12","Yes","No","No"
"309","9.24","126","80","19","436","126","Medium","52","10","Yes","Yes","Yes"
"310","11.18","131","111","13","33","80","Bad","68","18","Yes","Yes","Yes"
"311","9.53","175","65","29","419","166","Medium","53","12","Yes","Yes","Yes"
"312","6.15","146","68","12","328","132","Bad","51","14","Yes","Yes","No"
"313","6.8","137","117","5","337","135","Bad","38","10","Yes","Yes","No"
"314","9.33","103","81","3","491","54","Medium","66","13","Yes","No","Yes"
"315","7.72","133","33","10","333","129","Good","71","14","Yes","Yes","No"
"316","6.39","131","21","8","220","171","Good","29","14","Yes","Yes","No"
"317","15.63","122","36","5","369","72","Good","35","10","Yes","Yes","Yes"
"318","6.41","142","30","0","472","136","Good","80","15","No","No","No"
"319","10.08","116","72","10","456","130","Good","41","14","No","Yes","Yes"
"320","6.97","127","45","19","459","129","Medium","57","11","No","Yes","No"
"321","5.86","136","70","12","171","152","Medium","44","18","Yes","Yes","No"
"322","7.52","123","39","5","499","98","Medium","34","15","Yes","No","No"
"323","9.16","140","50","10","300","139","Good","60","15","Yes","Yes","Yes"
"324","10.36","107","105","18","428","103","Medium","34","12","Yes","Yes","Yes"
"325","2.66","136","65","4","133","150","Bad","53","13","Yes","Yes","No"
"326","11.7","144","69","11","131","104","Medium","47","11","Yes","Yes","Yes"
"327","4.69","133","30","0","152","122","Medium","53","17","Yes","No","No"
"328","6.23","112","38","17","316","104","Medium","80","16","Yes","Yes","No"
"329","3.15","117","66","1","65","111","Bad","55","11","Yes","Yes","No"
"330","11.27","100","54","9","433","89","Good","45","12","Yes","Yes","Yes"
"331","4.99","122","59","0","501","112","Bad","32","14","No","No","No"
"332","10.1","135","63","15","213","134","Medium","32","10","Yes","Yes","Yes"
"333","5.74","106","33","20","354","104","Medium","61","12","Yes","Yes","No"
"334","5.87","136","60","7","303","147","Medium","41","10","Yes","Yes","No"
"335","7.63","93","117","9","489","83","Bad","42","13","Yes","Yes","No"
"336","6.18","120","70","15","464","110","Medium","72","15","Yes","Yes","No"
"337","5.17","138","35","6","60","143","Bad","28","18","Yes","No","No"
"338","8.61","130","38","0","283","102","Medium","80","15","Yes","No","Yes"
"339","5.97","112","24","0","164","101","Medium","45","11","Yes","No","No"
"340","11.54","134","44","4","219","126","Good","44","15","Yes","Yes","Yes"
"341","7.5","140","29","0","105","91","Bad","43","16","Yes","No","No"
"342","7.38","98","120","0","268","93","Medium","72","10","No","No","No"
"343","7.81","137","102","13","422","118","Medium","71","10","No","Yes","No"
"344","5.99","117","42","10","371","121","Bad","26","14","Yes","Yes","No"
"345","8.43","138","80","0","108","126","Good","70","13","No","Yes","Yes"
"346","4.81","121","68","0","279","149","Good","79","12","Yes","No","No"
"347","8.97","132","107","0","144","125","Medium","33","13","No","No","Yes"
"348","6.88","96","39","0","161","112","Good","27","14","No","No","No"
"349","12.57","132","102","20","459","107","Good","49","11","Yes","Yes","Yes"
"350","9.32","134","27","18","467","96","Medium","49","14","No","Yes","Yes"
"351","8.64","111","101","17","266","91","Medium","63","17","No","Yes","Yes"
"352","10.44","124","115","16","458","105","Medium","62","16","No","Yes","Yes"
"353","13.44","133","103","14","288","122","Good","61","17","Yes","Yes","Yes"
"354","9.45","107","67","12","430","92","Medium","35","12","No","Yes","Yes"
"355","5.3","133","31","1","80","145","Medium","42","18","Yes","Yes","No"
"356","7.02","130","100","0","306","146","Good","42","11","Yes","No","No"
"357","3.58","142","109","0","111","164","Good","72","12","Yes","No","No"
"358","13.36","103","73","3","276","72","Medium","34","15","Yes","Yes","Yes"
"359","4.17","123","96","10","71","118","Bad","69","11","Yes","Yes","No"
"360","3.13","130","62","11","396","130","Bad","66","14","Yes","Yes","No"
"361","8.77","118","86","7","265","114","Good","52","15","No","Yes","Yes"
"362","8.68","131","25","10","183","104","Medium","56","15","No","Yes","Yes"
"363","5.25","131","55","0","26","110","Bad","79","12","Yes","Yes","No"
"364","10.26","111","75","1","377","108","Good","25","12","Yes","No","Yes"
"365","10.5","122","21","16","488","131","Good","30","14","Yes","Yes","Yes"
"366","6.53","154","30","0","122","162","Medium","57","17","No","No","No"
"367","5.98","124","56","11","447","134","Medium","53","12","No","Yes","No"
"368","14.37","95","106","0","256","53","Good","52","17","Yes","No","Yes"
"369","10.71","109","22","10","348","79","Good","74","14","No","Yes","Yes"
"370","10.26","135","100","22","463","122","Medium","36","14","Yes","Yes","Yes"
"371","7.68","126","41","22","403","119","Bad","42","12","Yes","Yes","No"
"372","9.08","152","81","0","191","126","Medium","54","16","Yes","No","Yes"
"373","7.8","121","50","0","508","98","Medium","65","11","No","No","No"
"374","5.58","137","71","0","402","116","Medium","78","17","Yes","No","No"
"375","9.44","131","47","7","90","118","Medium","47","12","Yes","Yes","Yes"
"376","7.9","132","46","4","206","124","Medium","73","11","Yes","No","No"
"377","16.27","141","60","19","319","92","Good","44","11","Yes","Yes","Yes"
"378","6.81","132","61","0","263","125","Medium","41","12","No","No","No"
"379","6.11","133","88","3","105","119","Medium","79","12","Yes","Yes","No"
"380","5.81","125","111","0","404","107","Bad","54","15","Yes","No","No"
"381","9.64","106","64","10","17","89","Medium","68","17","Yes","Yes","Yes"
"382","3.9","124","65","21","496","151","Bad","77","13","Yes","Yes","No"
"383","4.95","121","28","19","315","121","Medium","66","14","Yes","Yes","No"
"384","9.35","98","117","0","76","68","Medium","63","10","Yes","No","Yes"
"385","12.85","123","37","15","348","112","Good","28","12","Yes","Yes","Yes"
"386","5.87","131","73","13","455","132","Medium","62","17","Yes","Yes","No"
"387","5.32","152","116","0","170","160","Medium","39","16","Yes","No","No"
"388","8.67","142","73","14","238","115","Medium","73","14","No","Yes","Yes"
"389","8.14","135","89","11","245","78","Bad","79","16","Yes","Yes","Yes"
"390","8.44","128","42","8","328","107","Medium","35","12","Yes","Yes","Yes"
"391","5.47","108","75","9","61","111","Medium","67","12","Yes","Yes","No"
"392","6.1","153","63","0","49","124","Bad","56","16","Yes","No","No"
"393","4.53","129","42","13","315","130","Bad","34","13","Yes","Yes","No"
"394","5.57","109","51","10","26","120","Medium","30","17","No","Yes","No"
"395","5.35","130","58","19","366","139","Bad","33","16","Yes","Yes","No"
"396","12.57","138","108","17","203","128","Good","33","14","Yes","Yes","Yes"
"397","6.14","139","23","3","37","120","Medium","55","11","No","Yes","No"
"398","7.41","162","26","12","368","159","Medium","40","18","Yes","Yes","No"
"399","5.94","100","79","7","284","95","Bad","50","12","Yes","Yes","No"
"400","9.71","134","37","0","27","120","Good","49","16","Yes","Yes","Yes"


================================================
File: tests/data_examples/data5/in/tables/sample_output.csv.manifest
================================================
{
  "primary_key": [
    "x"
  ],
  "incremental": true,
  "delimiter": "\t",
  "enclosure": "'",
  "columns": [
    "x",
    "Sales",
    "CompPrice",
    "Income",
    "Advertising",
    "Population",
    "Price",
    "ShelveLoc",
    "Age",
    "Education",
    "Urban",
    "US",
    "High"
  ],
  "attributes": [],
  "delete_where_column": "Advertising",
  "delete_where_values": ["Video", "Search"],
  "delete_where_operator": "eq",
  "name": "Leads",
  "destination": "out.c-main.Leads"
}

================================================
File: tests/data_examples/data_custom_action/config.json
================================================
{
    "storage": {
        "input": {
            "files": [
                {
                    "tags": [
                        "dilbert"
                    ],
                    "processed_tags": []
                },
                {
                    "tags": [
                        "xkcd"
                    ],
                    "processed_tags": []
                }
            ],
            "tables": [
                {
                    "source": "in.c-main.test",
                    "destination": "sample.csv",
                    "columns": [],
                    "where_values": [],
                    "where_operator": "eq"
                },
                {
                    "source": "in.c-main.test2",
                    "destination": "fooBar",
                    "columns": [],
                    "where_values": [],
                    "where_operator": "eq"
                }
            ]
        },
        "output": {
            "tables": [
                {
                    "source": "results.csv",
                    "destination": "out.c-main.test",
                    "incremental": false,
                    "primary_key": [],
                    "delete_where_values": [],
                    "delete_where_operator": "eq"
                },
                {
                    "source": "results-new.csv",
                    "destination": "out.c-main.test2",
                    "incremental": false,
                    "primary_key": [],
                    "delete_where_values": [],
                    "delete_where_operator": "eq"
                }
            ],
            "files": [
                {
                    "source": "processed.png",
                    "tags": [
                        "processed-file"
                    ],
                    "is_public": false,
                    "is_permanent": false,
                    "is_encrypted": true,
                    "notify": false
                }
            ]
        }
    },
    "parameters": {
        "fooBar": {
            "foo": 42,
            "bar": 24
        },
        "baz": "bazBar"
    },
    "action": "custom_action",
    "authorization": {
        "oauth_api": {
            "id": "123456",
            "credentials": {
                "id": "main",
                "authorizedFor": "Myself",
                "creator": {
                    "id": "1234",
                    "description": "me@keboola.com"
                },
                "created": "2016-01-31 00:13:30",
                "oauthVersion": "2.0",
                "appKey": "myappkey",
                "#data": "{\"mykey\":\"myval\"}",
                "#appSecret": "myappsecret"
            }
        }
    }
}


================================================
File: tests/data_examples/data_custom_action/in/state.json
================================================
{
  "test_state": 1234
}

================================================
File: tests/data_examples/data_custom_action/in/files/151971405_21702.strip.print.gif.manifest
================================================
{
    "id": 151971405,
    "name": "21702.strip.print.gif",
    "created": "2015-11-01T20:14:19+0100",
    "is_public": false,
    "is_encrypted": true,
    "tags": [
        "dilbert"
    ],
    "max_age_days": 180,
    "size_bytes": 4931
}

================================================
File: tests/data_examples/data_custom_action/in/files/151971412_30221.strip.print.gif.manifest
================================================
{
    "id": 151971412,
    "name": "30221.strip.print.gif",
    "created": "2015-11-01T20:14:27+0100",
    "is_public": false,
    "is_encrypted": true,
    "tags": [
        "dilbert"
    ],
    "max_age_days": 180,
    "size_bytes": 21230
}

================================================
File: tests/data_examples/data_custom_action/in/files/151971423_5655.strip.print.gif.manifest
================================================
{
    "id": 151971423,
    "name": "5655.strip.print.gif",
    "created": "2015-11-01T20:14:35+0100",
    "is_public": false,
    "is_encrypted": true,
    "tags": [
        "dilbert"
    ],
    "max_age_days": 180,
    "size_bytes": 20276
}

================================================
File: tests/data_examples/data_custom_action/in/files/151971432_compiler_complaint.png.manifest
================================================
{
    "id": 151971432,
    "name": "compiler_complaint.png",
    "created": "2015-11-01T20:14:48+0100",
    "is_public": false,
    "is_encrypted": true,
    "tags": [
        "xkcd"
    ],
    "max_age_days": 180,
    "size_bytes": 14833
}

================================================
File: tests/data_examples/data_custom_action/in/files/151971450_duty_calls.png.manifest
================================================
{
    "id": 151971450,
    "name": "duty_calls.png",
    "created": "2015-11-01T20:14:57+0100",
    "is_public": false,
    "is_encrypted": true,
    "tags": [
        "xkcd"
    ],
    "max_age_days": 180,
    "size_bytes": 30027
}

================================================
File: tests/data_examples/data_custom_action/in/files/151971455_duty_calls.png.manifest
================================================
{
    "id": 151971455,
    "name": "duty_calls.png",
    "created": "2015-11-01T20:14:58+0100",
    "is_public": false,
    "is_encrypted": true,
    "tags": [
        "xkcd"
    ],
    "max_age_days": 200,
    "size_bytes": 30027
}

================================================
File: tests/data_examples/data_custom_action/in/tables/fooBar
================================================
"id","timestamp"


================================================
File: tests/data_examples/data_custom_action/in/tables/fooBar.manifest
================================================
{
    "id": "in.c-main.test2",
    "uri": "https:\/\/connection.keboola.com\/\/v2\/storage\/tables\/in.c-main.test2",
    "name": "test2",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2015-09-22T17:04:52+0200",
    "last_change_date": "2015-09-22T17:04:53+0200",
    "last_import_date": "2015-09-22T17:04:53+0200",
    "rows_count": 0,
    "data_size_bytes": 32768,
    "is_alias": false,
    "columns": [
        "id",
        "timestamp"
    ],
    "attributes": []
}

================================================
File: tests/data_examples/data_custom_action/in/tables/orphaned.csv
================================================
"id","timestamp"


================================================
File: tests/data_examples/data_custom_action/in/tables/orphaned_manifest.csv.manifest
================================================
{
    "id": "in.c-main.test",
    "uri": "https:\/\/connection.keboola.com\/\/v2\/storage\/tables\/in.c-main.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2015-11-02T09:11:37+0100",
    "last_change_date": "2015-11-02T09:11:37+0100",
    "last_import_date": "2015-11-02T09:11:37+0100",
    "rows_count": 400,
    "data_size_bytes": 81920,
    "is_alias": false,
    "columns": [
        "x",
        "Sales",
        "CompPrice",
        "Income",
        "Advertising",
        "Population",
        "Price",
        "ShelveLoc",
        "Age",
        "Education",
        "Urban",
        "US",
        "High"
    ],
    "attributes": []
}

================================================
File: tests/data_examples/data_custom_action/in/tables/sample.csv
================================================
"x","Sales","CompPrice","Income","Advertising","Population","Price","ShelveLoc","Age","Education","Urban","US","High"
"1","9.5","138","73","11","276","120","Bad","42","17","Yes","Yes","Yes"
"2","11.22","111","48","16","260","83","Good","65","10","Yes","Yes","Yes"
"3","10.06","113","35","10","269","80","Medium","59","12","Yes","Yes","Yes"
"4","7.4","117","100","4","466","97","Medium","55","14","Yes","Yes","No"
"5","4.15","141","64","3","340","128","Bad","38","13","Yes","No","No"
"6","10.81","124","113","13","501","72","Bad","78","16","No","Yes","Yes"
"7","6.63","115","105","0","45","108","Medium","71","15","Yes","No","No"
"8","11.85","136","81","15","425","120","Good","67","10","Yes","Yes","Yes"
"9","6.54","132","110","0","108","124","Medium","76","10","No","No","No"
"10","4.69","132","113","0","131","124","Medium","76","17","No","Yes","No"
"11","9.01","121","78","9","150","100","Bad","26","10","No","Yes","Yes"
"12","11.96","117","94","4","503","94","Good","50","13","Yes","Yes","Yes"
"13","3.98","122","35","2","393","136","Medium","62","18","Yes","No","No"
"14","10.96","115","28","11","29","86","Good","53","18","Yes","Yes","Yes"
"15","11.17","107","117","11","148","118","Good","52","18","Yes","Yes","Yes"
"16","8.71","149","95","5","400","144","Medium","76","18","No","No","Yes"
"17","7.58","118","32","0","284","110","Good","63","13","Yes","No","No"
"18","12.29","147","74","13","251","131","Good","52","10","Yes","Yes","Yes"
"19","13.91","110","110","0","408","68","Good","46","17","No","Yes","Yes"
"20","8.73","129","76","16","58","121","Medium","69","12","Yes","Yes","Yes"
"21","6.41","125","90","2","367","131","Medium","35","18","Yes","Yes","No"
"22","12.13","134","29","12","239","109","Good","62","18","No","Yes","Yes"
"23","5.08","128","46","6","497","138","Medium","42","13","Yes","No","No"
"24","5.87","121","31","0","292","109","Medium","79","10","Yes","No","No"
"25","10.14","145","119","16","294","113","Bad","42","12","Yes","Yes","Yes"
"26","14.9","139","32","0","176","82","Good","54","11","No","No","Yes"
"27","8.33","107","115","11","496","131","Good","50","11","No","Yes","Yes"
"28","5.27","98","118","0","19","107","Medium","64","17","Yes","No","No"
"29","2.99","103","74","0","359","97","Bad","55","11","Yes","Yes","No"
"30","7.81","104","99","15","226","102","Bad","58","17","Yes","Yes","No"
"31","13.55","125","94","0","447","89","Good","30","12","Yes","No","Yes"
"32","8.25","136","58","16","241","131","Medium","44","18","Yes","Yes","Yes"
"33","6.2","107","32","12","236","137","Good","64","10","No","Yes","No"
"34","8.77","114","38","13","317","128","Good","50","16","Yes","Yes","Yes"
"35","2.67","115","54","0","406","128","Medium","42","17","Yes","Yes","No"
"36","11.07","131","84","11","29","96","Medium","44","17","No","Yes","Yes"
"37","8.89","122","76","0","270","100","Good","60","18","No","No","Yes"
"38","4.95","121","41","5","412","110","Medium","54","10","Yes","Yes","No"
"39","6.59","109","73","0","454","102","Medium","65","15","Yes","No","No"
"40","3.24","130","60","0","144","138","Bad","38","10","No","No","No"
"41","2.07","119","98","0","18","126","Bad","73","17","No","No","No"
"42","7.96","157","53","0","403","124","Bad","58","16","Yes","No","No"
"43","10.43","77","69","0","25","24","Medium","50","18","Yes","No","Yes"
"44","4.12","123","42","11","16","134","Medium","59","13","Yes","Yes","No"
"45","4.16","85","79","6","325","95","Medium","69","13","Yes","Yes","No"
"46","4.56","141","63","0","168","135","Bad","44","12","Yes","Yes","No"
"47","12.44","127","90","14","16","70","Medium","48","15","No","Yes","Yes"
"48","4.38","126","98","0","173","108","Bad","55","16","Yes","No","No"
"49","3.91","116","52","0","349","98","Bad","69","18","Yes","No","No"
"50","10.61","157","93","0","51","149","Good","32","17","Yes","No","Yes"
"51","1.42","99","32","18","341","108","Bad","80","16","Yes","Yes","No"
"52","4.42","121","90","0","150","108","Bad","75","16","Yes","No","No"
"53","7.91","153","40","3","112","129","Bad","39","18","Yes","Yes","No"
"54","6.92","109","64","13","39","119","Medium","61","17","Yes","Yes","No"
"55","4.9","134","103","13","25","144","Medium","76","17","No","Yes","No"
"56","6.85","143","81","5","60","154","Medium","61","18","Yes","Yes","No"
"57","11.91","133","82","0","54","84","Medium","50","17","Yes","No","Yes"
"58","0.91","93","91","0","22","117","Bad","75","11","Yes","No","No"
"59","5.42","103","93","15","188","103","Bad","74","16","Yes","Yes","No"
"60","5.21","118","71","4","148","114","Medium","80","13","Yes","No","No"
"61","8.32","122","102","19","469","123","Bad","29","13","Yes","Yes","Yes"
"62","7.32","105","32","0","358","107","Medium","26","13","No","No","No"
"63","1.82","139","45","0","146","133","Bad","77","17","Yes","Yes","No"
"64","8.47","119","88","10","170","101","Medium","61","13","Yes","Yes","Yes"
"65","7.8","100","67","12","184","104","Medium","32","16","No","Yes","No"
"66","4.9","122","26","0","197","128","Medium","55","13","No","No","No"
"67","8.85","127","92","0","508","91","Medium","56","18","Yes","No","Yes"
"68","9.01","126","61","14","152","115","Medium","47","16","Yes","Yes","Yes"
"69","13.39","149","69","20","366","134","Good","60","13","Yes","Yes","Yes"
"70","7.99","127","59","0","339","99","Medium","65","12","Yes","No","No"
"71","9.46","89","81","15","237","99","Good","74","12","Yes","Yes","Yes"
"72","6.5","148","51","16","148","150","Medium","58","17","No","Yes","No"
"73","5.52","115","45","0","432","116","Medium","25","15","Yes","No","No"
"74","12.61","118","90","10","54","104","Good","31","11","No","Yes","Yes"
"75","6.2","150","68","5","125","136","Medium","64","13","No","Yes","No"
"76","8.55","88","111","23","480","92","Bad","36","16","No","Yes","Yes"
"77","10.64","102","87","10","346","70","Medium","64","15","Yes","Yes","Yes"
"78","7.7","118","71","12","44","89","Medium","67","18","No","Yes","No"
"79","4.43","134","48","1","139","145","Medium","65","12","Yes","Yes","No"
"80","9.14","134","67","0","286","90","Bad","41","13","Yes","No","Yes"
"81","8.01","113","100","16","353","79","Bad","68","11","Yes","Yes","Yes"
"82","7.52","116","72","0","237","128","Good","70","13","Yes","No","No"
"83","11.62","151","83","4","325","139","Good","28","17","Yes","Yes","Yes"
"84","4.42","109","36","7","468","94","Bad","56","11","Yes","Yes","No"
"85","2.23","111","25","0","52","121","Bad","43","18","No","No","No"
"86","8.47","125","103","0","304","112","Medium","49","13","No","No","Yes"
"87","8.7","150","84","9","432","134","Medium","64","15","Yes","No","Yes"
"88","11.7","131","67","7","272","126","Good","54","16","No","Yes","Yes"
"89","6.56","117","42","7","144","111","Medium","62","10","Yes","Yes","No"
"90","7.95","128","66","3","493","119","Medium","45","16","No","No","No"
"91","5.33","115","22","0","491","103","Medium","64","11","No","No","No"
"92","4.81","97","46","11","267","107","Medium","80","15","Yes","Yes","No"
"93","4.53","114","113","0","97","125","Medium","29","12","Yes","No","No"
"94","8.86","145","30","0","67","104","Medium","55","17","Yes","No","Yes"
"95","8.39","115","97","5","134","84","Bad","55","11","Yes","Yes","Yes"
"96","5.58","134","25","10","237","148","Medium","59","13","Yes","Yes","No"
"97","9.48","147","42","10","407","132","Good","73","16","No","Yes","Yes"
"98","7.45","161","82","5","287","129","Bad","33","16","Yes","Yes","No"
"99","12.49","122","77","24","382","127","Good","36","16","No","Yes","Yes"
"100","4.88","121","47","3","220","107","Bad","56","16","No","Yes","No"
"101","4.11","113","69","11","94","106","Medium","76","12","No","Yes","No"
"102","6.2","128","93","0","89","118","Medium","34","18","Yes","No","No"
"103","5.3","113","22","0","57","97","Medium","65","16","No","No","No"
"104","5.07","123","91","0","334","96","Bad","78","17","Yes","Yes","No"
"105","4.62","121","96","0","472","138","Medium","51","12","Yes","No","No"
"106","5.55","104","100","8","398","97","Medium","61","11","Yes","Yes","No"
"107","0.16","102","33","0","217","139","Medium","70","18","No","No","No"
"108","8.55","134","107","0","104","108","Medium","60","12","Yes","No","Yes"
"109","3.47","107","79","2","488","103","Bad","65","16","Yes","No","No"
"110","8.98","115","65","0","217","90","Medium","60","17","No","No","Yes"
"111","9","128","62","7","125","116","Medium","43","14","Yes","Yes","Yes"
"112","6.62","132","118","12","272","151","Medium","43","14","Yes","Yes","No"
"113","6.67","116","99","5","298","125","Good","62","12","Yes","Yes","No"
"114","6.01","131","29","11","335","127","Bad","33","12","Yes","Yes","No"
"115","9.31","122","87","9","17","106","Medium","65","13","Yes","Yes","Yes"
"116","8.54","139","35","0","95","129","Medium","42","13","Yes","No","Yes"
"117","5.08","135","75","0","202","128","Medium","80","10","No","No","No"
"118","8.8","145","53","0","507","119","Medium","41","12","Yes","No","Yes"
"119","7.57","112","88","2","243","99","Medium","62","11","Yes","Yes","No"
"120","7.37","130","94","8","137","128","Medium","64","12","Yes","Yes","No"
"121","6.87","128","105","11","249","131","Medium","63","13","Yes","Yes","No"
"122","11.67","125","89","10","380","87","Bad","28","10","Yes","Yes","Yes"
"123","6.88","119","100","5","45","108","Medium","75","10","Yes","Yes","No"
"124","8.19","127","103","0","125","155","Good","29","15","No","Yes","Yes"
"125","8.87","131","113","0","181","120","Good","63","14","Yes","No","Yes"
"126","9.34","89","78","0","181","49","Medium","43","15","No","No","Yes"
"127","11.27","153","68","2","60","133","Good","59","16","Yes","Yes","Yes"
"128","6.52","125","48","3","192","116","Medium","51","14","Yes","Yes","No"
"129","4.96","133","100","3","350","126","Bad","55","13","Yes","Yes","No"
"130","4.47","143","120","7","279","147","Bad","40","10","No","Yes","No"
"131","8.41","94","84","13","497","77","Medium","51","12","Yes","Yes","Yes"
"132","6.5","108","69","3","208","94","Medium","77","16","Yes","No","No"
"133","9.54","125","87","9","232","136","Good","72","10","Yes","Yes","Yes"
"134","7.62","132","98","2","265","97","Bad","62","12","Yes","Yes","No"
"135","3.67","132","31","0","327","131","Medium","76","16","Yes","No","No"
"136","6.44","96","94","14","384","120","Medium","36","18","No","Yes","No"
"137","5.17","131","75","0","10","120","Bad","31","18","No","No","No"
"138","6.52","128","42","0","436","118","Medium","80","11","Yes","No","No"
"139","10.27","125","103","12","371","109","Medium","44","10","Yes","Yes","Yes"
"140","12.3","146","62","10","310","94","Medium","30","13","No","Yes","Yes"
"141","6.03","133","60","10","277","129","Medium","45","18","Yes","Yes","No"
"142","6.53","140","42","0","331","131","Bad","28","15","Yes","No","No"
"143","7.44","124","84","0","300","104","Medium","77","15","Yes","No","No"
"144","0.53","122","88","7","36","159","Bad","28","17","Yes","Yes","No"
"145","9.09","132","68","0","264","123","Good","34","11","No","No","Yes"
"146","8.77","144","63","11","27","117","Medium","47","17","Yes","Yes","Yes"
"147","3.9","114","83","0","412","131","Bad","39","14","Yes","No","No"
"148","10.51","140","54","9","402","119","Good","41","16","No","Yes","Yes"
"149","7.56","110","119","0","384","97","Medium","72","14","No","Yes","No"
"150","11.48","121","120","13","140","87","Medium","56","11","Yes","Yes","Yes"
"151","10.49","122","84","8","176","114","Good","57","10","No","Yes","Yes"
"152","10.77","111","58","17","407","103","Good","75","17","No","Yes","Yes"
"153","7.64","128","78","0","341","128","Good","45","13","No","No","No"
"154","5.93","150","36","7","488","150","Medium","25","17","No","Yes","No"
"155","6.89","129","69","10","289","110","Medium","50","16","No","Yes","No"
"156","7.71","98","72","0","59","69","Medium","65","16","Yes","No","No"
"157","7.49","146","34","0","220","157","Good","51","16","Yes","No","No"
"158","10.21","121","58","8","249","90","Medium","48","13","No","Yes","Yes"
"159","12.53","142","90","1","189","112","Good","39","10","No","Yes","Yes"
"160","9.32","119","60","0","372","70","Bad","30","18","No","No","Yes"
"161","4.67","111","28","0","486","111","Medium","29","12","No","No","No"
"162","2.93","143","21","5","81","160","Medium","67","12","No","Yes","No"
"163","3.63","122","74","0","424","149","Medium","51","13","Yes","No","No"
"164","5.68","130","64","0","40","106","Bad","39","17","No","No","No"
"165","8.22","148","64","0","58","141","Medium","27","13","No","Yes","Yes"
"166","0.37","147","58","7","100","191","Bad","27","15","Yes","Yes","No"
"167","6.71","119","67","17","151","137","Medium","55","11","Yes","Yes","No"
"168","6.71","106","73","0","216","93","Medium","60","13","Yes","No","No"
"169","7.3","129","89","0","425","117","Medium","45","10","Yes","No","No"
"170","11.48","104","41","15","492","77","Good","73","18","Yes","Yes","Yes"
"171","8.01","128","39","12","356","118","Medium","71","10","Yes","Yes","Yes"
"172","12.49","93","106","12","416","55","Medium","75","15","Yes","Yes","Yes"
"173","9.03","104","102","13","123","110","Good","35","16","Yes","Yes","Yes"
"174","6.38","135","91","5","207","128","Medium","66","18","Yes","Yes","No"
"175","0","139","24","0","358","185","Medium","79","15","No","No","No"
"176","7.54","115","89","0","38","122","Medium","25","12","Yes","No","No"
"177","5.61","138","107","9","480","154","Medium","47","11","No","Yes","No"
"178","10.48","138","72","0","148","94","Medium","27","17","Yes","Yes","Yes"
"179","10.66","104","71","14","89","81","Medium","25","14","No","Yes","Yes"
"180","7.78","144","25","3","70","116","Medium","77","18","Yes","Yes","No"
"181","4.94","137","112","15","434","149","Bad","66","13","Yes","Yes","No"
"182","7.43","121","83","0","79","91","Medium","68","11","Yes","No","No"
"183","4.74","137","60","4","230","140","Bad","25","13","Yes","No","No"
"184","5.32","118","74","6","426","102","Medium","80","18","Yes","Yes","No"
"185","9.95","132","33","7","35","97","Medium","60","11","No","Yes","Yes"
"186","10.07","130","100","11","449","107","Medium","64","10","Yes","Yes","Yes"
"187","8.68","120","51","0","93","86","Medium","46","17","No","No","Yes"
"188","6.03","117","32","0","142","96","Bad","62","17","Yes","No","No"
"189","8.07","116","37","0","426","90","Medium","76","15","Yes","No","Yes"
"190","12.11","118","117","18","509","104","Medium","26","15","No","Yes","Yes"
"191","8.79","130","37","13","297","101","Medium","37","13","No","Yes","Yes"
"192","6.67","156","42","13","170","173","Good","74","14","Yes","Yes","No"
"193","7.56","108","26","0","408","93","Medium","56","14","No","No","No"
"194","13.28","139","70","7","71","96","Good","61","10","Yes","Yes","Yes"
"195","7.23","112","98","18","481","128","Medium","45","11","Yes","Yes","No"
"196","4.19","117","93","4","420","112","Bad","66","11","Yes","Yes","No"
"197","4.1","130","28","6","410","133","Bad","72","16","Yes","Yes","No"
"198","2.52","124","61","0","333","138","Medium","76","16","Yes","No","No"
"199","3.62","112","80","5","500","128","Medium","69","10","Yes","Yes","No"
"200","6.42","122","88","5","335","126","Medium","64","14","Yes","Yes","No"
"201","5.56","144","92","0","349","146","Medium","62","12","No","No","No"
"202","5.94","138","83","0","139","134","Medium","54","18","Yes","No","No"
"203","4.1","121","78","4","413","130","Bad","46","10","No","Yes","No"
"204","2.05","131","82","0","132","157","Bad","25","14","Yes","No","No"
"205","8.74","155","80","0","237","124","Medium","37","14","Yes","No","Yes"
"206","5.68","113","22","1","317","132","Medium","28","12","Yes","No","No"
"207","4.97","162","67","0","27","160","Medium","77","17","Yes","Yes","No"
"208","8.19","111","105","0","466","97","Bad","61","10","No","No","Yes"
"209","7.78","86","54","0","497","64","Bad","33","12","Yes","No","No"
"210","3.02","98","21","11","326","90","Bad","76","11","No","Yes","No"
"211","4.36","125","41","2","357","123","Bad","47","14","No","Yes","No"
"212","9.39","117","118","14","445","120","Medium","32","15","Yes","Yes","Yes"
"213","12.04","145","69","19","501","105","Medium","45","11","Yes","Yes","Yes"
"214","8.23","149","84","5","220","139","Medium","33","10","Yes","Yes","Yes"
"215","4.83","115","115","3","48","107","Medium","73","18","Yes","Yes","No"
"216","2.34","116","83","15","170","144","Bad","71","11","Yes","Yes","No"
"217","5.73","141","33","0","243","144","Medium","34","17","Yes","No","No"
"218","4.34","106","44","0","481","111","Medium","70","14","No","No","No"
"219","9.7","138","61","12","156","120","Medium","25","14","Yes","Yes","Yes"
"220","10.62","116","79","19","359","116","Good","58","17","Yes","Yes","Yes"
"221","10.59","131","120","15","262","124","Medium","30","10","Yes","Yes","Yes"
"222","6.43","124","44","0","125","107","Medium","80","11","Yes","No","No"
"223","7.49","136","119","6","178","145","Medium","35","13","Yes","Yes","No"
"224","3.45","110","45","9","276","125","Medium","62","14","Yes","Yes","No"
"225","4.1","134","82","0","464","141","Medium","48","13","No","No","No"
"226","6.68","107","25","0","412","82","Bad","36","14","Yes","No","No"
"227","7.8","119","33","0","245","122","Good","56","14","Yes","No","No"
"228","8.69","113","64","10","68","101","Medium","57","16","Yes","Yes","Yes"
"229","5.4","149","73","13","381","163","Bad","26","11","No","Yes","No"
"230","11.19","98","104","0","404","72","Medium","27","18","No","No","Yes"
"231","5.16","115","60","0","119","114","Bad","38","14","No","No","No"
"232","8.09","132","69","0","123","122","Medium","27","11","No","No","Yes"
"233","13.14","137","80","10","24","105","Good","61","15","Yes","Yes","Yes"
"234","8.65","123","76","18","218","120","Medium","29","14","No","Yes","Yes"
"235","9.43","115","62","11","289","129","Good","56","16","No","Yes","Yes"
"236","5.53","126","32","8","95","132","Medium","50","17","Yes","Yes","No"
"237","9.32","141","34","16","361","108","Medium","69","10","Yes","Yes","Yes"
"238","9.62","151","28","8","499","135","Medium","48","10","Yes","Yes","Yes"
"239","7.36","121","24","0","200","133","Good","73","13","Yes","No","No"
"240","3.89","123","105","0","149","118","Bad","62","16","Yes","Yes","No"
"241","10.31","159","80","0","362","121","Medium","26","18","Yes","No","Yes"
"242","12.01","136","63","0","160","94","Medium","38","12","Yes","No","Yes"
"243","4.68","124","46","0","199","135","Medium","52","14","No","No","No"
"244","7.82","124","25","13","87","110","Medium","57","10","Yes","Yes","No"
"245","8.78","130","30","0","391","100","Medium","26","18","Yes","No","Yes"
"246","10","114","43","0","199","88","Good","57","10","No","Yes","Yes"
"247","6.9","120","56","20","266","90","Bad","78","18","Yes","Yes","No"
"248","5.04","123","114","0","298","151","Bad","34","16","Yes","No","No"
"249","5.36","111","52","0","12","101","Medium","61","11","Yes","Yes","No"
"250","5.05","125","67","0","86","117","Bad","65","11","Yes","No","No"
"251","9.16","137","105","10","435","156","Good","72","14","Yes","Yes","Yes"
"252","3.72","139","111","5","310","132","Bad","62","13","Yes","Yes","No"
"253","8.31","133","97","0","70","117","Medium","32","16","Yes","No","Yes"
"254","5.64","124","24","5","288","122","Medium","57","12","No","Yes","No"
"255","9.58","108","104","23","353","129","Good","37","17","Yes","Yes","Yes"
"256","7.71","123","81","8","198","81","Bad","80","15","Yes","Yes","No"
"257","4.2","147","40","0","277","144","Medium","73","10","Yes","No","No"
"258","8.67","125","62","14","477","112","Medium","80","13","Yes","Yes","Yes"
"259","3.47","108","38","0","251","81","Bad","72","14","No","No","No"
"260","5.12","123","36","10","467","100","Bad","74","11","No","Yes","No"
"261","7.67","129","117","8","400","101","Bad","36","10","Yes","Yes","No"
"262","5.71","121","42","4","188","118","Medium","54","15","Yes","Yes","No"
"263","6.37","120","77","15","86","132","Medium","48","18","Yes","Yes","No"
"264","7.77","116","26","6","434","115","Medium","25","17","Yes","Yes","No"
"265","6.95","128","29","5","324","159","Good","31","15","Yes","Yes","No"
"266","5.31","130","35","10","402","129","Bad","39","17","Yes","Yes","No"
"267","9.1","128","93","12","343","112","Good","73","17","No","Yes","Yes"
"268","5.83","134","82","7","473","112","Bad","51","12","No","Yes","No"
"269","6.53","123","57","0","66","105","Medium","39","11","Yes","No","No"
"270","5.01","159","69","0","438","166","Medium","46","17","Yes","No","No"
"271","11.99","119","26","0","284","89","Good","26","10","Yes","No","Yes"
"272","4.55","111","56","0","504","110","Medium","62","16","Yes","No","No"
"273","12.98","113","33","0","14","63","Good","38","12","Yes","No","Yes"
"274","10.04","116","106","8","244","86","Medium","58","12","Yes","Yes","Yes"
"275","7.22","135","93","2","67","119","Medium","34","11","Yes","Yes","No"
"276","6.67","107","119","11","210","132","Medium","53","11","Yes","Yes","No"
"277","6.93","135","69","14","296","130","Medium","73","15","Yes","Yes","No"
"278","7.8","136","48","12","326","125","Medium","36","16","Yes","Yes","No"
"279","7.22","114","113","2","129","151","Good","40","15","No","Yes","No"
"280","3.42","141","57","13","376","158","Medium","64","18","Yes","Yes","No"
"281","2.86","121","86","10","496","145","Bad","51","10","Yes","Yes","No"
"282","11.19","122","69","7","303","105","Good","45","16","No","Yes","Yes"
"283","7.74","150","96","0","80","154","Good","61","11","Yes","No","No"
"284","5.36","135","110","0","112","117","Medium","80","16","No","No","No"
"285","6.97","106","46","11","414","96","Bad","79","17","No","No","No"
"286","7.6","146","26","11","261","131","Medium","39","10","Yes","Yes","No"
"287","7.53","117","118","11","429","113","Medium","67","18","No","Yes","No"
"288","6.88","95","44","4","208","72","Bad","44","17","Yes","Yes","No"
"289","6.98","116","40","0","74","97","Medium","76","15","No","No","No"
"290","8.75","143","77","25","448","156","Medium","43","17","Yes","Yes","Yes"
"291","9.49","107","111","14","400","103","Medium","41","11","No","Yes","Yes"
"292","6.64","118","70","0","106","89","Bad","39","17","Yes","No","No"
"293","11.82","113","66","16","322","74","Good","76","15","Yes","Yes","Yes"
"294","11.28","123","84","0","74","89","Good","59","10","Yes","No","Yes"
"295","12.66","148","76","3","126","99","Good","60","11","Yes","Yes","Yes"
"296","4.21","118","35","14","502","137","Medium","79","10","No","Yes","No"
"297","8.21","127","44","13","160","123","Good","63","18","Yes","Yes","Yes"
"298","3.07","118","83","13","276","104","Bad","75","10","Yes","Yes","No"
"299","10.98","148","63","0","312","130","Good","63","15","Yes","No","Yes"
"300","9.4","135","40","17","497","96","Medium","54","17","No","Yes","Yes"
"301","8.57","116","78","1","158","99","Medium","45","11","Yes","Yes","Yes"
"302","7.41","99","93","0","198","87","Medium","57","16","Yes","Yes","No"
"303","5.28","108","77","13","388","110","Bad","74","14","Yes","Yes","No"
"304","10.01","133","52","16","290","99","Medium","43","11","Yes","Yes","Yes"
"305","11.93","123","98","12","408","134","Good","29","10","Yes","Yes","Yes"
"306","8.03","115","29","26","394","132","Medium","33","13","Yes","Yes","Yes"
"307","4.78","131","32","1","85","133","Medium","48","12","Yes","Yes","No"
"308","5.9","138","92","0","13","120","Bad","61","12","Yes","No","No"
"309","9.24","126","80","19","436","126","Medium","52","10","Yes","Yes","Yes"
"310","11.18","131","111","13","33","80","Bad","68","18","Yes","Yes","Yes"
"311","9.53","175","65","29","419","166","Medium","53","12","Yes","Yes","Yes"
"312","6.15","146","68","12","328","132","Bad","51","14","Yes","Yes","No"
"313","6.8","137","117","5","337","135","Bad","38","10","Yes","Yes","No"
"314","9.33","103","81","3","491","54","Medium","66","13","Yes","No","Yes"
"315","7.72","133","33","10","333","129","Good","71","14","Yes","Yes","No"
"316","6.39","131","21","8","220","171","Good","29","14","Yes","Yes","No"
"317","15.63","122","36","5","369","72","Good","35","10","Yes","Yes","Yes"
"318","6.41","142","30","0","472","136","Good","80","15","No","No","No"
"319","10.08","116","72","10","456","130","Good","41","14","No","Yes","Yes"
"320","6.97","127","45","19","459","129","Medium","57","11","No","Yes","No"
"321","5.86","136","70","12","171","152","Medium","44","18","Yes","Yes","No"
"322","7.52","123","39","5","499","98","Medium","34","15","Yes","No","No"
"323","9.16","140","50","10","300","139","Good","60","15","Yes","Yes","Yes"
"324","10.36","107","105","18","428","103","Medium","34","12","Yes","Yes","Yes"
"325","2.66","136","65","4","133","150","Bad","53","13","Yes","Yes","No"
"326","11.7","144","69","11","131","104","Medium","47","11","Yes","Yes","Yes"
"327","4.69","133","30","0","152","122","Medium","53","17","Yes","No","No"
"328","6.23","112","38","17","316","104","Medium","80","16","Yes","Yes","No"
"329","3.15","117","66","1","65","111","Bad","55","11","Yes","Yes","No"
"330","11.27","100","54","9","433","89","Good","45","12","Yes","Yes","Yes"
"331","4.99","122","59","0","501","112","Bad","32","14","No","No","No"
"332","10.1","135","63","15","213","134","Medium","32","10","Yes","Yes","Yes"
"333","5.74","106","33","20","354","104","Medium","61","12","Yes","Yes","No"
"334","5.87","136","60","7","303","147","Medium","41","10","Yes","Yes","No"
"335","7.63","93","117","9","489","83","Bad","42","13","Yes","Yes","No"
"336","6.18","120","70","15","464","110","Medium","72","15","Yes","Yes","No"
"337","5.17","138","35","6","60","143","Bad","28","18","Yes","No","No"
"338","8.61","130","38","0","283","102","Medium","80","15","Yes","No","Yes"
"339","5.97","112","24","0","164","101","Medium","45","11","Yes","No","No"
"340","11.54","134","44","4","219","126","Good","44","15","Yes","Yes","Yes"
"341","7.5","140","29","0","105","91","Bad","43","16","Yes","No","No"
"342","7.38","98","120","0","268","93","Medium","72","10","No","No","No"
"343","7.81","137","102","13","422","118","Medium","71","10","No","Yes","No"
"344","5.99","117","42","10","371","121","Bad","26","14","Yes","Yes","No"
"345","8.43","138","80","0","108","126","Good","70","13","No","Yes","Yes"
"346","4.81","121","68","0","279","149","Good","79","12","Yes","No","No"
"347","8.97","132","107","0","144","125","Medium","33","13","No","No","Yes"
"348","6.88","96","39","0","161","112","Good","27","14","No","No","No"
"349","12.57","132","102","20","459","107","Good","49","11","Yes","Yes","Yes"
"350","9.32","134","27","18","467","96","Medium","49","14","No","Yes","Yes"
"351","8.64","111","101","17","266","91","Medium","63","17","No","Yes","Yes"
"352","10.44","124","115","16","458","105","Medium","62","16","No","Yes","Yes"
"353","13.44","133","103","14","288","122","Good","61","17","Yes","Yes","Yes"
"354","9.45","107","67","12","430","92","Medium","35","12","No","Yes","Yes"
"355","5.3","133","31","1","80","145","Medium","42","18","Yes","Yes","No"
"356","7.02","130","100","0","306","146","Good","42","11","Yes","No","No"
"357","3.58","142","109","0","111","164","Good","72","12","Yes","No","No"
"358","13.36","103","73","3","276","72","Medium","34","15","Yes","Yes","Yes"
"359","4.17","123","96","10","71","118","Bad","69","11","Yes","Yes","No"
"360","3.13","130","62","11","396","130","Bad","66","14","Yes","Yes","No"
"361","8.77","118","86","7","265","114","Good","52","15","No","Yes","Yes"
"362","8.68","131","25","10","183","104","Medium","56","15","No","Yes","Yes"
"363","5.25","131","55","0","26","110","Bad","79","12","Yes","Yes","No"
"364","10.26","111","75","1","377","108","Good","25","12","Yes","No","Yes"
"365","10.5","122","21","16","488","131","Good","30","14","Yes","Yes","Yes"
"366","6.53","154","30","0","122","162","Medium","57","17","No","No","No"
"367","5.98","124","56","11","447","134","Medium","53","12","No","Yes","No"
"368","14.37","95","106","0","256","53","Good","52","17","Yes","No","Yes"
"369","10.71","109","22","10","348","79","Good","74","14","No","Yes","Yes"
"370","10.26","135","100","22","463","122","Medium","36","14","Yes","Yes","Yes"
"371","7.68","126","41","22","403","119","Bad","42","12","Yes","Yes","No"
"372","9.08","152","81","0","191","126","Medium","54","16","Yes","No","Yes"
"373","7.8","121","50","0","508","98","Medium","65","11","No","No","No"
"374","5.58","137","71","0","402","116","Medium","78","17","Yes","No","No"
"375","9.44","131","47","7","90","118","Medium","47","12","Yes","Yes","Yes"
"376","7.9","132","46","4","206","124","Medium","73","11","Yes","No","No"
"377","16.27","141","60","19","319","92","Good","44","11","Yes","Yes","Yes"
"378","6.81","132","61","0","263","125","Medium","41","12","No","No","No"
"379","6.11","133","88","3","105","119","Medium","79","12","Yes","Yes","No"
"380","5.81","125","111","0","404","107","Bad","54","15","Yes","No","No"
"381","9.64","106","64","10","17","89","Medium","68","17","Yes","Yes","Yes"
"382","3.9","124","65","21","496","151","Bad","77","13","Yes","Yes","No"
"383","4.95","121","28","19","315","121","Medium","66","14","Yes","Yes","No"
"384","9.35","98","117","0","76","68","Medium","63","10","Yes","No","Yes"
"385","12.85","123","37","15","348","112","Good","28","12","Yes","Yes","Yes"
"386","5.87","131","73","13","455","132","Medium","62","17","Yes","Yes","No"
"387","5.32","152","116","0","170","160","Medium","39","16","Yes","No","No"
"388","8.67","142","73","14","238","115","Medium","73","14","No","Yes","Yes"
"389","8.14","135","89","11","245","78","Bad","79","16","Yes","Yes","Yes"
"390","8.44","128","42","8","328","107","Medium","35","12","Yes","Yes","Yes"
"391","5.47","108","75","9","61","111","Medium","67","12","Yes","Yes","No"
"392","6.1","153","63","0","49","124","Bad","56","16","Yes","No","No"
"393","4.53","129","42","13","315","130","Bad","34","13","Yes","Yes","No"
"394","5.57","109","51","10","26","120","Medium","30","17","No","Yes","No"
"395","5.35","130","58","19","366","139","Bad","33","16","Yes","Yes","No"
"396","12.57","138","108","17","203","128","Good","33","14","Yes","Yes","Yes"
"397","6.14","139","23","3","37","120","Medium","55","11","No","Yes","No"
"398","7.41","162","26","12","368","159","Medium","40","18","Yes","Yes","No"
"399","5.94","100","79","7","284","95","Bad","50","12","Yes","Yes","No"
"400","9.71","134","37","0","27","120","Good","49","16","Yes","Yes","Yes"


================================================
File: tests/data_examples/data_custom_action/in/tables/sample.csv.manifest
================================================
{
    "id": "in.c-main.test",
    "uri": "https:\/\/connection.keboola.com\/\/v2\/storage\/tables\/in.c-main.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2015-11-02T09:11:37+0100",
    "last_change_date": "2015-11-02T09:11:37+0100",
    "last_import_date": "2015-11-02T09:11:37+0100",
    "rows_count": 400,
    "data_size_bytes": 81920,
    "is_alias": false,
    "columns": [
        "x",
        "Sales",
        "CompPrice",
        "Income",
        "Advertising",
        "Population",
        "Price",
        "ShelveLoc",
        "Age",
        "Education",
        "Urban",
        "US",
        "High"
    ],
    "attributes": []
}

================================================
File: tests/data_examples/data_custom_action/in/tables/sliced.csv.manifest
================================================
{
    "id": "in.c-main.test",
    "uri": "https:\/\/connection.keboola.com\/\/v2\/storage\/tables\/in.c-main.test",
    "name": "test",
    "primary_key": [],
    "indexed_columns": [],
    "created": "2015-11-02T09:11:37+0100",
    "last_change_date": "2015-11-02T09:11:37+0100",
    "last_import_date": "2015-11-02T09:11:37+0100",
    "rows_count": 400,
    "data_size_bytes": 81920,
    "is_alias": false,
    "columns": [
        "x",
        "Sales",
        "CompPrice",
        "Income",
        "Advertising",
        "Population",
        "Price",
        "ShelveLoc",
        "Age",
        "Education",
        "Urban",
        "US",
        "High"
    ],
    "attributes": []
}

================================================
File: tests/data_examples/data_full_input_manifest/config.json
================================================
{
    "storage": {
        "input": {
            "files": [],
            "tables": [
                {
                    "source": "in.c-main.test",
                    "destination": "sample.csv",
                    "columns": [],
                    "where_values": [],
                    "where_operator": "eq",
                    "column_types": [
                        {
                            "source": "Sales",
                            "type": "VARCHAR",
                            "destination": "id",
                            "length": "255",
                            "nullable": false,
                            "convert_empty_values_to_null": false
                        }
                    ]
                }
            ]
        }       

    },
    "parameters": {

    }
   
}


================================================
File: tests/data_examples/data_full_input_manifest/in/state.json
================================================
{
  "test_state": 1234
}

================================================
File: tests/data_examples/data_full_input_manifest/in/tables/sample.csv
================================================
"x","Sales","CompPrice","Income","Advertising","Population","Price","ShelveLoc","Age","Education","Urban","US","High"
"1","9.5","138","73","11","276","120","Bad","42","17","Yes","Yes","Yes"
"2","11.22","111","48","16","260","83","Good","65","10","Yes","Yes","Yes"
"3","10.06","113","35","10","269","80","Medium","59","12","Yes","Yes","Yes"
"4","7.4","117","100","4","466","97","Medium","55","14","Yes","Yes","No"
"5","4.15","141","64","3","340","128","Bad","38","13","Yes","No","No"
"6","10.81","124","113","13","501","72","Bad","78","16","No","Yes","Yes"
"7","6.63","115","105","0","45","108","Medium","71","15","Yes","No","No"
"8","11.85","136","81","15","425","120","Good","67","10","Yes","Yes","Yes"
"9","6.54","132","110","0","108","124","Medium","76","10","No","No","No"
"10","4.69","132","113","0","131","124","Medium","76","17","No","Yes","No"
"11","9.01","121","78","9","150","100","Bad","26","10","No","Yes","Yes"
"12","11.96","117","94","4","503","94","Good","50","13","Yes","Yes","Yes"
"13","3.98","122","35","2","393","136","Medium","62","18","Yes","No","No"
"14","10.96","115","28","11","29","86","Good","53","18","Yes","Yes","Yes"
"15","11.17","107","117","11","148","118","Good","52","18","Yes","Yes","Yes"
"16","8.71","149","95","5","400","144","Medium","76","18","No","No","Yes"
"17","7.58","118","32","0","284","110","Good","63","13","Yes","No","No"
"18","12.29","147","74","13","251","131","Good","52","10","Yes","Yes","Yes"
"19","13.91","110","110","0","408","68","Good","46","17","No","Yes","Yes"
"20","8.73","129","76","16","58","121","Medium","69","12","Yes","Yes","Yes"
"21","6.41","125","90","2","367","131","Medium","35","18","Yes","Yes","No"
"22","12.13","134","29","12","239","109","Good","62","18","No","Yes","Yes"
"23","5.08","128","46","6","497","138","Medium","42","13","Yes","No","No"
"24","5.87","121","31","0","292","109","Medium","79","10","Yes","No","No"
"25","10.14","145","119","16","294","113","Bad","42","12","Yes","Yes","Yes"
"26","14.9","139","32","0","176","82","Good","54","11","No","No","Yes"
"27","8.33","107","115","11","496","131","Good","50","11","No","Yes","Yes"
"28","5.27","98","118","0","19","107","Medium","64","17","Yes","No","No"
"29","2.99","103","74","0","359","97","Bad","55","11","Yes","Yes","No"
"30","7.81","104","99","15","226","102","Bad","58","17","Yes","Yes","No"
"31","13.55","125","94","0","447","89","Good","30","12","Yes","No","Yes"
"32","8.25","136","58","16","241","131","Medium","44","18","Yes","Yes","Yes"
"33","6.2","107","32","12","236","137","Good","64","10","No","Yes","No"
"34","8.77","114","38","13","317","128","Good","50","16","Yes","Yes","Yes"
"35","2.67","115","54","0","406","128","Medium","42","17","Yes","Yes","No"
"36","11.07","131","84","11","29","96","Medium","44","17","No","Yes","Yes"
"37","8.89","122","76","0","270","100","Good","60","18","No","No","Yes"
"38","4.95","121","41","5","412","110","Medium","54","10","Yes","Yes","No"
"39","6.59","109","73","0","454","102","Medium","65","15","Yes","No","No"
"40","3.24","130","60","0","144","138","Bad","38","10","No","No","No"
"41","2.07","119","98","0","18","126","Bad","73","17","No","No","No"
"42","7.96","157","53","0","403","124","Bad","58","16","Yes","No","No"
"43","10.43","77","69","0","25","24","Medium","50","18","Yes","No","Yes"
"44","4.12","123","42","11","16","134","Medium","59","13","Yes","Yes","No"
"45","4.16","85","79","6","325","95","Medium","69","13","Yes","Yes","No"
"46","4.56","141","63","0","168","135","Bad","44","12","Yes","Yes","No"
"47","12.44","127","90","14","16","70","Medium","48","15","No","Yes","Yes"
"48","4.38","126","98","0","173","108","Bad","55","16","Yes","No","No"
"49","3.91","116","52","0","349","98","Bad","69","18","Yes","No","No"
"50","10.61","157","93","0","51","149","Good","32","17","Yes","No","Yes"
"51","1.42","99","32","18","341","108","Bad","80","16","Yes","Yes","No"
"52","4.42","121","90","0","150","108","Bad","75","16","Yes","No","No"
"53","7.91","153","40","3","112","129","Bad","39","18","Yes","Yes","No"
"54","6.92","109","64","13","39","119","Medium","61","17","Yes","Yes","No"
"55","4.9","134","103","13","25","144","Medium","76","17","No","Yes","No"
"56","6.85","143","81","5","60","154","Medium","61","18","Yes","Yes","No"
"57","11.91","133","82","0","54","84","Medium","50","17","Yes","No","Yes"
"58","0.91","93","91","0","22","117","Bad","75","11","Yes","No","No"
"59","5.42","103","93","15","188","103","Bad","74","16","Yes","Yes","No"
"60","5.21","118","71","4","148","114","Medium","80","13","Yes","No","No"
"61","8.32","122","102","19","469","123","Bad","29","13","Yes","Yes","Yes"
"62","7.32","105","32","0","358","107","Medium","26","13","No","No","No"
"63","1.82","139","45","0","146","133","Bad","77","17","Yes","Yes","No"
"64","8.47","119","88","10","170","101","Medium","61","13","Yes","Yes","Yes"
"65","7.8","100","67","12","184","104","Medium","32","16","No","Yes","No"
"66","4.9","122","26","0","197","128","Medium","55","13","No","No","No"
"67","8.85","127","92","0","508","91","Medium","56","18","Yes","No","Yes"
"68","9.01","126","61","14","152","115","Medium","47","16","Yes","Yes","Yes"
"69","13.39","149","69","20","366","134","Good","60","13","Yes","Yes","Yes"
"70","7.99","127","59","0","339","99","Medium","65","12","Yes","No","No"
"71","9.46","89","81","15","237","99","Good","74","12","Yes","Yes","Yes"
"72","6.5","148","51","16","148","150","Medium","58","17","No","Yes","No"
"73","5.52","115","45","0","432","116","Medium","25","15","Yes","No","No"
"74","12.61","118","90","10","54","104","Good","31","11","No","Yes","Yes"
"75","6.2","150","68","5","125","136","Medium","64","13","No","Yes","No"
"76","8.55","88","111","23","480","92","Bad","36","16","No","Yes","Yes"
"77","10.64","102","87","10","346","70","Medium","64","15","Yes","Yes","Yes"
"78","7.7","118","71","12","44","89","Medium","67","18","No","Yes","No"
"79","4.43","134","48","1","139","145","Medium","65","12","Yes","Yes","No"
"80","9.14","134","67","0","286","90","Bad","41","13","Yes","No","Yes"
"81","8.01","113","100","16","353","79","Bad","68","11","Yes","Yes","Yes"
"82","7.52","116","72","0","237","128","Good","70","13","Yes","No","No"
"83","11.62","151","83","4","325","139","Good","28","17","Yes","Yes","Yes"
"84","4.42","109","36","7","468","94","Bad","56","11","Yes","Yes","No"
"85","2.23","111","25","0","52","121","Bad","43","18","No","No","No"
"86","8.47","125","103","0","304","112","Medium","49","13","No","No","Yes"
"87","8.7","150","84","9","432","134","Medium","64","15","Yes","No","Yes"
"88","11.7","131","67","7","272","126","Good","54","16","No","Yes","Yes"
"89","6.56","117","42","7","144","111","Medium","62","10","Yes","Yes","No"
"90","7.95","128","66","3","493","119","Medium","45","16","No","No","No"
"91","5.33","115","22","0","491","103","Medium","64","11","No","No","No"
"92","4.81","97","46","11","267","107","Medium","80","15","Yes","Yes","No"
"93","4.53","114","113","0","97","125","Medium","29","12","Yes","No","No"
"94","8.86","145","30","0","67","104","Medium","55","17","Yes","No","Yes"
"95","8.39","115","97","5","134","84","Bad","55","11","Yes","Yes","Yes"
"96","5.58","134","25","10","237","148","Medium","59","13","Yes","Yes","No"
"97","9.48","147","42","10","407","132","Good","73","16","No","Yes","Yes"
"98","7.45","161","82","5","287","129","Bad","33","16","Yes","Yes","No"
"99","12.49","122","77","24","382","127","Good","36","16","No","Yes","Yes"
"100","4.88","121","47","3","220","107","Bad","56","16","No","Yes","No"
"101","4.11","113","69","11","94","106","Medium","76","12","No","Yes","No"
"102","6.2","128","93","0","89","118","Medium","34","18","Yes","No","No"
"103","5.3","113","22","0","57","97","Medium","65","16","No","No","No"
"104","5.07","123","91","0","334","96","Bad","78","17","Yes","Yes","No"
"105","4.62","121","96","0","472","138","Medium","51","12","Yes","No","No"
"106","5.55","104","100","8","398","97","Medium","61","11","Yes","Yes","No"
"107","0.16","102","33","0","217","139","Medium","70","18","No","No","No"
"108","8.55","134","107","0","104","108","Medium","60","12","Yes","No","Yes"
"109","3.47","107","79","2","488","103","Bad","65","16","Yes","No","No"
"110","8.98","115","65","0","217","90","Medium","60","17","No","No","Yes"
"111","9","128","62","7","125","116","Medium","43","14","Yes","Yes","Yes"
"112","6.62","132","118","12","272","151","Medium","43","14","Yes","Yes","No"
"113","6.67","116","99","5","298","125","Good","62","12","Yes","Yes","No"
"114","6.01","131","29","11","335","127","Bad","33","12","Yes","Yes","No"
"115","9.31","122","87","9","17","106","Medium","65","13","Yes","Yes","Yes"
"116","8.54","139","35","0","95","129","Medium","42","13","Yes","No","Yes"
"117","5.08","135","75","0","202","128","Medium","80","10","No","No","No"
"118","8.8","145","53","0","507","119","Medium","41","12","Yes","No","Yes"
"119","7.57","112","88","2","243","99","Medium","62","11","Yes","Yes","No"
"120","7.37","130","94","8","137","128","Medium","64","12","Yes","Yes","No"
"121","6.87","128","105","11","249","131","Medium","63","13","Yes","Yes","No"
"122","11.67","125","89","10","380","87","Bad","28","10","Yes","Yes","Yes"
"123","6.88","119","100","5","45","108","Medium","75","10","Yes","Yes","No"
"124","8.19","127","103","0","125","155","Good","29","15","No","Yes","Yes"
"125","8.87","131","113","0","181","120","Good","63","14","Yes","No","Yes"
"126","9.34","89","78","0","181","49","Medium","43","15","No","No","Yes"
"127","11.27","153","68","2","60","133","Good","59","16","Yes","Yes","Yes"
"128","6.52","125","48","3","192","116","Medium","51","14","Yes","Yes","No"
"129","4.96","133","100","3","350","126","Bad","55","13","Yes","Yes","No"
"130","4.47","143","120","7","279","147","Bad","40","10","No","Yes","No"
"131","8.41","94","84","13","497","77","Medium","51","12","Yes","Yes","Yes"
"132","6.5","108","69","3","208","94","Medium","77","16","Yes","No","No"
"133","9.54","125","87","9","232","136","Good","72","10","Yes","Yes","Yes"
"134","7.62","132","98","2","265","97","Bad","62","12","Yes","Yes","No"
"135","3.67","132","31","0","327","131","Medium","76","16","Yes","No","No"
"136","6.44","96","94","14","384","120","Medium","36","18","No","Yes","No"
"137","5.17","131","75","0","10","120","Bad","31","18","No","No","No"
"138","6.52","128","42","0","436","118","Medium","80","11","Yes","No","No"
"139","10.27","125","103","12","371","109","Medium","44","10","Yes","Yes","Yes"
"140","12.3","146","62","10","310","94","Medium","30","13","No","Yes","Yes"
"141","6.03","133","60","10","277","129","Medium","45","18","Yes","Yes","No"
"142","6.53","140","42","0","331","131","Bad","28","15","Yes","No","No"
"143","7.44","124","84","0","300","104","Medium","77","15","Yes","No","No"
"144","0.53","122","88","7","36","159","Bad","28","17","Yes","Yes","No"
"145","9.09","132","68","0","264","123","Good","34","11","No","No","Yes"
"146","8.77","144","63","11","27","117","Medium","47","17","Yes","Yes","Yes"
"147","3.9","114","83","0","412","131","Bad","39","14","Yes","No","No"
"148","10.51","140","54","9","402","119","Good","41","16","No","Yes","Yes"
"149","7.56","110","119","0","384","97","Medium","72","14","No","Yes","No"
"150","11.48","121","120","13","140","87","Medium","56","11","Yes","Yes","Yes"
"151","10.49","122","84","8","176","114","Good","57","10","No","Yes","Yes"
"152","10.77","111","58","17","407","103","Good","75","17","No","Yes","Yes"
"153","7.64","128","78","0","341","128","Good","45","13","No","No","No"
"154","5.93","150","36","7","488","150","Medium","25","17","No","Yes","No"
"155","6.89","129","69","10","289","110","Medium","50","16","No","Yes","No"
"156","7.71","98","72","0","59","69","Medium","65","16","Yes","No","No"
"157","7.49","146","34","0","220","157","Good","51","16","Yes","No","No"
"158","10.21","121","58","8","249","90","Medium","48","13","No","Yes","Yes"
"159","12.53","142","90","1","189","112","Good","39","10","No","Yes","Yes"
"160","9.32","119","60","0","372","70","Bad","30","18","No","No","Yes"
"161","4.67","111","28","0","486","111","Medium","29","12","No","No","No"
"162","2.93","143","21","5","81","160","Medium","67","12","No","Yes","No"
"163","3.63","122","74","0","424","149","Medium","51","13","Yes","No","No"
"164","5.68","130","64","0","40","106","Bad","39","17","No","No","No"
"165","8.22","148","64","0","58","141","Medium","27","13","No","Yes","Yes"
"166","0.37","147","58","7","100","191","Bad","27","15","Yes","Yes","No"
"167","6.71","119","67","17","151","137","Medium","55","11","Yes","Yes","No"
"168","6.71","106","73","0","216","93","Medium","60","13","Yes","No","No"
"169","7.3","129","89","0","425","117","Medium","45","10","Yes","No","No"
"170","11.48","104","41","15","492","77","Good","73","18","Yes","Yes","Yes"
"171","8.01","128","39","12","356","118","Medium","71","10","Yes","Yes","Yes"
"172","12.49","93","106","12","416","55","Medium","75","15","Yes","Yes","Yes"
"173","9.03","104","102","13","123","110","Good","35","16","Yes","Yes","Yes"
"174","6.38","135","91","5","207","128","Medium","66","18","Yes","Yes","No"
"175","0","139","24","0","358","185","Medium","79","15","No","No","No"
"176","7.54","115","89","0","38","122","Medium","25","12","Yes","No","No"
"177","5.61","138","107","9","480","154","Medium","47","11","No","Yes","No"
"178","10.48","138","72","0","148","94","Medium","27","17","Yes","Yes","Yes"
"179","10.66","104","71","14","89","81","Medium","25","14","No","Yes","Yes"
"180","7.78","144","25","3","70","116","Medium","77","18","Yes","Yes","No"
"181","4.94","137","112","15","434","149","Bad","66","13","Yes","Yes","No"
"182","7.43","121","83","0","79","91","Medium","68","11","Yes","No","No"
"183","4.74","137","60","4","230","140","Bad","25","13","Yes","No","No"
"184","5.32","118","74","6","426","102","Medium","80","18","Yes","Yes","No"
"185","9.95","132","33","7","35","97","Medium","60","11","No","Yes","Yes"
"186","10.07","130","100","11","449","107","Medium","64","10","Yes","Yes","Yes"
"187","8.68","120","51","0","93","86","Medium","46","17","No","No","Yes"
"188","6.03","117","32","0","142","96","Bad","62","17","Yes","No","No"
"189","8.07","116","37","0","426","90","Medium","76","15","Yes","No","Yes"
"190","12.11","118","117","18","509","104","Medium","26","15","No","Yes","Yes"
"191","8.79","130","37","13","297","101","Medium","37","13","No","Yes","Yes"
"192","6.67","156","42","13","170","173","Good","74","14","Yes","Yes","No"
"193","7.56","108","26","0","408","93","Medium","56","14","No","No","No"
"194","13.28","139","70","7","71","96","Good","61","10","Yes","Yes","Yes"
"195","7.23","112","98","18","481","128","Medium","45","11","Yes","Yes","No"
"196","4.19","117","93","4","420","112","Bad","66","11","Yes","Yes","No"
"197","4.1","130","28","6","410","133","Bad","72","16","Yes","Yes","No"
"198","2.52","124","61","0","333","138","Medium","76","16","Yes","No","No"
"199","3.62","112","80","5","500","128","Medium","69","10","Yes","Yes","No"
"200","6.42","122","88","5","335","126","Medium","64","14","Yes","Yes","No"
"201","5.56","144","92","0","349","146","Medium","62","12","No","No","No"
"202","5.94","138","83","0","139","134","Medium","54","18","Yes","No","No"
"203","4.1","121","78","4","413","130","Bad","46","10","No","Yes","No"
"204","2.05","131","82","0","132","157","Bad","25","14","Yes","No","No"
"205","8.74","155","80","0","237","124","Medium","37","14","Yes","No","Yes"
"206","5.68","113","22","1","317","132","Medium","28","12","Yes","No","No"
"207","4.97","162","67","0","27","160","Medium","77","17","Yes","Yes","No"
"208","8.19","111","105","0","466","97","Bad","61","10","No","No","Yes"
"209","7.78","86","54","0","497","64","Bad","33","12","Yes","No","No"
"210","3.02","98","21","11","326","90","Bad","76","11","No","Yes","No"
"211","4.36","125","41","2","357","123","Bad","47","14","No","Yes","No"
"212","9.39","117","118","14","445","120","Medium","32","15","Yes","Yes","Yes"
"213","12.04","145","69","19","501","105","Medium","45","11","Yes","Yes","Yes"
"214","8.23","149","84","5","220","139","Medium","33","10","Yes","Yes","Yes"
"215","4.83","115","115","3","48","107","Medium","73","18","Yes","Yes","No"
"216","2.34","116","83","15","170","144","Bad","71","11","Yes","Yes","No"
"217","5.73","141","33","0","243","144","Medium","34","17","Yes","No","No"
"218","4.34","106","44","0","481","111","Medium","70","14","No","No","No"
"219","9.7","138","61","12","156","120","Medium","25","14","Yes","Yes","Yes"
"220","10.62","116","79","19","359","116","Good","58","17","Yes","Yes","Yes"
"221","10.59","131","120","15","262","124","Medium","30","10","Yes","Yes","Yes"
"222","6.43","124","44","0","125","107","Medium","80","11","Yes","No","No"
"223","7.49","136","119","6","178","145","Medium","35","13","Yes","Yes","No"
"224","3.45","110","45","9","276","125","Medium","62","14","Yes","Yes","No"
"225","4.1","134","82","0","464","141","Medium","48","13","No","No","No"
"226","6.68","107","25","0","412","82","Bad","36","14","Yes","No","No"
"227","7.8","119","33","0","245","122","Good","56","14","Yes","No","No"
"228","8.69","113","64","10","68","101","Medium","57","16","Yes","Yes","Yes"
"229","5.4","149","73","13","381","163","Bad","26","11","No","Yes","No"
"230","11.19","98","104","0","404","72","Medium","27","18","No","No","Yes"
"231","5.16","115","60","0","119","114","Bad","38","14","No","No","No"
"232","8.09","132","69","0","123","122","Medium","27","11","No","No","Yes"
"233","13.14","137","80","10","24","105","Good","61","15","Yes","Yes","Yes"
"234","8.65","123","76","18","218","120","Medium","29","14","No","Yes","Yes"
"235","9.43","115","62","11","289","129","Good","56","16","No","Yes","Yes"
"236","5.53","126","32","8","95","132","Medium","50","17","Yes","Yes","No"
"237","9.32","141","34","16","361","108","Medium","69","10","Yes","Yes","Yes"
"238","9.62","151","28","8","499","135","Medium","48","10","Yes","Yes","Yes"
"239","7.36","121","24","0","200","133","Good","73","13","Yes","No","No"
"240","3.89","123","105","0","149","118","Bad","62","16","Yes","Yes","No"
"241","10.31","159","80","0","362","121","Medium","26","18","Yes","No","Yes"
"242","12.01","136","63","0","160","94","Medium","38","12","Yes","No","Yes"
"243","4.68","124","46","0","199","135","Medium","52","14","No","No","No"
"244","7.82","124","25","13","87","110","Medium","57","10","Yes","Yes","No"
"245","8.78","130","30","0","391","100","Medium","26","18","Yes","No","Yes"
"246","10","114","43","0","199","88","Good","57","10","No","Yes","Yes"
"247","6.9","120","56","20","266","90","Bad","78","18","Yes","Yes","No"
"248","5.04","123","114","0","298","151","Bad","34","16","Yes","No","No"
"249","5.36","111","52","0","12","101","Medium","61","11","Yes","Yes","No"
"250","5.05","125","67","0","86","117","Bad","65","11","Yes","No","No"
"251","9.16","137","105","10","435","156","Good","72","14","Yes","Yes","Yes"
"252","3.72","139","111","5","310","132","Bad","62","13","Yes","Yes","No"
"253","8.31","133","97","0","70","117","Medium","32","16","Yes","No","Yes"
"254","5.64","124","24","5","288","122","Medium","57","12","No","Yes","No"
"255","9.58","108","104","23","353","129","Good","37","17","Yes","Yes","Yes"
"256","7.71","123","81","8","198","81","Bad","80","15","Yes","Yes","No"
"257","4.2","147","40","0","277","144","Medium","73","10","Yes","No","No"
"258","8.67","125","62","14","477","112","Medium","80","13","Yes","Yes","Yes"
"259","3.47","108","38","0","251","81","Bad","72","14","No","No","No"
"260","5.12","123","36","10","467","100","Bad","74","11","No","Yes","No"
"261","7.67","129","117","8","400","101","Bad","36","10","Yes","Yes","No"
"262","5.71","121","42","4","188","118","Medium","54","15","Yes","Yes","No"
"263","6.37","120","77","15","86","132","Medium","48","18","Yes","Yes","No"
"264","7.77","116","26","6","434","115","Medium","25","17","Yes","Yes","No"
"265","6.95","128","29","5","324","159","Good","31","15","Yes","Yes","No"
"266","5.31","130","35","10","402","129","Bad","39","17","Yes","Yes","No"
"267","9.1","128","93","12","343","112","Good","73","17","No","Yes","Yes"
"268","5.83","134","82","7","473","112","Bad","51","12","No","Yes","No"
"269","6.53","123","57","0","66","105","Medium","39","11","Yes","No","No"
"270","5.01","159","69","0","438","166","Medium","46","17","Yes","No","No"
"271","11.99","119","26","0","284","89","Good","26","10","Yes","No","Yes"
"272","4.55","111","56","0","504","110","Medium","62","16","Yes","No","No"
"273","12.98","113","33","0","14","63","Good","38","12","Yes","No","Yes"
"274","10.04","116","106","8","244","86","Medium","58","12","Yes","Yes","Yes"
"275","7.22","135","93","2","67","119","Medium","34","11","Yes","Yes","No"
"276","6.67","107","119","11","210","132","Medium","53","11","Yes","Yes","No"
"277","6.93","135","69","14","296","130","Medium","73","15","Yes","Yes","No"
"278","7.8","136","48","12","326","125","Medium","36","16","Yes","Yes","No"
"279","7.22","114","113","2","129","151","Good","40","15","No","Yes","No"
"280","3.42","141","57","13","376","158","Medium","64","18","Yes","Yes","No"
"281","2.86","121","86","10","496","145","Bad","51","10","Yes","Yes","No"
"282","11.19","122","69","7","303","105","Good","45","16","No","Yes","Yes"
"283","7.74","150","96","0","80","154","Good","61","11","Yes","No","No"
"284","5.36","135","110","0","112","117","Medium","80","16","No","No","No"
"285","6.97","106","46","11","414","96","Bad","79","17","No","No","No"
"286","7.6","146","26","11","261","131","Medium","39","10","Yes","Yes","No"
"287","7.53","117","118","11","429","113","Medium","67","18","No","Yes","No"
"288","6.88","95","44","4","208","72","Bad","44","17","Yes","Yes","No"
"289","6.98","116","40","0","74","97","Medium","76","15","No","No","No"
"290","8.75","143","77","25","448","156","Medium","43","17","Yes","Yes","Yes"
"291","9.49","107","111","14","400","103","Medium","41","11","No","Yes","Yes"
"292","6.64","118","70","0","106","89","Bad","39","17","Yes","No","No"
"293","11.82","113","66","16","322","74","Good","76","15","Yes","Yes","Yes"
"294","11.28","123","84","0","74","89","Good","59","10","Yes","No","Yes"
"295","12.66","148","76","3","126","99","Good","60","11","Yes","Yes","Yes"
"296","4.21","118","35","14","502","137","Medium","79","10","No","Yes","No"
"297","8.21","127","44","13","160","123","Good","63","18","Yes","Yes","Yes"
"298","3.07","118","83","13","276","104","Bad","75","10","Yes","Yes","No"
"299","10.98","148","63","0","312","130","Good","63","15","Yes","No","Yes"
"300","9.4","135","40","17","497","96","Medium","54","17","No","Yes","Yes"
"301","8.57","116","78","1","158","99","Medium","45","11","Yes","Yes","Yes"
"302","7.41","99","93","0","198","87","Medium","57","16","Yes","Yes","No"
"303","5.28","108","77","13","388","110","Bad","74","14","Yes","Yes","No"
"304","10.01","133","52","16","290","99","Medium","43","11","Yes","Yes","Yes"
"305","11.93","123","98","12","408","134","Good","29","10","Yes","Yes","Yes"
"306","8.03","115","29","26","394","132","Medium","33","13","Yes","Yes","Yes"
"307","4.78","131","32","1","85","133","Medium","48","12","Yes","Yes","No"
"308","5.9","138","92","0","13","120","Bad","61","12","Yes","No","No"
"309","9.24","126","80","19","436","126","Medium","52","10","Yes","Yes","Yes"
"310","11.18","131","111","13","33","80","Bad","68","18","Yes","Yes","Yes"
"311","9.53","175","65","29","419","166","Medium","53","12","Yes","Yes","Yes"
"312","6.15","146","68","12","328","132","Bad","51","14","Yes","Yes","No"
"313","6.8","137","117","5","337","135","Bad","38","10","Yes","Yes","No"
"314","9.33","103","81","3","491","54","Medium","66","13","Yes","No","Yes"
"315","7.72","133","33","10","333","129","Good","71","14","Yes","Yes","No"
"316","6.39","131","21","8","220","171","Good","29","14","Yes","Yes","No"
"317","15.63","122","36","5","369","72","Good","35","10","Yes","Yes","Yes"
"318","6.41","142","30","0","472","136","Good","80","15","No","No","No"
"319","10.08","116","72","10","456","130","Good","41","14","No","Yes","Yes"
"320","6.97","127","45","19","459","129","Medium","57","11","No","Yes","No"
"321","5.86","136","70","12","171","152","Medium","44","18","Yes","Yes","No"
"322","7.52","123","39","5","499","98","Medium","34","15","Yes","No","No"
"323","9.16","140","50","10","300","139","Good","60","15","Yes","Yes","Yes"
"324","10.36","107","105","18","428","103","Medium","34","12","Yes","Yes","Yes"
"325","2.66","136","65","4","133","150","Bad","53","13","Yes","Yes","No"
"326","11.7","144","69","11","131","104","Medium","47","11","Yes","Yes","Yes"
"327","4.69","133","30","0","152","122","Medium","53","17","Yes","No","No"
"328","6.23","112","38","17","316","104","Medium","80","16","Yes","Yes","No"
"329","3.15","117","66","1","65","111","Bad","55","11","Yes","Yes","No"
"330","11.27","100","54","9","433","89","Good","45","12","Yes","Yes","Yes"
"331","4.99","122","59","0","501","112","Bad","32","14","No","No","No"
"332","10.1","135","63","15","213","134","Medium","32","10","Yes","Yes","Yes"
"333","5.74","106","33","20","354","104","Medium","61","12","Yes","Yes","No"
"334","5.87","136","60","7","303","147","Medium","41","10","Yes","Yes","No"
"335","7.63","93","117","9","489","83","Bad","42","13","Yes","Yes","No"
"336","6.18","120","70","15","464","110","Medium","72","15","Yes","Yes","No"
"337","5.17","138","35","6","60","143","Bad","28","18","Yes","No","No"
"338","8.61","130","38","0","283","102","Medium","80","15","Yes","No","Yes"
"339","5.97","112","24","0","164","101","Medium","45","11","Yes","No","No"
"340","11.54","134","44","4","219","126","Good","44","15","Yes","Yes","Yes"
"341","7.5","140","29","0","105","91","Bad","43","16","Yes","No","No"
"342","7.38","98","120","0","268","93","Medium","72","10","No","No","No"
"343","7.81","137","102","13","422","118","Medium","71","10","No","Yes","No"
"344","5.99","117","42","10","371","121","Bad","26","14","Yes","Yes","No"
"345","8.43","138","80","0","108","126","Good","70","13","No","Yes","Yes"
"346","4.81","121","68","0","279","149","Good","79","12","Yes","No","No"
"347","8.97","132","107","0","144","125","Medium","33","13","No","No","Yes"
"348","6.88","96","39","0","161","112","Good","27","14","No","No","No"
"349","12.57","132","102","20","459","107","Good","49","11","Yes","Yes","Yes"
"350","9.32","134","27","18","467","96","Medium","49","14","No","Yes","Yes"
"351","8.64","111","101","17","266","91","Medium","63","17","No","Yes","Yes"
"352","10.44","124","115","16","458","105","Medium","62","16","No","Yes","Yes"
"353","13.44","133","103","14","288","122","Good","61","17","Yes","Yes","Yes"
"354","9.45","107","67","12","430","92","Medium","35","12","No","Yes","Yes"
"355","5.3","133","31","1","80","145","Medium","42","18","Yes","Yes","No"
"356","7.02","130","100","0","306","146","Good","42","11","Yes","No","No"
"357","3.58","142","109","0","111","164","Good","72","12","Yes","No","No"
"358","13.36","103","73","3","276","72","Medium","34","15","Yes","Yes","Yes"
"359","4.17","123","96","10","71","118","Bad","69","11","Yes","Yes","No"
"360","3.13","130","62","11","396","130","Bad","66","14","Yes","Yes","No"
"361","8.77","118","86","7","265","114","Good","52","15","No","Yes","Yes"
"362","8.68","131","25","10","183","104","Medium","56","15","No","Yes","Yes"
"363","5.25","131","55","0","26","110","Bad","79","12","Yes","Yes","No"
"364","10.26","111","75","1","377","108","Good","25","12","Yes","No","Yes"
"365","10.5","122","21","16","488","131","Good","30","14","Yes","Yes","Yes"
"366","6.53","154","30","0","122","162","Medium","57","17","No","No","No"
"367","5.98","124","56","11","447","134","Medium","53","12","No","Yes","No"
"368","14.37","95","106","0","256","53","Good","52","17","Yes","No","Yes"
"369","10.71","109","22","10","348","79","Good","74","14","No","Yes","Yes"
"370","10.26","135","100","22","463","122","Medium","36","14","Yes","Yes","Yes"
"371","7.68","126","41","22","403","119","Bad","42","12","Yes","Yes","No"
"372","9.08","152","81","0","191","126","Medium","54","16","Yes","No","Yes"
"373","7.8","121","50","0","508","98","Medium","65","11","No","No","No"
"374","5.58","137","71","0","402","116","Medium","78","17","Yes","No","No"
"375","9.44","131","47","7","90","118","Medium","47","12","Yes","Yes","Yes"
"376","7.9","132","46","4","206","124","Medium","73","11","Yes","No","No"
"377","16.27","141","60","19","319","92","Good","44","11","Yes","Yes","Yes"
"378","6.81","132","61","0","263","125","Medium","41","12","No","No","No"
"379","6.11","133","88","3","105","119","Medium","79","12","Yes","Yes","No"
"380","5.81","125","111","0","404","107","Bad","54","15","Yes","No","No"
"381","9.64","106","64","10","17","89","Medium","68","17","Yes","Yes","Yes"
"382","3.9","124","65","21","496","151","Bad","77","13","Yes","Yes","No"
"383","4.95","121","28","19","315","121","Medium","66","14","Yes","Yes","No"
"384","9.35","98","117","0","76","68","Medium","63","10","Yes","No","Yes"
"385","12.85","123","37","15","348","112","Good","28","12","Yes","Yes","Yes"
"386","5.87","131","73","13","455","132","Medium","62","17","Yes","Yes","No"
"387","5.32","152","116","0","170","160","Medium","39","16","Yes","No","No"
"388","8.67","142","73","14","238","115","Medium","73","14","No","Yes","Yes"
"389","8.14","135","89","11","245","78","Bad","79","16","Yes","Yes","Yes"
"390","8.44","128","42","8","328","107","Medium","35","12","Yes","Yes","Yes"
"391","5.47","108","75","9","61","111","Medium","67","12","Yes","Yes","No"
"392","6.1","153","63","0","49","124","Bad","56","16","Yes","No","No"
"393","4.53","129","42","13","315","130","Bad","34","13","Yes","Yes","No"
"394","5.57","109","51","10","26","120","Medium","30","17","No","Yes","No"
"395","5.35","130","58","19","366","139","Bad","33","16","Yes","Yes","No"
"396","12.57","138","108","17","203","128","Good","33","14","Yes","Yes","Yes"
"397","6.14","139","23","3","37","120","Medium","55","11","No","Yes","No"
"398","7.41","162","26","12","368","159","Medium","40","18","Yes","Yes","No"
"399","5.94","100","79","7","284","95","Bad","50","12","Yes","Yes","No"
"400","9.71","134","37","0","27","120","Good","49","16","Yes","Yes","Yes"


================================================
File: tests/data_examples/data_full_input_manifest/in/tables/sample.csv.manifest
================================================
{"id": "in.c-main.test", "uri": "https://connection.keboola.com//v2/storage/tables/in.c-main.test", "name": "sample.csv", "created": "2015-11-02T09:11:37+0100", "last_change_date": "2015-11-02T09:11:37+0100", "last_import_date": "2015-11-02T09:11:37+0100", "rows_count": 400, "data_size_bytes": 81920, "is_alias": false, "indexed_columns": ["x"], "primary_key": ["x"], "column_metadata": {"x": [{"key": "foo", "value": "gogo"}]}, "columns": ["x", "Sales", "CompPrice", "Income", "Advertising", "Population", "Price", "ShelveLoc", "Age", "Education", "Urban", "US", "High"]}

================================================
File: tests/data_examples/data_full_output_manifest/config.json
================================================
{
    "storage": {
        "input": {
            "files": [],
            "tables": [
                {
                    "source": "in.c-main.test",
                    "destination": "sample.csv",
                    "columns": [],
                    "where_values": [],
                    "where_operator": "eq",
                    "column_types": [
                        {
                            "source": "Sales",
                            "type": "VARCHAR",
                            "destination": "id",
                            "length": "255",
                            "nullable": false,
                            "convert_empty_values_to_null": false
                        }
                    ]
                }
            ]
        }       

    },
    "parameters": {

    }
   
}


================================================
File: tests/data_examples/data_full_output_manifest/in/state.json
================================================
{
  "test_state": 1234
}

================================================
File: tests/data_examples/data_full_output_manifest/in/tables/sample_output.csv
================================================
"1","9.5","138","73","11","276","120","Bad","42","17","Yes","Yes","Yes"
"2","11.22","111","48","16","260","83","Good","65","10","Yes","Yes","Yes"
"3","10.06","113","35","10","269","80","Medium","59","12","Yes","Yes","Yes"
"4","7.4","117","100","4","466","97","Medium","55","14","Yes","Yes","No"
"5","4.15","141","64","3","340","128","Bad","38","13","Yes","No","No"
"6","10.81","124","113","13","501","72","Bad","78","16","No","Yes","Yes"
"7","6.63","115","105","0","45","108","Medium","71","15","Yes","No","No"
"8","11.85","136","81","15","425","120","Good","67","10","Yes","Yes","Yes"
"9","6.54","132","110","0","108","124","Medium","76","10","No","No","No"
"10","4.69","132","113","0","131","124","Medium","76","17","No","Yes","No"
"11","9.01","121","78","9","150","100","Bad","26","10","No","Yes","Yes"
"12","11.96","117","94","4","503","94","Good","50","13","Yes","Yes","Yes"
"13","3.98","122","35","2","393","136","Medium","62","18","Yes","No","No"
"14","10.96","115","28","11","29","86","Good","53","18","Yes","Yes","Yes"
"15","11.17","107","117","11","148","118","Good","52","18","Yes","Yes","Yes"
"16","8.71","149","95","5","400","144","Medium","76","18","No","No","Yes"
"17","7.58","118","32","0","284","110","Good","63","13","Yes","No","No"
"18","12.29","147","74","13","251","131","Good","52","10","Yes","Yes","Yes"
"19","13.91","110","110","0","408","68","Good","46","17","No","Yes","Yes"
"20","8.73","129","76","16","58","121","Medium","69","12","Yes","Yes","Yes"
"21","6.41","125","90","2","367","131","Medium","35","18","Yes","Yes","No"
"22","12.13","134","29","12","239","109","Good","62","18","No","Yes","Yes"
"23","5.08","128","46","6","497","138","Medium","42","13","Yes","No","No"
"24","5.87","121","31","0","292","109","Medium","79","10","Yes","No","No"
"25","10.14","145","119","16","294","113","Bad","42","12","Yes","Yes","Yes"
"26","14.9","139","32","0","176","82","Good","54","11","No","No","Yes"
"27","8.33","107","115","11","496","131","Good","50","11","No","Yes","Yes"
"28","5.27","98","118","0","19","107","Medium","64","17","Yes","No","No"
"29","2.99","103","74","0","359","97","Bad","55","11","Yes","Yes","No"
"30","7.81","104","99","15","226","102","Bad","58","17","Yes","Yes","No"
"31","13.55","125","94","0","447","89","Good","30","12","Yes","No","Yes"
"32","8.25","136","58","16","241","131","Medium","44","18","Yes","Yes","Yes"
"33","6.2","107","32","12","236","137","Good","64","10","No","Yes","No"
"34","8.77","114","38","13","317","128","Good","50","16","Yes","Yes","Yes"
"35","2.67","115","54","0","406","128","Medium","42","17","Yes","Yes","No"
"36","11.07","131","84","11","29","96","Medium","44","17","No","Yes","Yes"
"37","8.89","122","76","0","270","100","Good","60","18","No","No","Yes"
"38","4.95","121","41","5","412","110","Medium","54","10","Yes","Yes","No"
"39","6.59","109","73","0","454","102","Medium","65","15","Yes","No","No"
"40","3.24","130","60","0","144","138","Bad","38","10","No","No","No"
"41","2.07","119","98","0","18","126","Bad","73","17","No","No","No"
"42","7.96","157","53","0","403","124","Bad","58","16","Yes","No","No"
"43","10.43","77","69","0","25","24","Medium","50","18","Yes","No","Yes"
"44","4.12","123","42","11","16","134","Medium","59","13","Yes","Yes","No"
"45","4.16","85","79","6","325","95","Medium","69","13","Yes","Yes","No"
"46","4.56","141","63","0","168","135","Bad","44","12","Yes","Yes","No"
"47","12.44","127","90","14","16","70","Medium","48","15","No","Yes","Yes"
"48","4.38","126","98","0","173","108","Bad","55","16","Yes","No","No"
"49","3.91","116","52","0","349","98","Bad","69","18","Yes","No","No"
"50","10.61","157","93","0","51","149","Good","32","17","Yes","No","Yes"
"51","1.42","99","32","18","341","108","Bad","80","16","Yes","Yes","No"
"52","4.42","121","90","0","150","108","Bad","75","16","Yes","No","No"
"53","7.91","153","40","3","112","129","Bad","39","18","Yes","Yes","No"
"54","6.92","109","64","13","39","119","Medium","61","17","Yes","Yes","No"
"55","4.9","134","103","13","25","144","Medium","76","17","No","Yes","No"
"56","6.85","143","81","5","60","154","Medium","61","18","Yes","Yes","No"
"57","11.91","133","82","0","54","84","Medium","50","17","Yes","No","Yes"
"58","0.91","93","91","0","22","117","Bad","75","11","Yes","No","No"
"59","5.42","103","93","15","188","103","Bad","74","16","Yes","Yes","No"
"60","5.21","118","71","4","148","114","Medium","80","13","Yes","No","No"
"61","8.32","122","102","19","469","123","Bad","29","13","Yes","Yes","Yes"
"62","7.32","105","32","0","358","107","Medium","26","13","No","No","No"
"63","1.82","139","45","0","146","133","Bad","77","17","Yes","Yes","No"
"64","8.47","119","88","10","170","101","Medium","61","13","Yes","Yes","Yes"
"65","7.8","100","67","12","184","104","Medium","32","16","No","Yes","No"
"66","4.9","122","26","0","197","128","Medium","55","13","No","No","No"
"67","8.85","127","92","0","508","91","Medium","56","18","Yes","No","Yes"
"68","9.01","126","61","14","152","115","Medium","47","16","Yes","Yes","Yes"
"69","13.39","149","69","20","366","134","Good","60","13","Yes","Yes","Yes"
"70","7.99","127","59","0","339","99","Medium","65","12","Yes","No","No"
"71","9.46","89","81","15","237","99","Good","74","12","Yes","Yes","Yes"
"72","6.5","148","51","16","148","150","Medium","58","17","No","Yes","No"
"73","5.52","115","45","0","432","116","Medium","25","15","Yes","No","No"
"74","12.61","118","90","10","54","104","Good","31","11","No","Yes","Yes"
"75","6.2","150","68","5","125","136","Medium","64","13","No","Yes","No"
"76","8.55","88","111","23","480","92","Bad","36","16","No","Yes","Yes"
"77","10.64","102","87","10","346","70","Medium","64","15","Yes","Yes","Yes"
"78","7.7","118","71","12","44","89","Medium","67","18","No","Yes","No"
"79","4.43","134","48","1","139","145","Medium","65","12","Yes","Yes","No"
"80","9.14","134","67","0","286","90","Bad","41","13","Yes","No","Yes"
"81","8.01","113","100","16","353","79","Bad","68","11","Yes","Yes","Yes"
"82","7.52","116","72","0","237","128","Good","70","13","Yes","No","No"
"83","11.62","151","83","4","325","139","Good","28","17","Yes","Yes","Yes"
"84","4.42","109","36","7","468","94","Bad","56","11","Yes","Yes","No"
"85","2.23","111","25","0","52","121","Bad","43","18","No","No","No"
"86","8.47","125","103","0","304","112","Medium","49","13","No","No","Yes"
"87","8.7","150","84","9","432","134","Medium","64","15","Yes","No","Yes"
"88","11.7","131","67","7","272","126","Good","54","16","No","Yes","Yes"
"89","6.56","117","42","7","144","111","Medium","62","10","Yes","Yes","No"
"90","7.95","128","66","3","493","119","Medium","45","16","No","No","No"
"91","5.33","115","22","0","491","103","Medium","64","11","No","No","No"
"92","4.81","97","46","11","267","107","Medium","80","15","Yes","Yes","No"
"93","4.53","114","113","0","97","125","Medium","29","12","Yes","No","No"
"94","8.86","145","30","0","67","104","Medium","55","17","Yes","No","Yes"
"95","8.39","115","97","5","134","84","Bad","55","11","Yes","Yes","Yes"
"96","5.58","134","25","10","237","148","Medium","59","13","Yes","Yes","No"
"97","9.48","147","42","10","407","132","Good","73","16","No","Yes","Yes"
"98","7.45","161","82","5","287","129","Bad","33","16","Yes","Yes","No"
"99","12.49","122","77","24","382","127","Good","36","16","No","Yes","Yes"
"100","4.88","121","47","3","220","107","Bad","56","16","No","Yes","No"
"101","4.11","113","69","11","94","106","Medium","76","12","No","Yes","No"
"102","6.2","128","93","0","89","118","Medium","34","18","Yes","No","No"
"103","5.3","113","22","0","57","97","Medium","65","16","No","No","No"
"104","5.07","123","91","0","334","96","Bad","78","17","Yes","Yes","No"
"105","4.62","121","96","0","472","138","Medium","51","12","Yes","No","No"
"106","5.55","104","100","8","398","97","Medium","61","11","Yes","Yes","No"
"107","0.16","102","33","0","217","139","Medium","70","18","No","No","No"
"108","8.55","134","107","0","104","108","Medium","60","12","Yes","No","Yes"
"109","3.47","107","79","2","488","103","Bad","65","16","Yes","No","No"
"110","8.98","115","65","0","217","90","Medium","60","17","No","No","Yes"
"111","9","128","62","7","125","116","Medium","43","14","Yes","Yes","Yes"
"112","6.62","132","118","12","272","151","Medium","43","14","Yes","Yes","No"
"113","6.67","116","99","5","298","125","Good","62","12","Yes","Yes","No"
"114","6.01","131","29","11","335","127","Bad","33","12","Yes","Yes","No"
"115","9.31","122","87","9","17","106","Medium","65","13","Yes","Yes","Yes"
"116","8.54","139","35","0","95","129","Medium","42","13","Yes","No","Yes"
"117","5.08","135","75","0","202","128","Medium","80","10","No","No","No"
"118","8.8","145","53","0","507","119","Medium","41","12","Yes","No","Yes"
"119","7.57","112","88","2","243","99","Medium","62","11","Yes","Yes","No"
"120","7.37","130","94","8","137","128","Medium","64","12","Yes","Yes","No"
"121","6.87","128","105","11","249","131","Medium","63","13","Yes","Yes","No"
"122","11.67","125","89","10","380","87","Bad","28","10","Yes","Yes","Yes"
"123","6.88","119","100","5","45","108","Medium","75","10","Yes","Yes","No"
"124","8.19","127","103","0","125","155","Good","29","15","No","Yes","Yes"
"125","8.87","131","113","0","181","120","Good","63","14","Yes","No","Yes"
"126","9.34","89","78","0","181","49","Medium","43","15","No","No","Yes"
"127","11.27","153","68","2","60","133","Good","59","16","Yes","Yes","Yes"
"128","6.52","125","48","3","192","116","Medium","51","14","Yes","Yes","No"
"129","4.96","133","100","3","350","126","Bad","55","13","Yes","Yes","No"
"130","4.47","143","120","7","279","147","Bad","40","10","No","Yes","No"
"131","8.41","94","84","13","497","77","Medium","51","12","Yes","Yes","Yes"
"132","6.5","108","69","3","208","94","Medium","77","16","Yes","No","No"
"133","9.54","125","87","9","232","136","Good","72","10","Yes","Yes","Yes"
"134","7.62","132","98","2","265","97","Bad","62","12","Yes","Yes","No"
"135","3.67","132","31","0","327","131","Medium","76","16","Yes","No","No"
"136","6.44","96","94","14","384","120","Medium","36","18","No","Yes","No"
"137","5.17","131","75","0","10","120","Bad","31","18","No","No","No"
"138","6.52","128","42","0","436","118","Medium","80","11","Yes","No","No"
"139","10.27","125","103","12","371","109","Medium","44","10","Yes","Yes","Yes"
"140","12.3","146","62","10","310","94","Medium","30","13","No","Yes","Yes"
"141","6.03","133","60","10","277","129","Medium","45","18","Yes","Yes","No"
"142","6.53","140","42","0","331","131","Bad","28","15","Yes","No","No"
"143","7.44","124","84","0","300","104","Medium","77","15","Yes","No","No"
"144","0.53","122","88","7","36","159","Bad","28","17","Yes","Yes","No"
"145","9.09","132","68","0","264","123","Good","34","11","No","No","Yes"
"146","8.77","144","63","11","27","117","Medium","47","17","Yes","Yes","Yes"
"147","3.9","114","83","0","412","131","Bad","39","14","Yes","No","No"
"148","10.51","140","54","9","402","119","Good","41","16","No","Yes","Yes"
"149","7.56","110","119","0","384","97","Medium","72","14","No","Yes","No"
"150","11.48","121","120","13","140","87","Medium","56","11","Yes","Yes","Yes"
"151","10.49","122","84","8","176","114","Good","57","10","No","Yes","Yes"
"152","10.77","111","58","17","407","103","Good","75","17","No","Yes","Yes"
"153","7.64","128","78","0","341","128","Good","45","13","No","No","No"
"154","5.93","150","36","7","488","150","Medium","25","17","No","Yes","No"
"155","6.89","129","69","10","289","110","Medium","50","16","No","Yes","No"
"156","7.71","98","72","0","59","69","Medium","65","16","Yes","No","No"
"157","7.49","146","34","0","220","157","Good","51","16","Yes","No","No"
"158","10.21","121","58","8","249","90","Medium","48","13","No","Yes","Yes"
"159","12.53","142","90","1","189","112","Good","39","10","No","Yes","Yes"
"160","9.32","119","60","0","372","70","Bad","30","18","No","No","Yes"
"161","4.67","111","28","0","486","111","Medium","29","12","No","No","No"
"162","2.93","143","21","5","81","160","Medium","67","12","No","Yes","No"
"163","3.63","122","74","0","424","149","Medium","51","13","Yes","No","No"
"164","5.68","130","64","0","40","106","Bad","39","17","No","No","No"
"165","8.22","148","64","0","58","141","Medium","27","13","No","Yes","Yes"
"166","0.37","147","58","7","100","191","Bad","27","15","Yes","Yes","No"
"167","6.71","119","67","17","151","137","Medium","55","11","Yes","Yes","No"
"168","6.71","106","73","0","216","93","Medium","60","13","Yes","No","No"
"169","7.3","129","89","0","425","117","Medium","45","10","Yes","No","No"
"170","11.48","104","41","15","492","77","Good","73","18","Yes","Yes","Yes"
"171","8.01","128","39","12","356","118","Medium","71","10","Yes","Yes","Yes"
"172","12.49","93","106","12","416","55","Medium","75","15","Yes","Yes","Yes"
"173","9.03","104","102","13","123","110","Good","35","16","Yes","Yes","Yes"
"174","6.38","135","91","5","207","128","Medium","66","18","Yes","Yes","No"
"175","0","139","24","0","358","185","Medium","79","15","No","No","No"
"176","7.54","115","89","0","38","122","Medium","25","12","Yes","No","No"
"177","5.61","138","107","9","480","154","Medium","47","11","No","Yes","No"
"178","10.48","138","72","0","148","94","Medium","27","17","Yes","Yes","Yes"
"179","10.66","104","71","14","89","81","Medium","25","14","No","Yes","Yes"
"180","7.78","144","25","3","70","116","Medium","77","18","Yes","Yes","No"
"181","4.94","137","112","15","434","149","Bad","66","13","Yes","Yes","No"
"182","7.43","121","83","0","79","91","Medium","68","11","Yes","No","No"
"183","4.74","137","60","4","230","140","Bad","25","13","Yes","No","No"
"184","5.32","118","74","6","426","102","Medium","80","18","Yes","Yes","No"
"185","9.95","132","33","7","35","97","Medium","60","11","No","Yes","Yes"
"186","10.07","130","100","11","449","107","Medium","64","10","Yes","Yes","Yes"
"187","8.68","120","51","0","93","86","Medium","46","17","No","No","Yes"
"188","6.03","117","32","0","142","96","Bad","62","17","Yes","No","No"
"189","8.07","116","37","0","426","90","Medium","76","15","Yes","No","Yes"
"190","12.11","118","117","18","509","104","Medium","26","15","No","Yes","Yes"
"191","8.79","130","37","13","297","101","Medium","37","13","No","Yes","Yes"
"192","6.67","156","42","13","170","173","Good","74","14","Yes","Yes","No"
"193","7.56","108","26","0","408","93","Medium","56","14","No","No","No"
"194","13.28","139","70","7","71","96","Good","61","10","Yes","Yes","Yes"
"195","7.23","112","98","18","481","128","Medium","45","11","Yes","Yes","No"
"196","4.19","117","93","4","420","112","Bad","66","11","Yes","Yes","No"
"197","4.1","130","28","6","410","133","Bad","72","16","Yes","Yes","No"
"198","2.52","124","61","0","333","138","Medium","76","16","Yes","No","No"
"199","3.62","112","80","5","500","128","Medium","69","10","Yes","Yes","No"
"200","6.42","122","88","5","335","126","Medium","64","14","Yes","Yes","No"
"201","5.56","144","92","0","349","146","Medium","62","12","No","No","No"
"202","5.94","138","83","0","139","134","Medium","54","18","Yes","No","No"
"203","4.1","121","78","4","413","130","Bad","46","10","No","Yes","No"
"204","2.05","131","82","0","132","157","Bad","25","14","Yes","No","No"
"205","8.74","155","80","0","237","124","Medium","37","14","Yes","No","Yes"
"206","5.68","113","22","1","317","132","Medium","28","12","Yes","No","No"
"207","4.97","162","67","0","27","160","Medium","77","17","Yes","Yes","No"
"208","8.19","111","105","0","466","97","Bad","61","10","No","No","Yes"
"209","7.78","86","54","0","497","64","Bad","33","12","Yes","No","No"
"210","3.02","98","21","11","326","90","Bad","76","11","No","Yes","No"
"211","4.36","125","41","2","357","123","Bad","47","14","No","Yes","No"
"212","9.39","117","118","14","445","120","Medium","32","15","Yes","Yes","Yes"
"213","12.04","145","69","19","501","105","Medium","45","11","Yes","Yes","Yes"
"214","8.23","149","84","5","220","139","Medium","33","10","Yes","Yes","Yes"
"215","4.83","115","115","3","48","107","Medium","73","18","Yes","Yes","No"
"216","2.34","116","83","15","170","144","Bad","71","11","Yes","Yes","No"
"217","5.73","141","33","0","243","144","Medium","34","17","Yes","No","No"
"218","4.34","106","44","0","481","111","Medium","70","14","No","No","No"
"219","9.7","138","61","12","156","120","Medium","25","14","Yes","Yes","Yes"
"220","10.62","116","79","19","359","116","Good","58","17","Yes","Yes","Yes"
"221","10.59","131","120","15","262","124","Medium","30","10","Yes","Yes","Yes"
"222","6.43","124","44","0","125","107","Medium","80","11","Yes","No","No"
"223","7.49","136","119","6","178","145","Medium","35","13","Yes","Yes","No"
"224","3.45","110","45","9","276","125","Medium","62","14","Yes","Yes","No"
"225","4.1","134","82","0","464","141","Medium","48","13","No","No","No"
"226","6.68","107","25","0","412","82","Bad","36","14","Yes","No","No"
"227","7.8","119","33","0","245","122","Good","56","14","Yes","No","No"
"228","8.69","113","64","10","68","101","Medium","57","16","Yes","Yes","Yes"
"229","5.4","149","73","13","381","163","Bad","26","11","No","Yes","No"
"230","11.19","98","104","0","404","72","Medium","27","18","No","No","Yes"
"231","5.16","115","60","0","119","114","Bad","38","14","No","No","No"
"232","8.09","132","69","0","123","122","Medium","27","11","No","No","Yes"
"233","13.14","137","80","10","24","105","Good","61","15","Yes","Yes","Yes"
"234","8.65","123","76","18","218","120","Medium","29","14","No","Yes","Yes"
"235","9.43","115","62","11","289","129","Good","56","16","No","Yes","Yes"
"236","5.53","126","32","8","95","132","Medium","50","17","Yes","Yes","No"
"237","9.32","141","34","16","361","108","Medium","69","10","Yes","Yes","Yes"
"238","9.62","151","28","8","499","135","Medium","48","10","Yes","Yes","Yes"
"239","7.36","121","24","0","200","133","Good","73","13","Yes","No","No"
"240","3.89","123","105","0","149","118","Bad","62","16","Yes","Yes","No"
"241","10.31","159","80","0","362","121","Medium","26","18","Yes","No","Yes"
"242","12.01","136","63","0","160","94","Medium","38","12","Yes","No","Yes"
"243","4.68","124","46","0","199","135","Medium","52","14","No","No","No"
"244","7.82","124","25","13","87","110","Medium","57","10","Yes","Yes","No"
"245","8.78","130","30","0","391","100","Medium","26","18","Yes","No","Yes"
"246","10","114","43","0","199","88","Good","57","10","No","Yes","Yes"
"247","6.9","120","56","20","266","90","Bad","78","18","Yes","Yes","No"
"248","5.04","123","114","0","298","151","Bad","34","16","Yes","No","No"
"249","5.36","111","52","0","12","101","Medium","61","11","Yes","Yes","No"
"250","5.05","125","67","0","86","117","Bad","65","11","Yes","No","No"
"251","9.16","137","105","10","435","156","Good","72","14","Yes","Yes","Yes"
"252","3.72","139","111","5","310","132","Bad","62","13","Yes","Yes","No"
"253","8.31","133","97","0","70","117","Medium","32","16","Yes","No","Yes"
"254","5.64","124","24","5","288","122","Medium","57","12","No","Yes","No"
"255","9.58","108","104","23","353","129","Good","37","17","Yes","Yes","Yes"
"256","7.71","123","81","8","198","81","Bad","80","15","Yes","Yes","No"
"257","4.2","147","40","0","277","144","Medium","73","10","Yes","No","No"
"258","8.67","125","62","14","477","112","Medium","80","13","Yes","Yes","Yes"
"259","3.47","108","38","0","251","81","Bad","72","14","No","No","No"
"260","5.12","123","36","10","467","100","Bad","74","11","No","Yes","No"
"261","7.67","129","117","8","400","101","Bad","36","10","Yes","Yes","No"
"262","5.71","121","42","4","188","118","Medium","54","15","Yes","Yes","No"
"263","6.37","120","77","15","86","132","Medium","48","18","Yes","Yes","No"
"264","7.77","116","26","6","434","115","Medium","25","17","Yes","Yes","No"
"265","6.95","128","29","5","324","159","Good","31","15","Yes","Yes","No"
"266","5.31","130","35","10","402","129","Bad","39","17","Yes","Yes","No"
"267","9.1","128","93","12","343","112","Good","73","17","No","Yes","Yes"
"268","5.83","134","82","7","473","112","Bad","51","12","No","Yes","No"
"269","6.53","123","57","0","66","105","Medium","39","11","Yes","No","No"
"270","5.01","159","69","0","438","166","Medium","46","17","Yes","No","No"
"271","11.99","119","26","0","284","89","Good","26","10","Yes","No","Yes"
"272","4.55","111","56","0","504","110","Medium","62","16","Yes","No","No"
"273","12.98","113","33","0","14","63","Good","38","12","Yes","No","Yes"
"274","10.04","116","106","8","244","86","Medium","58","12","Yes","Yes","Yes"
"275","7.22","135","93","2","67","119","Medium","34","11","Yes","Yes","No"
"276","6.67","107","119","11","210","132","Medium","53","11","Yes","Yes","No"
"277","6.93","135","69","14","296","130","Medium","73","15","Yes","Yes","No"
"278","7.8","136","48","12","326","125","Medium","36","16","Yes","Yes","No"
"279","7.22","114","113","2","129","151","Good","40","15","No","Yes","No"
"280","3.42","141","57","13","376","158","Medium","64","18","Yes","Yes","No"
"281","2.86","121","86","10","496","145","Bad","51","10","Yes","Yes","No"
"282","11.19","122","69","7","303","105","Good","45","16","No","Yes","Yes"
"283","7.74","150","96","0","80","154","Good","61","11","Yes","No","No"
"284","5.36","135","110","0","112","117","Medium","80","16","No","No","No"
"285","6.97","106","46","11","414","96","Bad","79","17","No","No","No"
"286","7.6","146","26","11","261","131","Medium","39","10","Yes","Yes","No"
"287","7.53","117","118","11","429","113","Medium","67","18","No","Yes","No"
"288","6.88","95","44","4","208","72","Bad","44","17","Yes","Yes","No"
"289","6.98","116","40","0","74","97","Medium","76","15","No","No","No"
"290","8.75","143","77","25","448","156","Medium","43","17","Yes","Yes","Yes"
"291","9.49","107","111","14","400","103","Medium","41","11","No","Yes","Yes"
"292","6.64","118","70","0","106","89","Bad","39","17","Yes","No","No"
"293","11.82","113","66","16","322","74","Good","76","15","Yes","Yes","Yes"
"294","11.28","123","84","0","74","89","Good","59","10","Yes","No","Yes"
"295","12.66","148","76","3","126","99","Good","60","11","Yes","Yes","Yes"
"296","4.21","118","35","14","502","137","Medium","79","10","No","Yes","No"
"297","8.21","127","44","13","160","123","Good","63","18","Yes","Yes","Yes"
"298","3.07","118","83","13","276","104","Bad","75","10","Yes","Yes","No"
"299","10.98","148","63","0","312","130","Good","63","15","Yes","No","Yes"
"300","9.4","135","40","17","497","96","Medium","54","17","No","Yes","Yes"
"301","8.57","116","78","1","158","99","Medium","45","11","Yes","Yes","Yes"
"302","7.41","99","93","0","198","87","Medium","57","16","Yes","Yes","No"
"303","5.28","108","77","13","388","110","Bad","74","14","Yes","Yes","No"
"304","10.01","133","52","16","290","99","Medium","43","11","Yes","Yes","Yes"
"305","11.93","123","98","12","408","134","Good","29","10","Yes","Yes","Yes"
"306","8.03","115","29","26","394","132","Medium","33","13","Yes","Yes","Yes"
"307","4.78","131","32","1","85","133","Medium","48","12","Yes","Yes","No"
"308","5.9","138","92","0","13","120","Bad","61","12","Yes","No","No"
"309","9.24","126","80","19","436","126","Medium","52","10","Yes","Yes","Yes"
"310","11.18","131","111","13","33","80","Bad","68","18","Yes","Yes","Yes"
"311","9.53","175","65","29","419","166","Medium","53","12","Yes","Yes","Yes"
"312","6.15","146","68","12","328","132","Bad","51","14","Yes","Yes","No"
"313","6.8","137","117","5","337","135","Bad","38","10","Yes","Yes","No"
"314","9.33","103","81","3","491","54","Medium","66","13","Yes","No","Yes"
"315","7.72","133","33","10","333","129","Good","71","14","Yes","Yes","No"
"316","6.39","131","21","8","220","171","Good","29","14","Yes","Yes","No"
"317","15.63","122","36","5","369","72","Good","35","10","Yes","Yes","Yes"
"318","6.41","142","30","0","472","136","Good","80","15","No","No","No"
"319","10.08","116","72","10","456","130","Good","41","14","No","Yes","Yes"
"320","6.97","127","45","19","459","129","Medium","57","11","No","Yes","No"
"321","5.86","136","70","12","171","152","Medium","44","18","Yes","Yes","No"
"322","7.52","123","39","5","499","98","Medium","34","15","Yes","No","No"
"323","9.16","140","50","10","300","139","Good","60","15","Yes","Yes","Yes"
"324","10.36","107","105","18","428","103","Medium","34","12","Yes","Yes","Yes"
"325","2.66","136","65","4","133","150","Bad","53","13","Yes","Yes","No"
"326","11.7","144","69","11","131","104","Medium","47","11","Yes","Yes","Yes"
"327","4.69","133","30","0","152","122","Medium","53","17","Yes","No","No"
"328","6.23","112","38","17","316","104","Medium","80","16","Yes","Yes","No"
"329","3.15","117","66","1","65","111","Bad","55","11","Yes","Yes","No"
"330","11.27","100","54","9","433","89","Good","45","12","Yes","Yes","Yes"
"331","4.99","122","59","0","501","112","Bad","32","14","No","No","No"
"332","10.1","135","63","15","213","134","Medium","32","10","Yes","Yes","Yes"
"333","5.74","106","33","20","354","104","Medium","61","12","Yes","Yes","No"
"334","5.87","136","60","7","303","147","Medium","41","10","Yes","Yes","No"
"335","7.63","93","117","9","489","83","Bad","42","13","Yes","Yes","No"
"336","6.18","120","70","15","464","110","Medium","72","15","Yes","Yes","No"
"337","5.17","138","35","6","60","143","Bad","28","18","Yes","No","No"
"338","8.61","130","38","0","283","102","Medium","80","15","Yes","No","Yes"
"339","5.97","112","24","0","164","101","Medium","45","11","Yes","No","No"
"340","11.54","134","44","4","219","126","Good","44","15","Yes","Yes","Yes"
"341","7.5","140","29","0","105","91","Bad","43","16","Yes","No","No"
"342","7.38","98","120","0","268","93","Medium","72","10","No","No","No"
"343","7.81","137","102","13","422","118","Medium","71","10","No","Yes","No"
"344","5.99","117","42","10","371","121","Bad","26","14","Yes","Yes","No"
"345","8.43","138","80","0","108","126","Good","70","13","No","Yes","Yes"
"346","4.81","121","68","0","279","149","Good","79","12","Yes","No","No"
"347","8.97","132","107","0","144","125","Medium","33","13","No","No","Yes"
"348","6.88","96","39","0","161","112","Good","27","14","No","No","No"
"349","12.57","132","102","20","459","107","Good","49","11","Yes","Yes","Yes"
"350","9.32","134","27","18","467","96","Medium","49","14","No","Yes","Yes"
"351","8.64","111","101","17","266","91","Medium","63","17","No","Yes","Yes"
"352","10.44","124","115","16","458","105","Medium","62","16","No","Yes","Yes"
"353","13.44","133","103","14","288","122","Good","61","17","Yes","Yes","Yes"
"354","9.45","107","67","12","430","92","Medium","35","12","No","Yes","Yes"
"355","5.3","133","31","1","80","145","Medium","42","18","Yes","Yes","No"
"356","7.02","130","100","0","306","146","Good","42","11","Yes","No","No"
"357","3.58","142","109","0","111","164","Good","72","12","Yes","No","No"
"358","13.36","103","73","3","276","72","Medium","34","15","Yes","Yes","Yes"
"359","4.17","123","96","10","71","118","Bad","69","11","Yes","Yes","No"
"360","3.13","130","62","11","396","130","Bad","66","14","Yes","Yes","No"
"361","8.77","118","86","7","265","114","Good","52","15","No","Yes","Yes"
"362","8.68","131","25","10","183","104","Medium","56","15","No","Yes","Yes"
"363","5.25","131","55","0","26","110","Bad","79","12","Yes","Yes","No"
"364","10.26","111","75","1","377","108","Good","25","12","Yes","No","Yes"
"365","10.5","122","21","16","488","131","Good","30","14","Yes","Yes","Yes"
"366","6.53","154","30","0","122","162","Medium","57","17","No","No","No"
"367","5.98","124","56","11","447","134","Medium","53","12","No","Yes","No"
"368","14.37","95","106","0","256","53","Good","52","17","Yes","No","Yes"
"369","10.71","109","22","10","348","79","Good","74","14","No","Yes","Yes"
"370","10.26","135","100","22","463","122","Medium","36","14","Yes","Yes","Yes"
"371","7.68","126","41","22","403","119","Bad","42","12","Yes","Yes","No"
"372","9.08","152","81","0","191","126","Medium","54","16","Yes","No","Yes"
"373","7.8","121","50","0","508","98","Medium","65","11","No","No","No"
"374","5.58","137","71","0","402","116","Medium","78","17","Yes","No","No"
"375","9.44","131","47","7","90","118","Medium","47","12","Yes","Yes","Yes"
"376","7.9","132","46","4","206","124","Medium","73","11","Yes","No","No"
"377","16.27","141","60","19","319","92","Good","44","11","Yes","Yes","Yes"
"378","6.81","132","61","0","263","125","Medium","41","12","No","No","No"
"379","6.11","133","88","3","105","119","Medium","79","12","Yes","Yes","No"
"380","5.81","125","111","0","404","107","Bad","54","15","Yes","No","No"
"381","9.64","106","64","10","17","89","Medium","68","17","Yes","Yes","Yes"
"382","3.9","124","65","21","496","151","Bad","77","13","Yes","Yes","No"
"383","4.95","121","28","19","315","121","Medium","66","14","Yes","Yes","No"
"384","9.35","98","117","0","76","68","Medium","63","10","Yes","No","Yes"
"385","12.85","123","37","15","348","112","Good","28","12","Yes","Yes","Yes"
"386","5.87","131","73","13","455","132","Medium","62","17","Yes","Yes","No"
"387","5.32","152","116","0","170","160","Medium","39","16","Yes","No","No"
"388","8.67","142","73","14","238","115","Medium","73","14","No","Yes","Yes"
"389","8.14","135","89","11","245","78","Bad","79","16","Yes","Yes","Yes"
"390","8.44","128","42","8","328","107","Medium","35","12","Yes","Yes","Yes"
"391","5.47","108","75","9","61","111","Medium","67","12","Yes","Yes","No"
"392","6.1","153","63","0","49","124","Bad","56","16","Yes","No","No"
"393","4.53","129","42","13","315","130","Bad","34","13","Yes","Yes","No"
"394","5.57","109","51","10","26","120","Medium","30","17","No","Yes","No"
"395","5.35","130","58","19","366","139","Bad","33","16","Yes","Yes","No"
"396","12.57","138","108","17","203","128","Good","33","14","Yes","Yes","Yes"
"397","6.14","139","23","3","37","120","Medium","55","11","No","Yes","No"
"398","7.41","162","26","12","368","159","Medium","40","18","Yes","Yes","No"
"399","5.94","100","79","7","284","95","Bad","50","12","Yes","Yes","No"
"400","9.71","134","37","0","27","120","Good","49","16","Yes","Yes","Yes"


================================================
File: tests/data_examples/data_full_output_manifest/in/tables/sample_output.csv.manifest
================================================
{
  "destination": "out.c-adform_masterdata-processor-test.sample_output",
  "columns": [
    "x",
    "Sales",
    "CompPrice",
    "Income",
    "Advertising",
    "Population",
    "Price",
    "ShelveLoc",
    "Age",
    "Education",
    "Urban",
    "US",
    "High"
  ],
  "incremental": true,
  "primary_key": [
    "x"
  ],
  "write_always": true,
  "delimiter": "\t",
  "enclosure": "'",
  "column_metadata": {
         "x": [
             {
                 "key": "foo",
                 "value": "gogo"
             }
         ]
     },
  "delete_where_column": "Advertising",
  "delete_where_values": ["Video", "Search"],
  "delete_where_operator": "eq"
}

================================================
File: tests/data_examples/data_new_manifest/config.json
================================================
{
    "storage": {
        "input": {
            "files": [],
            "tables": [
                {
                    "source": "in.c-main.test",
                    "destination": "sample.csv",
                    "columns": [],
                    "where_values": [],
                    "where_operator": "eq",
                    "column_types": [
                        {
                            "source": "Sales",
                            "type": "VARCHAR",
                            "destination": "id",
                            "length": "255",
                            "nullable": false,
                            "convert_empty_values_to_null": false
                        }
                    ]
                }
            ]
        }       

    },
    "parameters": {

    }
   
}


================================================
File: tests/data_examples/data_new_manifest/in/state.json
================================================
{
  "test_state": 1234
}

================================================
File: tests/data_examples/data_new_manifest/in/tables/sample.csv
================================================
"x","Sales","CompPrice","Income","Advertising","Population","Price","ShelveLoc","Age","Education","Urban","US","High"
"1","9.5","138","73","11","276","120","Bad","42","17","Yes","Yes","Yes"
"2","11.22","111","48","16","260","83","Good","65","10","Yes","Yes","Yes"
"3","10.06","113","35","10","269","80","Medium","59","12","Yes","Yes","Yes"
"4","7.4","117","100","4","466","97","Medium","55","14","Yes","Yes","No"
"5","4.15","141","64","3","340","128","Bad","38","13","Yes","No","No"
"6","10.81","124","113","13","501","72","Bad","78","16","No","Yes","Yes"
"7","6.63","115","105","0","45","108","Medium","71","15","Yes","No","No"
"8","11.85","136","81","15","425","120","Good","67","10","Yes","Yes","Yes"
"9","6.54","132","110","0","108","124","Medium","76","10","No","No","No"
"10","4.69","132","113","0","131","124","Medium","76","17","No","Yes","No"
"11","9.01","121","78","9","150","100","Bad","26","10","No","Yes","Yes"
"12","11.96","117","94","4","503","94","Good","50","13","Yes","Yes","Yes"
"13","3.98","122","35","2","393","136","Medium","62","18","Yes","No","No"
"14","10.96","115","28","11","29","86","Good","53","18","Yes","Yes","Yes"
"15","11.17","107","117","11","148","118","Good","52","18","Yes","Yes","Yes"
"16","8.71","149","95","5","400","144","Medium","76","18","No","No","Yes"
"17","7.58","118","32","0","284","110","Good","63","13","Yes","No","No"
"18","12.29","147","74","13","251","131","Good","52","10","Yes","Yes","Yes"
"19","13.91","110","110","0","408","68","Good","46","17","No","Yes","Yes"
"20","8.73","129","76","16","58","121","Medium","69","12","Yes","Yes","Yes"
"21","6.41","125","90","2","367","131","Medium","35","18","Yes","Yes","No"
"22","12.13","134","29","12","239","109","Good","62","18","No","Yes","Yes"
"23","5.08","128","46","6","497","138","Medium","42","13","Yes","No","No"
"24","5.87","121","31","0","292","109","Medium","79","10","Yes","No","No"
"25","10.14","145","119","16","294","113","Bad","42","12","Yes","Yes","Yes"
"26","14.9","139","32","0","176","82","Good","54","11","No","No","Yes"
"27","8.33","107","115","11","496","131","Good","50","11","No","Yes","Yes"
"28","5.27","98","118","0","19","107","Medium","64","17","Yes","No","No"
"29","2.99","103","74","0","359","97","Bad","55","11","Yes","Yes","No"
"30","7.81","104","99","15","226","102","Bad","58","17","Yes","Yes","No"
"31","13.55","125","94","0","447","89","Good","30","12","Yes","No","Yes"
"32","8.25","136","58","16","241","131","Medium","44","18","Yes","Yes","Yes"
"33","6.2","107","32","12","236","137","Good","64","10","No","Yes","No"
"34","8.77","114","38","13","317","128","Good","50","16","Yes","Yes","Yes"
"35","2.67","115","54","0","406","128","Medium","42","17","Yes","Yes","No"
"36","11.07","131","84","11","29","96","Medium","44","17","No","Yes","Yes"
"37","8.89","122","76","0","270","100","Good","60","18","No","No","Yes"
"38","4.95","121","41","5","412","110","Medium","54","10","Yes","Yes","No"
"39","6.59","109","73","0","454","102","Medium","65","15","Yes","No","No"
"40","3.24","130","60","0","144","138","Bad","38","10","No","No","No"
"41","2.07","119","98","0","18","126","Bad","73","17","No","No","No"
"42","7.96","157","53","0","403","124","Bad","58","16","Yes","No","No"
"43","10.43","77","69","0","25","24","Medium","50","18","Yes","No","Yes"
"44","4.12","123","42","11","16","134","Medium","59","13","Yes","Yes","No"
"45","4.16","85","79","6","325","95","Medium","69","13","Yes","Yes","No"
"46","4.56","141","63","0","168","135","Bad","44","12","Yes","Yes","No"
"47","12.44","127","90","14","16","70","Medium","48","15","No","Yes","Yes"
"48","4.38","126","98","0","173","108","Bad","55","16","Yes","No","No"
"49","3.91","116","52","0","349","98","Bad","69","18","Yes","No","No"
"50","10.61","157","93","0","51","149","Good","32","17","Yes","No","Yes"
"51","1.42","99","32","18","341","108","Bad","80","16","Yes","Yes","No"
"52","4.42","121","90","0","150","108","Bad","75","16","Yes","No","No"
"53","7.91","153","40","3","112","129","Bad","39","18","Yes","Yes","No"
"54","6.92","109","64","13","39","119","Medium","61","17","Yes","Yes","No"
"55","4.9","134","103","13","25","144","Medium","76","17","No","Yes","No"
"56","6.85","143","81","5","60","154","Medium","61","18","Yes","Yes","No"
"57","11.91","133","82","0","54","84","Medium","50","17","Yes","No","Yes"
"58","0.91","93","91","0","22","117","Bad","75","11","Yes","No","No"
"59","5.42","103","93","15","188","103","Bad","74","16","Yes","Yes","No"
"60","5.21","118","71","4","148","114","Medium","80","13","Yes","No","No"
"61","8.32","122","102","19","469","123","Bad","29","13","Yes","Yes","Yes"
"62","7.32","105","32","0","358","107","Medium","26","13","No","No","No"
"63","1.82","139","45","0","146","133","Bad","77","17","Yes","Yes","No"
"64","8.47","119","88","10","170","101","Medium","61","13","Yes","Yes","Yes"
"65","7.8","100","67","12","184","104","Medium","32","16","No","Yes","No"
"66","4.9","122","26","0","197","128","Medium","55","13","No","No","No"
"67","8.85","127","92","0","508","91","Medium","56","18","Yes","No","Yes"
"68","9.01","126","61","14","152","115","Medium","47","16","Yes","Yes","Yes"
"69","13.39","149","69","20","366","134","Good","60","13","Yes","Yes","Yes"
"70","7.99","127","59","0","339","99","Medium","65","12","Yes","No","No"
"71","9.46","89","81","15","237","99","Good","74","12","Yes","Yes","Yes"
"72","6.5","148","51","16","148","150","Medium","58","17","No","Yes","No"
"73","5.52","115","45","0","432","116","Medium","25","15","Yes","No","No"
"74","12.61","118","90","10","54","104","Good","31","11","No","Yes","Yes"
"75","6.2","150","68","5","125","136","Medium","64","13","No","Yes","No"
"76","8.55","88","111","23","480","92","Bad","36","16","No","Yes","Yes"
"77","10.64","102","87","10","346","70","Medium","64","15","Yes","Yes","Yes"
"78","7.7","118","71","12","44","89","Medium","67","18","No","Yes","No"
"79","4.43","134","48","1","139","145","Medium","65","12","Yes","Yes","No"
"80","9.14","134","67","0","286","90","Bad","41","13","Yes","No","Yes"
"81","8.01","113","100","16","353","79","Bad","68","11","Yes","Yes","Yes"
"82","7.52","116","72","0","237","128","Good","70","13","Yes","No","No"
"83","11.62","151","83","4","325","139","Good","28","17","Yes","Yes","Yes"
"84","4.42","109","36","7","468","94","Bad","56","11","Yes","Yes","No"
"85","2.23","111","25","0","52","121","Bad","43","18","No","No","No"
"86","8.47","125","103","0","304","112","Medium","49","13","No","No","Yes"
"87","8.7","150","84","9","432","134","Medium","64","15","Yes","No","Yes"
"88","11.7","131","67","7","272","126","Good","54","16","No","Yes","Yes"
"89","6.56","117","42","7","144","111","Medium","62","10","Yes","Yes","No"
"90","7.95","128","66","3","493","119","Medium","45","16","No","No","No"
"91","5.33","115","22","0","491","103","Medium","64","11","No","No","No"
"92","4.81","97","46","11","267","107","Medium","80","15","Yes","Yes","No"
"93","4.53","114","113","0","97","125","Medium","29","12","Yes","No","No"
"94","8.86","145","30","0","67","104","Medium","55","17","Yes","No","Yes"
"95","8.39","115","97","5","134","84","Bad","55","11","Yes","Yes","Yes"
"96","5.58","134","25","10","237","148","Medium","59","13","Yes","Yes","No"
"97","9.48","147","42","10","407","132","Good","73","16","No","Yes","Yes"
"98","7.45","161","82","5","287","129","Bad","33","16","Yes","Yes","No"
"99","12.49","122","77","24","382","127","Good","36","16","No","Yes","Yes"
"100","4.88","121","47","3","220","107","Bad","56","16","No","Yes","No"
"101","4.11","113","69","11","94","106","Medium","76","12","No","Yes","No"
"102","6.2","128","93","0","89","118","Medium","34","18","Yes","No","No"
"103","5.3","113","22","0","57","97","Medium","65","16","No","No","No"
"104","5.07","123","91","0","334","96","Bad","78","17","Yes","Yes","No"
"105","4.62","121","96","0","472","138","Medium","51","12","Yes","No","No"
"106","5.55","104","100","8","398","97","Medium","61","11","Yes","Yes","No"
"107","0.16","102","33","0","217","139","Medium","70","18","No","No","No"
"108","8.55","134","107","0","104","108","Medium","60","12","Yes","No","Yes"
"109","3.47","107","79","2","488","103","Bad","65","16","Yes","No","No"
"110","8.98","115","65","0","217","90","Medium","60","17","No","No","Yes"
"111","9","128","62","7","125","116","Medium","43","14","Yes","Yes","Yes"
"112","6.62","132","118","12","272","151","Medium","43","14","Yes","Yes","No"
"113","6.67","116","99","5","298","125","Good","62","12","Yes","Yes","No"
"114","6.01","131","29","11","335","127","Bad","33","12","Yes","Yes","No"
"115","9.31","122","87","9","17","106","Medium","65","13","Yes","Yes","Yes"
"116","8.54","139","35","0","95","129","Medium","42","13","Yes","No","Yes"
"117","5.08","135","75","0","202","128","Medium","80","10","No","No","No"
"118","8.8","145","53","0","507","119","Medium","41","12","Yes","No","Yes"
"119","7.57","112","88","2","243","99","Medium","62","11","Yes","Yes","No"
"120","7.37","130","94","8","137","128","Medium","64","12","Yes","Yes","No"
"121","6.87","128","105","11","249","131","Medium","63","13","Yes","Yes","No"
"122","11.67","125","89","10","380","87","Bad","28","10","Yes","Yes","Yes"
"123","6.88","119","100","5","45","108","Medium","75","10","Yes","Yes","No"
"124","8.19","127","103","0","125","155","Good","29","15","No","Yes","Yes"
"125","8.87","131","113","0","181","120","Good","63","14","Yes","No","Yes"
"126","9.34","89","78","0","181","49","Medium","43","15","No","No","Yes"
"127","11.27","153","68","2","60","133","Good","59","16","Yes","Yes","Yes"
"128","6.52","125","48","3","192","116","Medium","51","14","Yes","Yes","No"
"129","4.96","133","100","3","350","126","Bad","55","13","Yes","Yes","No"
"130","4.47","143","120","7","279","147","Bad","40","10","No","Yes","No"
"131","8.41","94","84","13","497","77","Medium","51","12","Yes","Yes","Yes"
"132","6.5","108","69","3","208","94","Medium","77","16","Yes","No","No"
"133","9.54","125","87","9","232","136","Good","72","10","Yes","Yes","Yes"
"134","7.62","132","98","2","265","97","Bad","62","12","Yes","Yes","No"
"135","3.67","132","31","0","327","131","Medium","76","16","Yes","No","No"
"136","6.44","96","94","14","384","120","Medium","36","18","No","Yes","No"
"137","5.17","131","75","0","10","120","Bad","31","18","No","No","No"
"138","6.52","128","42","0","436","118","Medium","80","11","Yes","No","No"
"139","10.27","125","103","12","371","109","Medium","44","10","Yes","Yes","Yes"
"140","12.3","146","62","10","310","94","Medium","30","13","No","Yes","Yes"
"141","6.03","133","60","10","277","129","Medium","45","18","Yes","Yes","No"
"142","6.53","140","42","0","331","131","Bad","28","15","Yes","No","No"
"143","7.44","124","84","0","300","104","Medium","77","15","Yes","No","No"
"144","0.53","122","88","7","36","159","Bad","28","17","Yes","Yes","No"
"145","9.09","132","68","0","264","123","Good","34","11","No","No","Yes"
"146","8.77","144","63","11","27","117","Medium","47","17","Yes","Yes","Yes"
"147","3.9","114","83","0","412","131","Bad","39","14","Yes","No","No"
"148","10.51","140","54","9","402","119","Good","41","16","No","Yes","Yes"
"149","7.56","110","119","0","384","97","Medium","72","14","No","Yes","No"
"150","11.48","121","120","13","140","87","Medium","56","11","Yes","Yes","Yes"
"151","10.49","122","84","8","176","114","Good","57","10","No","Yes","Yes"
"152","10.77","111","58","17","407","103","Good","75","17","No","Yes","Yes"
"153","7.64","128","78","0","341","128","Good","45","13","No","No","No"
"154","5.93","150","36","7","488","150","Medium","25","17","No","Yes","No"
"155","6.89","129","69","10","289","110","Medium","50","16","No","Yes","No"
"156","7.71","98","72","0","59","69","Medium","65","16","Yes","No","No"
"157","7.49","146","34","0","220","157","Good","51","16","Yes","No","No"
"158","10.21","121","58","8","249","90","Medium","48","13","No","Yes","Yes"
"159","12.53","142","90","1","189","112","Good","39","10","No","Yes","Yes"
"160","9.32","119","60","0","372","70","Bad","30","18","No","No","Yes"
"161","4.67","111","28","0","486","111","Medium","29","12","No","No","No"
"162","2.93","143","21","5","81","160","Medium","67","12","No","Yes","No"
"163","3.63","122","74","0","424","149","Medium","51","13","Yes","No","No"
"164","5.68","130","64","0","40","106","Bad","39","17","No","No","No"
"165","8.22","148","64","0","58","141","Medium","27","13","No","Yes","Yes"
"166","0.37","147","58","7","100","191","Bad","27","15","Yes","Yes","No"
"167","6.71","119","67","17","151","137","Medium","55","11","Yes","Yes","No"
"168","6.71","106","73","0","216","93","Medium","60","13","Yes","No","No"
"169","7.3","129","89","0","425","117","Medium","45","10","Yes","No","No"
"170","11.48","104","41","15","492","77","Good","73","18","Yes","Yes","Yes"
"171","8.01","128","39","12","356","118","Medium","71","10","Yes","Yes","Yes"
"172","12.49","93","106","12","416","55","Medium","75","15","Yes","Yes","Yes"
"173","9.03","104","102","13","123","110","Good","35","16","Yes","Yes","Yes"
"174","6.38","135","91","5","207","128","Medium","66","18","Yes","Yes","No"
"175","0","139","24","0","358","185","Medium","79","15","No","No","No"
"176","7.54","115","89","0","38","122","Medium","25","12","Yes","No","No"
"177","5.61","138","107","9","480","154","Medium","47","11","No","Yes","No"
"178","10.48","138","72","0","148","94","Medium","27","17","Yes","Yes","Yes"
"179","10.66","104","71","14","89","81","Medium","25","14","No","Yes","Yes"
"180","7.78","144","25","3","70","116","Medium","77","18","Yes","Yes","No"
"181","4.94","137","112","15","434","149","Bad","66","13","Yes","Yes","No"
"182","7.43","121","83","0","79","91","Medium","68","11","Yes","No","No"
"183","4.74","137","60","4","230","140","Bad","25","13","Yes","No","No"
"184","5.32","118","74","6","426","102","Medium","80","18","Yes","Yes","No"
"185","9.95","132","33","7","35","97","Medium","60","11","No","Yes","Yes"
"186","10.07","130","100","11","449","107","Medium","64","10","Yes","Yes","Yes"
"187","8.68","120","51","0","93","86","Medium","46","17","No","No","Yes"
"188","6.03","117","32","0","142","96","Bad","62","17","Yes","No","No"
"189","8.07","116","37","0","426","90","Medium","76","15","Yes","No","Yes"
"190","12.11","118","117","18","509","104","Medium","26","15","No","Yes","Yes"
"191","8.79","130","37","13","297","101","Medium","37","13","No","Yes","Yes"
"192","6.67","156","42","13","170","173","Good","74","14","Yes","Yes","No"
"193","7.56","108","26","0","408","93","Medium","56","14","No","No","No"
"194","13.28","139","70","7","71","96","Good","61","10","Yes","Yes","Yes"
"195","7.23","112","98","18","481","128","Medium","45","11","Yes","Yes","No"
"196","4.19","117","93","4","420","112","Bad","66","11","Yes","Yes","No"
"197","4.1","130","28","6","410","133","Bad","72","16","Yes","Yes","No"
"198","2.52","124","61","0","333","138","Medium","76","16","Yes","No","No"
"199","3.62","112","80","5","500","128","Medium","69","10","Yes","Yes","No"
"200","6.42","122","88","5","335","126","Medium","64","14","Yes","Yes","No"
"201","5.56","144","92","0","349","146","Medium","62","12","No","No","No"
"202","5.94","138","83","0","139","134","Medium","54","18","Yes","No","No"
"203","4.1","121","78","4","413","130","Bad","46","10","No","Yes","No"
"204","2.05","131","82","0","132","157","Bad","25","14","Yes","No","No"
"205","8.74","155","80","0","237","124","Medium","37","14","Yes","No","Yes"
"206","5.68","113","22","1","317","132","Medium","28","12","Yes","No","No"
"207","4.97","162","67","0","27","160","Medium","77","17","Yes","Yes","No"
"208","8.19","111","105","0","466","97","Bad","61","10","No","No","Yes"
"209","7.78","86","54","0","497","64","Bad","33","12","Yes","No","No"
"210","3.02","98","21","11","326","90","Bad","76","11","No","Yes","No"
"211","4.36","125","41","2","357","123","Bad","47","14","No","Yes","No"
"212","9.39","117","118","14","445","120","Medium","32","15","Yes","Yes","Yes"
"213","12.04","145","69","19","501","105","Medium","45","11","Yes","Yes","Yes"
"214","8.23","149","84","5","220","139","Medium","33","10","Yes","Yes","Yes"
"215","4.83","115","115","3","48","107","Medium","73","18","Yes","Yes","No"
"216","2.34","116","83","15","170","144","Bad","71","11","Yes","Yes","No"
"217","5.73","141","33","0","243","144","Medium","34","17","Yes","No","No"
"218","4.34","106","44","0","481","111","Medium","70","14","No","No","No"
"219","9.7","138","61","12","156","120","Medium","25","14","Yes","Yes","Yes"
"220","10.62","116","79","19","359","116","Good","58","17","Yes","Yes","Yes"
"221","10.59","131","120","15","262","124","Medium","30","10","Yes","Yes","Yes"
"222","6.43","124","44","0","125","107","Medium","80","11","Yes","No","No"
"223","7.49","136","119","6","178","145","Medium","35","13","Yes","Yes","No"
"224","3.45","110","45","9","276","125","Medium","62","14","Yes","Yes","No"
"225","4.1","134","82","0","464","141","Medium","48","13","No","No","No"
"226","6.68","107","25","0","412","82","Bad","36","14","Yes","No","No"
"227","7.8","119","33","0","245","122","Good","56","14","Yes","No","No"
"228","8.69","113","64","10","68","101","Medium","57","16","Yes","Yes","Yes"
"229","5.4","149","73","13","381","163","Bad","26","11","No","Yes","No"
"230","11.19","98","104","0","404","72","Medium","27","18","No","No","Yes"
"231","5.16","115","60","0","119","114","Bad","38","14","No","No","No"
"232","8.09","132","69","0","123","122","Medium","27","11","No","No","Yes"
"233","13.14","137","80","10","24","105","Good","61","15","Yes","Yes","Yes"
"234","8.65","123","76","18","218","120","Medium","29","14","No","Yes","Yes"
"235","9.43","115","62","11","289","129","Good","56","16","No","Yes","Yes"
"236","5.53","126","32","8","95","132","Medium","50","17","Yes","Yes","No"
"237","9.32","141","34","16","361","108","Medium","69","10","Yes","Yes","Yes"
"238","9.62","151","28","8","499","135","Medium","48","10","Yes","Yes","Yes"
"239","7.36","121","24","0","200","133","Good","73","13","Yes","No","No"
"240","3.89","123","105","0","149","118","Bad","62","16","Yes","Yes","No"
"241","10.31","159","80","0","362","121","Medium","26","18","Yes","No","Yes"
"242","12.01","136","63","0","160","94","Medium","38","12","Yes","No","Yes"
"243","4.68","124","46","0","199","135","Medium","52","14","No","No","No"
"244","7.82","124","25","13","87","110","Medium","57","10","Yes","Yes","No"
"245","8.78","130","30","0","391","100","Medium","26","18","Yes","No","Yes"
"246","10","114","43","0","199","88","Good","57","10","No","Yes","Yes"
"247","6.9","120","56","20","266","90","Bad","78","18","Yes","Yes","No"
"248","5.04","123","114","0","298","151","Bad","34","16","Yes","No","No"
"249","5.36","111","52","0","12","101","Medium","61","11","Yes","Yes","No"
"250","5.05","125","67","0","86","117","Bad","65","11","Yes","No","No"
"251","9.16","137","105","10","435","156","Good","72","14","Yes","Yes","Yes"
"252","3.72","139","111","5","310","132","Bad","62","13","Yes","Yes","No"
"253","8.31","133","97","0","70","117","Medium","32","16","Yes","No","Yes"
"254","5.64","124","24","5","288","122","Medium","57","12","No","Yes","No"
"255","9.58","108","104","23","353","129","Good","37","17","Yes","Yes","Yes"
"256","7.71","123","81","8","198","81","Bad","80","15","Yes","Yes","No"
"257","4.2","147","40","0","277","144","Medium","73","10","Yes","No","No"
"258","8.67","125","62","14","477","112","Medium","80","13","Yes","Yes","Yes"
"259","3.47","108","38","0","251","81","Bad","72","14","No","No","No"
"260","5.12","123","36","10","467","100","Bad","74","11","No","Yes","No"
"261","7.67","129","117","8","400","101","Bad","36","10","Yes","Yes","No"
"262","5.71","121","42","4","188","118","Medium","54","15","Yes","Yes","No"
"263","6.37","120","77","15","86","132","Medium","48","18","Yes","Yes","No"
"264","7.77","116","26","6","434","115","Medium","25","17","Yes","Yes","No"
"265","6.95","128","29","5","324","159","Good","31","15","Yes","Yes","No"
"266","5.31","130","35","10","402","129","Bad","39","17","Yes","Yes","No"
"267","9.1","128","93","12","343","112","Good","73","17","No","Yes","Yes"
"268","5.83","134","82","7","473","112","Bad","51","12","No","Yes","No"
"269","6.53","123","57","0","66","105","Medium","39","11","Yes","No","No"
"270","5.01","159","69","0","438","166","Medium","46","17","Yes","No","No"
"271","11.99","119","26","0","284","89","Good","26","10","Yes","No","Yes"
"272","4.55","111","56","0","504","110","Medium","62","16","Yes","No","No"
"273","12.98","113","33","0","14","63","Good","38","12","Yes","No","Yes"
"274","10.04","116","106","8","244","86","Medium","58","12","Yes","Yes","Yes"
"275","7.22","135","93","2","67","119","Medium","34","11","Yes","Yes","No"
"276","6.67","107","119","11","210","132","Medium","53","11","Yes","Yes","No"
"277","6.93","135","69","14","296","130","Medium","73","15","Yes","Yes","No"
"278","7.8","136","48","12","326","125","Medium","36","16","Yes","Yes","No"
"279","7.22","114","113","2","129","151","Good","40","15","No","Yes","No"
"280","3.42","141","57","13","376","158","Medium","64","18","Yes","Yes","No"
"281","2.86","121","86","10","496","145","Bad","51","10","Yes","Yes","No"
"282","11.19","122","69","7","303","105","Good","45","16","No","Yes","Yes"
"283","7.74","150","96","0","80","154","Good","61","11","Yes","No","No"
"284","5.36","135","110","0","112","117","Medium","80","16","No","No","No"
"285","6.97","106","46","11","414","96","Bad","79","17","No","No","No"
"286","7.6","146","26","11","261","131","Medium","39","10","Yes","Yes","No"
"287","7.53","117","118","11","429","113","Medium","67","18","No","Yes","No"
"288","6.88","95","44","4","208","72","Bad","44","17","Yes","Yes","No"
"289","6.98","116","40","0","74","97","Medium","76","15","No","No","No"
"290","8.75","143","77","25","448","156","Medium","43","17","Yes","Yes","Yes"
"291","9.49","107","111","14","400","103","Medium","41","11","No","Yes","Yes"
"292","6.64","118","70","0","106","89","Bad","39","17","Yes","No","No"
"293","11.82","113","66","16","322","74","Good","76","15","Yes","Yes","Yes"
"294","11.28","123","84","0","74","89","Good","59","10","Yes","No","Yes"
"295","12.66","148","76","3","126","99","Good","60","11","Yes","Yes","Yes"
"296","4.21","118","35","14","502","137","Medium","79","10","No","Yes","No"
"297","8.21","127","44","13","160","123","Good","63","18","Yes","Yes","Yes"
"298","3.07","118","83","13","276","104","Bad","75","10","Yes","Yes","No"
"299","10.98","148","63","0","312","130","Good","63","15","Yes","No","Yes"
"300","9.4","135","40","17","497","96","Medium","54","17","No","Yes","Yes"
"301","8.57","116","78","1","158","99","Medium","45","11","Yes","Yes","Yes"
"302","7.41","99","93","0","198","87","Medium","57","16","Yes","Yes","No"
"303","5.28","108","77","13","388","110","Bad","74","14","Yes","Yes","No"
"304","10.01","133","52","16","290","99","Medium","43","11","Yes","Yes","Yes"
"305","11.93","123","98","12","408","134","Good","29","10","Yes","Yes","Yes"
"306","8.03","115","29","26","394","132","Medium","33","13","Yes","Yes","Yes"
"307","4.78","131","32","1","85","133","Medium","48","12","Yes","Yes","No"
"308","5.9","138","92","0","13","120","Bad","61","12","Yes","No","No"
"309","9.24","126","80","19","436","126","Medium","52","10","Yes","Yes","Yes"
"310","11.18","131","111","13","33","80","Bad","68","18","Yes","Yes","Yes"
"311","9.53","175","65","29","419","166","Medium","53","12","Yes","Yes","Yes"
"312","6.15","146","68","12","328","132","Bad","51","14","Yes","Yes","No"
"313","6.8","137","117","5","337","135","Bad","38","10","Yes","Yes","No"
"314","9.33","103","81","3","491","54","Medium","66","13","Yes","No","Yes"
"315","7.72","133","33","10","333","129","Good","71","14","Yes","Yes","No"
"316","6.39","131","21","8","220","171","Good","29","14","Yes","Yes","No"
"317","15.63","122","36","5","369","72","Good","35","10","Yes","Yes","Yes"
"318","6.41","142","30","0","472","136","Good","80","15","No","No","No"
"319","10.08","116","72","10","456","130","Good","41","14","No","Yes","Yes"
"320","6.97","127","45","19","459","129","Medium","57","11","No","Yes","No"
"321","5.86","136","70","12","171","152","Medium","44","18","Yes","Yes","No"
"322","7.52","123","39","5","499","98","Medium","34","15","Yes","No","No"
"323","9.16","140","50","10","300","139","Good","60","15","Yes","Yes","Yes"
"324","10.36","107","105","18","428","103","Medium","34","12","Yes","Yes","Yes"
"325","2.66","136","65","4","133","150","Bad","53","13","Yes","Yes","No"
"326","11.7","144","69","11","131","104","Medium","47","11","Yes","Yes","Yes"
"327","4.69","133","30","0","152","122","Medium","53","17","Yes","No","No"
"328","6.23","112","38","17","316","104","Medium","80","16","Yes","Yes","No"
"329","3.15","117","66","1","65","111","Bad","55","11","Yes","Yes","No"
"330","11.27","100","54","9","433","89","Good","45","12","Yes","Yes","Yes"
"331","4.99","122","59","0","501","112","Bad","32","14","No","No","No"
"332","10.1","135","63","15","213","134","Medium","32","10","Yes","Yes","Yes"
"333","5.74","106","33","20","354","104","Medium","61","12","Yes","Yes","No"
"334","5.87","136","60","7","303","147","Medium","41","10","Yes","Yes","No"
"335","7.63","93","117","9","489","83","Bad","42","13","Yes","Yes","No"
"336","6.18","120","70","15","464","110","Medium","72","15","Yes","Yes","No"
"337","5.17","138","35","6","60","143","Bad","28","18","Yes","No","No"
"338","8.61","130","38","0","283","102","Medium","80","15","Yes","No","Yes"
"339","5.97","112","24","0","164","101","Medium","45","11","Yes","No","No"
"340","11.54","134","44","4","219","126","Good","44","15","Yes","Yes","Yes"
"341","7.5","140","29","0","105","91","Bad","43","16","Yes","No","No"
"342","7.38","98","120","0","268","93","Medium","72","10","No","No","No"
"343","7.81","137","102","13","422","118","Medium","71","10","No","Yes","No"
"344","5.99","117","42","10","371","121","Bad","26","14","Yes","Yes","No"
"345","8.43","138","80","0","108","126","Good","70","13","No","Yes","Yes"
"346","4.81","121","68","0","279","149","Good","79","12","Yes","No","No"
"347","8.97","132","107","0","144","125","Medium","33","13","No","No","Yes"
"348","6.88","96","39","0","161","112","Good","27","14","No","No","No"
"349","12.57","132","102","20","459","107","Good","49","11","Yes","Yes","Yes"
"350","9.32","134","27","18","467","96","Medium","49","14","No","Yes","Yes"
"351","8.64","111","101","17","266","91","Medium","63","17","No","Yes","Yes"
"352","10.44","124","115","16","458","105","Medium","62","16","No","Yes","Yes"
"353","13.44","133","103","14","288","122","Good","61","17","Yes","Yes","Yes"
"354","9.45","107","67","12","430","92","Medium","35","12","No","Yes","Yes"
"355","5.3","133","31","1","80","145","Medium","42","18","Yes","Yes","No"
"356","7.02","130","100","0","306","146","Good","42","11","Yes","No","No"
"357","3.58","142","109","0","111","164","Good","72","12","Yes","No","No"
"358","13.36","103","73","3","276","72","Medium","34","15","Yes","Yes","Yes"
"359","4.17","123","96","10","71","118","Bad","69","11","Yes","Yes","No"
"360","3.13","130","62","11","396","130","Bad","66","14","Yes","Yes","No"
"361","8.77","118","86","7","265","114","Good","52","15","No","Yes","Yes"
"362","8.68","131","25","10","183","104","Medium","56","15","No","Yes","Yes"
"363","5.25","131","55","0","26","110","Bad","79","12","Yes","Yes","No"
"364","10.26","111","75","1","377","108","Good","25","12","Yes","No","Yes"
"365","10.5","122","21","16","488","131","Good","30","14","Yes","Yes","Yes"
"366","6.53","154","30","0","122","162","Medium","57","17","No","No","No"
"367","5.98","124","56","11","447","134","Medium","53","12","No","Yes","No"
"368","14.37","95","106","0","256","53","Good","52","17","Yes","No","Yes"
"369","10.71","109","22","10","348","79","Good","74","14","No","Yes","Yes"
"370","10.26","135","100","22","463","122","Medium","36","14","Yes","Yes","Yes"
"371","7.68","126","41","22","403","119","Bad","42","12","Yes","Yes","No"
"372","9.08","152","81","0","191","126","Medium","54","16","Yes","No","Yes"
"373","7.8","121","50","0","508","98","Medium","65","11","No","No","No"
"374","5.58","137","71","0","402","116","Medium","78","17","Yes","No","No"
"375","9.44","131","47","7","90","118","Medium","47","12","Yes","Yes","Yes"
"376","7.9","132","46","4","206","124","Medium","73","11","Yes","No","No"
"377","16.27","141","60","19","319","92","Good","44","11","Yes","Yes","Yes"
"378","6.81","132","61","0","263","125","Medium","41","12","No","No","No"
"379","6.11","133","88","3","105","119","Medium","79","12","Yes","Yes","No"
"380","5.81","125","111","0","404","107","Bad","54","15","Yes","No","No"
"381","9.64","106","64","10","17","89","Medium","68","17","Yes","Yes","Yes"
"382","3.9","124","65","21","496","151","Bad","77","13","Yes","Yes","No"
"383","4.95","121","28","19","315","121","Medium","66","14","Yes","Yes","No"
"384","9.35","98","117","0","76","68","Medium","63","10","Yes","No","Yes"
"385","12.85","123","37","15","348","112","Good","28","12","Yes","Yes","Yes"
"386","5.87","131","73","13","455","132","Medium","62","17","Yes","Yes","No"
"387","5.32","152","116","0","170","160","Medium","39","16","Yes","No","No"
"388","8.67","142","73","14","238","115","Medium","73","14","No","Yes","Yes"
"389","8.14","135","89","11","245","78","Bad","79","16","Yes","Yes","Yes"
"390","8.44","128","42","8","328","107","Medium","35","12","Yes","Yes","Yes"
"391","5.47","108","75","9","61","111","Medium","67","12","Yes","Yes","No"
"392","6.1","153","63","0","49","124","Bad","56","16","Yes","No","No"
"393","4.53","129","42","13","315","130","Bad","34","13","Yes","Yes","No"
"394","5.57","109","51","10","26","120","Medium","30","17","No","Yes","No"
"395","5.35","130","58","19","366","139","Bad","33","16","Yes","Yes","No"
"396","12.57","138","108","17","203","128","Good","33","14","Yes","Yes","Yes"
"397","6.14","139","23","3","37","120","Medium","55","11","No","Yes","No"
"398","7.41","162","26","12","368","159","Medium","40","18","Yes","Yes","No"
"399","5.94","100","79","7","284","95","Bad","50","12","Yes","Yes","No"
"400","9.71","134","37","0","27","120","Good","49","16","Yes","Yes","Yes"


================================================
File: tests/data_examples/data_new_manifest/in/tables/sample.csv.manifest
================================================
{
  "write_always": false,
  "delimiter": ",",
  "enclosure": "\"",
  "manifest_type": "out",
  "has_header": false,
  "schema": [
    {
      "name": "x",
      "data_type": {
        "base": {
          "type": "STRING"
        }
      },
      "nullable": true
    },
    {
      "name": "Sales",
      "data_type": {
        "base": {
          "type": "STRING"
        }
      },
      "nullable": true
    },
    {
      "name": "CompPrice",
      "data_type": {
        "base": {
          "type": "STRING"
        }
      },
      "nullable": true
    },
    {
      "name": "Income",
      "data_type": {
        "base": {
          "type": "STRING"
        }
      },
      "nullable": true
    },
    {
      "name": "Advertising",
      "data_type": {
        "base": {
          "type": "STRING"
        }
      },
      "nullable": true
    },
    {
      "name": "Population",
      "data_type": {
        "base": {
          "type": "STRING"
        }
      },
      "nullable": true
    },
    {
      "name": "Price",
      "data_type": {
        "base": {
          "type": "STRING"
        }
      },
      "nullable": true
    },
    {
      "name": "ShelveLoc",
      "data_type": {
        "base": {
          "type": "STRING"
        }
      },
      "nullable": true
    },
    {
      "name": "Age",
      "data_type": {
        "base": {
          "type": "STRING"
        }
      },
      "nullable": true
    },
    {
      "name": "Education",
      "data_type": {
        "base": {
          "type": "STRING"
        }
      },
      "nullable": true
    },
    {
      "name": "Urban",
      "data_type": {
        "base": {
          "type": "STRING"
        }
      },
      "nullable": true
    },
    {
      "name": "US",
      "data_type": {
        "base": {
          "type": "STRING"
        }
      },
      "nullable": true
    },
    {
      "name": "High",
      "data_type": {
        "base": {
          "type": "STRING"
        }
      },
      "nullable": true
    }
  ]
}

================================================
File: tests/data_examples/data_storage_parameter_data_types/config.json
================================================
{
  "storage": {
    "input": {
      "files": [],
      "tables": [
        {
          "source": "in.c-main.test",
          "destination": "sample.csv",
          "columns": [],
          "where_values": [],
          "where_operator": "eq",
          "column_types": [
            {
              "source": "Sales",
              "type": "VARCHAR",
              "destination": "id",
              "length": "255",
              "nullable": false,
              "convert_empty_values_to_null": false
            }
          ]
        }
      ]
    },
    "output": {
      "data_type_support": "none"
    }
  },
  "parameters": {
  }
}


================================================
File: tests/data_examples/data_storage_parameter_data_types/in/state.json
================================================
{
  "test_state": 1234
}

================================================
File: tests/data_examples/data_storage_parameter_data_types/in/tables/sample.csv
================================================
"x","Sales","CompPrice","Income","Advertising","Population","Price","ShelveLoc","Age","Education","Urban","US","High"
"1","9.5","138","73","11","276","120","Bad","42","17","Yes","Yes","Yes"
"2","11.22","111","48","16","260","83","Good","65","10","Yes","Yes","Yes"
"3","10.06","113","35","10","269","80","Medium","59","12","Yes","Yes","Yes"
"4","7.4","117","100","4","466","97","Medium","55","14","Yes","Yes","No"
"5","4.15","141","64","3","340","128","Bad","38","13","Yes","No","No"
"6","10.81","124","113","13","501","72","Bad","78","16","No","Yes","Yes"
"7","6.63","115","105","0","45","108","Medium","71","15","Yes","No","No"
"8","11.85","136","81","15","425","120","Good","67","10","Yes","Yes","Yes"
"9","6.54","132","110","0","108","124","Medium","76","10","No","No","No"
"10","4.69","132","113","0","131","124","Medium","76","17","No","Yes","No"
"11","9.01","121","78","9","150","100","Bad","26","10","No","Yes","Yes"
"12","11.96","117","94","4","503","94","Good","50","13","Yes","Yes","Yes"
"13","3.98","122","35","2","393","136","Medium","62","18","Yes","No","No"
"14","10.96","115","28","11","29","86","Good","53","18","Yes","Yes","Yes"
"15","11.17","107","117","11","148","118","Good","52","18","Yes","Yes","Yes"
"16","8.71","149","95","5","400","144","Medium","76","18","No","No","Yes"
"17","7.58","118","32","0","284","110","Good","63","13","Yes","No","No"
"18","12.29","147","74","13","251","131","Good","52","10","Yes","Yes","Yes"
"19","13.91","110","110","0","408","68","Good","46","17","No","Yes","Yes"
"20","8.73","129","76","16","58","121","Medium","69","12","Yes","Yes","Yes"
"21","6.41","125","90","2","367","131","Medium","35","18","Yes","Yes","No"
"22","12.13","134","29","12","239","109","Good","62","18","No","Yes","Yes"
"23","5.08","128","46","6","497","138","Medium","42","13","Yes","No","No"
"24","5.87","121","31","0","292","109","Medium","79","10","Yes","No","No"
"25","10.14","145","119","16","294","113","Bad","42","12","Yes","Yes","Yes"
"26","14.9","139","32","0","176","82","Good","54","11","No","No","Yes"
"27","8.33","107","115","11","496","131","Good","50","11","No","Yes","Yes"
"28","5.27","98","118","0","19","107","Medium","64","17","Yes","No","No"
"29","2.99","103","74","0","359","97","Bad","55","11","Yes","Yes","No"
"30","7.81","104","99","15","226","102","Bad","58","17","Yes","Yes","No"
"31","13.55","125","94","0","447","89","Good","30","12","Yes","No","Yes"
"32","8.25","136","58","16","241","131","Medium","44","18","Yes","Yes","Yes"
"33","6.2","107","32","12","236","137","Good","64","10","No","Yes","No"
"34","8.77","114","38","13","317","128","Good","50","16","Yes","Yes","Yes"
"35","2.67","115","54","0","406","128","Medium","42","17","Yes","Yes","No"
"36","11.07","131","84","11","29","96","Medium","44","17","No","Yes","Yes"
"37","8.89","122","76","0","270","100","Good","60","18","No","No","Yes"
"38","4.95","121","41","5","412","110","Medium","54","10","Yes","Yes","No"
"39","6.59","109","73","0","454","102","Medium","65","15","Yes","No","No"
"40","3.24","130","60","0","144","138","Bad","38","10","No","No","No"
"41","2.07","119","98","0","18","126","Bad","73","17","No","No","No"
"42","7.96","157","53","0","403","124","Bad","58","16","Yes","No","No"
"43","10.43","77","69","0","25","24","Medium","50","18","Yes","No","Yes"
"44","4.12","123","42","11","16","134","Medium","59","13","Yes","Yes","No"
"45","4.16","85","79","6","325","95","Medium","69","13","Yes","Yes","No"
"46","4.56","141","63","0","168","135","Bad","44","12","Yes","Yes","No"
"47","12.44","127","90","14","16","70","Medium","48","15","No","Yes","Yes"
"48","4.38","126","98","0","173","108","Bad","55","16","Yes","No","No"
"49","3.91","116","52","0","349","98","Bad","69","18","Yes","No","No"
"50","10.61","157","93","0","51","149","Good","32","17","Yes","No","Yes"
"51","1.42","99","32","18","341","108","Bad","80","16","Yes","Yes","No"
"52","4.42","121","90","0","150","108","Bad","75","16","Yes","No","No"
"53","7.91","153","40","3","112","129","Bad","39","18","Yes","Yes","No"
"54","6.92","109","64","13","39","119","Medium","61","17","Yes","Yes","No"
"55","4.9","134","103","13","25","144","Medium","76","17","No","Yes","No"
"56","6.85","143","81","5","60","154","Medium","61","18","Yes","Yes","No"
"57","11.91","133","82","0","54","84","Medium","50","17","Yes","No","Yes"
"58","0.91","93","91","0","22","117","Bad","75","11","Yes","No","No"
"59","5.42","103","93","15","188","103","Bad","74","16","Yes","Yes","No"
"60","5.21","118","71","4","148","114","Medium","80","13","Yes","No","No"
"61","8.32","122","102","19","469","123","Bad","29","13","Yes","Yes","Yes"
"62","7.32","105","32","0","358","107","Medium","26","13","No","No","No"
"63","1.82","139","45","0","146","133","Bad","77","17","Yes","Yes","No"
"64","8.47","119","88","10","170","101","Medium","61","13","Yes","Yes","Yes"
"65","7.8","100","67","12","184","104","Medium","32","16","No","Yes","No"
"66","4.9","122","26","0","197","128","Medium","55","13","No","No","No"
"67","8.85","127","92","0","508","91","Medium","56","18","Yes","No","Yes"
"68","9.01","126","61","14","152","115","Medium","47","16","Yes","Yes","Yes"
"69","13.39","149","69","20","366","134","Good","60","13","Yes","Yes","Yes"
"70","7.99","127","59","0","339","99","Medium","65","12","Yes","No","No"
"71","9.46","89","81","15","237","99","Good","74","12","Yes","Yes","Yes"
"72","6.5","148","51","16","148","150","Medium","58","17","No","Yes","No"
"73","5.52","115","45","0","432","116","Medium","25","15","Yes","No","No"
"74","12.61","118","90","10","54","104","Good","31","11","No","Yes","Yes"
"75","6.2","150","68","5","125","136","Medium","64","13","No","Yes","No"
"76","8.55","88","111","23","480","92","Bad","36","16","No","Yes","Yes"
"77","10.64","102","87","10","346","70","Medium","64","15","Yes","Yes","Yes"
"78","7.7","118","71","12","44","89","Medium","67","18","No","Yes","No"
"79","4.43","134","48","1","139","145","Medium","65","12","Yes","Yes","No"
"80","9.14","134","67","0","286","90","Bad","41","13","Yes","No","Yes"
"81","8.01","113","100","16","353","79","Bad","68","11","Yes","Yes","Yes"
"82","7.52","116","72","0","237","128","Good","70","13","Yes","No","No"
"83","11.62","151","83","4","325","139","Good","28","17","Yes","Yes","Yes"
"84","4.42","109","36","7","468","94","Bad","56","11","Yes","Yes","No"
"85","2.23","111","25","0","52","121","Bad","43","18","No","No","No"
"86","8.47","125","103","0","304","112","Medium","49","13","No","No","Yes"
"87","8.7","150","84","9","432","134","Medium","64","15","Yes","No","Yes"
"88","11.7","131","67","7","272","126","Good","54","16","No","Yes","Yes"
"89","6.56","117","42","7","144","111","Medium","62","10","Yes","Yes","No"
"90","7.95","128","66","3","493","119","Medium","45","16","No","No","No"
"91","5.33","115","22","0","491","103","Medium","64","11","No","No","No"
"92","4.81","97","46","11","267","107","Medium","80","15","Yes","Yes","No"
"93","4.53","114","113","0","97","125","Medium","29","12","Yes","No","No"
"94","8.86","145","30","0","67","104","Medium","55","17","Yes","No","Yes"
"95","8.39","115","97","5","134","84","Bad","55","11","Yes","Yes","Yes"
"96","5.58","134","25","10","237","148","Medium","59","13","Yes","Yes","No"
"97","9.48","147","42","10","407","132","Good","73","16","No","Yes","Yes"
"98","7.45","161","82","5","287","129","Bad","33","16","Yes","Yes","No"
"99","12.49","122","77","24","382","127","Good","36","16","No","Yes","Yes"
"100","4.88","121","47","3","220","107","Bad","56","16","No","Yes","No"
"101","4.11","113","69","11","94","106","Medium","76","12","No","Yes","No"
"102","6.2","128","93","0","89","118","Medium","34","18","Yes","No","No"
"103","5.3","113","22","0","57","97","Medium","65","16","No","No","No"
"104","5.07","123","91","0","334","96","Bad","78","17","Yes","Yes","No"
"105","4.62","121","96","0","472","138","Medium","51","12","Yes","No","No"
"106","5.55","104","100","8","398","97","Medium","61","11","Yes","Yes","No"
"107","0.16","102","33","0","217","139","Medium","70","18","No","No","No"
"108","8.55","134","107","0","104","108","Medium","60","12","Yes","No","Yes"
"109","3.47","107","79","2","488","103","Bad","65","16","Yes","No","No"
"110","8.98","115","65","0","217","90","Medium","60","17","No","No","Yes"
"111","9","128","62","7","125","116","Medium","43","14","Yes","Yes","Yes"
"112","6.62","132","118","12","272","151","Medium","43","14","Yes","Yes","No"
"113","6.67","116","99","5","298","125","Good","62","12","Yes","Yes","No"
"114","6.01","131","29","11","335","127","Bad","33","12","Yes","Yes","No"
"115","9.31","122","87","9","17","106","Medium","65","13","Yes","Yes","Yes"
"116","8.54","139","35","0","95","129","Medium","42","13","Yes","No","Yes"
"117","5.08","135","75","0","202","128","Medium","80","10","No","No","No"
"118","8.8","145","53","0","507","119","Medium","41","12","Yes","No","Yes"
"119","7.57","112","88","2","243","99","Medium","62","11","Yes","Yes","No"
"120","7.37","130","94","8","137","128","Medium","64","12","Yes","Yes","No"
"121","6.87","128","105","11","249","131","Medium","63","13","Yes","Yes","No"
"122","11.67","125","89","10","380","87","Bad","28","10","Yes","Yes","Yes"
"123","6.88","119","100","5","45","108","Medium","75","10","Yes","Yes","No"
"124","8.19","127","103","0","125","155","Good","29","15","No","Yes","Yes"
"125","8.87","131","113","0","181","120","Good","63","14","Yes","No","Yes"
"126","9.34","89","78","0","181","49","Medium","43","15","No","No","Yes"
"127","11.27","153","68","2","60","133","Good","59","16","Yes","Yes","Yes"
"128","6.52","125","48","3","192","116","Medium","51","14","Yes","Yes","No"
"129","4.96","133","100","3","350","126","Bad","55","13","Yes","Yes","No"
"130","4.47","143","120","7","279","147","Bad","40","10","No","Yes","No"
"131","8.41","94","84","13","497","77","Medium","51","12","Yes","Yes","Yes"
"132","6.5","108","69","3","208","94","Medium","77","16","Yes","No","No"
"133","9.54","125","87","9","232","136","Good","72","10","Yes","Yes","Yes"
"134","7.62","132","98","2","265","97","Bad","62","12","Yes","Yes","No"
"135","3.67","132","31","0","327","131","Medium","76","16","Yes","No","No"
"136","6.44","96","94","14","384","120","Medium","36","18","No","Yes","No"
"137","5.17","131","75","0","10","120","Bad","31","18","No","No","No"
"138","6.52","128","42","0","436","118","Medium","80","11","Yes","No","No"
"139","10.27","125","103","12","371","109","Medium","44","10","Yes","Yes","Yes"
"140","12.3","146","62","10","310","94","Medium","30","13","No","Yes","Yes"
"141","6.03","133","60","10","277","129","Medium","45","18","Yes","Yes","No"
"142","6.53","140","42","0","331","131","Bad","28","15","Yes","No","No"
"143","7.44","124","84","0","300","104","Medium","77","15","Yes","No","No"
"144","0.53","122","88","7","36","159","Bad","28","17","Yes","Yes","No"
"145","9.09","132","68","0","264","123","Good","34","11","No","No","Yes"
"146","8.77","144","63","11","27","117","Medium","47","17","Yes","Yes","Yes"
"147","3.9","114","83","0","412","131","Bad","39","14","Yes","No","No"
"148","10.51","140","54","9","402","119","Good","41","16","No","Yes","Yes"
"149","7.56","110","119","0","384","97","Medium","72","14","No","Yes","No"
"150","11.48","121","120","13","140","87","Medium","56","11","Yes","Yes","Yes"
"151","10.49","122","84","8","176","114","Good","57","10","No","Yes","Yes"
"152","10.77","111","58","17","407","103","Good","75","17","No","Yes","Yes"
"153","7.64","128","78","0","341","128","Good","45","13","No","No","No"
"154","5.93","150","36","7","488","150","Medium","25","17","No","Yes","No"
"155","6.89","129","69","10","289","110","Medium","50","16","No","Yes","No"
"156","7.71","98","72","0","59","69","Medium","65","16","Yes","No","No"
"157","7.49","146","34","0","220","157","Good","51","16","Yes","No","No"
"158","10.21","121","58","8","249","90","Medium","48","13","No","Yes","Yes"
"159","12.53","142","90","1","189","112","Good","39","10","No","Yes","Yes"
"160","9.32","119","60","0","372","70","Bad","30","18","No","No","Yes"
"161","4.67","111","28","0","486","111","Medium","29","12","No","No","No"
"162","2.93","143","21","5","81","160","Medium","67","12","No","Yes","No"
"163","3.63","122","74","0","424","149","Medium","51","13","Yes","No","No"
"164","5.68","130","64","0","40","106","Bad","39","17","No","No","No"
"165","8.22","148","64","0","58","141","Medium","27","13","No","Yes","Yes"
"166","0.37","147","58","7","100","191","Bad","27","15","Yes","Yes","No"
"167","6.71","119","67","17","151","137","Medium","55","11","Yes","Yes","No"
"168","6.71","106","73","0","216","93","Medium","60","13","Yes","No","No"
"169","7.3","129","89","0","425","117","Medium","45","10","Yes","No","No"
"170","11.48","104","41","15","492","77","Good","73","18","Yes","Yes","Yes"
"171","8.01","128","39","12","356","118","Medium","71","10","Yes","Yes","Yes"
"172","12.49","93","106","12","416","55","Medium","75","15","Yes","Yes","Yes"
"173","9.03","104","102","13","123","110","Good","35","16","Yes","Yes","Yes"
"174","6.38","135","91","5","207","128","Medium","66","18","Yes","Yes","No"
"175","0","139","24","0","358","185","Medium","79","15","No","No","No"
"176","7.54","115","89","0","38","122","Medium","25","12","Yes","No","No"
"177","5.61","138","107","9","480","154","Medium","47","11","No","Yes","No"
"178","10.48","138","72","0","148","94","Medium","27","17","Yes","Yes","Yes"
"179","10.66","104","71","14","89","81","Medium","25","14","No","Yes","Yes"
"180","7.78","144","25","3","70","116","Medium","77","18","Yes","Yes","No"
"181","4.94","137","112","15","434","149","Bad","66","13","Yes","Yes","No"
"182","7.43","121","83","0","79","91","Medium","68","11","Yes","No","No"
"183","4.74","137","60","4","230","140","Bad","25","13","Yes","No","No"
"184","5.32","118","74","6","426","102","Medium","80","18","Yes","Yes","No"
"185","9.95","132","33","7","35","97","Medium","60","11","No","Yes","Yes"
"186","10.07","130","100","11","449","107","Medium","64","10","Yes","Yes","Yes"
"187","8.68","120","51","0","93","86","Medium","46","17","No","No","Yes"
"188","6.03","117","32","0","142","96","Bad","62","17","Yes","No","No"
"189","8.07","116","37","0","426","90","Medium","76","15","Yes","No","Yes"
"190","12.11","118","117","18","509","104","Medium","26","15","No","Yes","Yes"
"191","8.79","130","37","13","297","101","Medium","37","13","No","Yes","Yes"
"192","6.67","156","42","13","170","173","Good","74","14","Yes","Yes","No"
"193","7.56","108","26","0","408","93","Medium","56","14","No","No","No"
"194","13.28","139","70","7","71","96","Good","61","10","Yes","Yes","Yes"
"195","7.23","112","98","18","481","128","Medium","45","11","Yes","Yes","No"
"196","4.19","117","93","4","420","112","Bad","66","11","Yes","Yes","No"
"197","4.1","130","28","6","410","133","Bad","72","16","Yes","Yes","No"
"198","2.52","124","61","0","333","138","Medium","76","16","Yes","No","No"
"199","3.62","112","80","5","500","128","Medium","69","10","Yes","Yes","No"
"200","6.42","122","88","5","335","126","Medium","64","14","Yes","Yes","No"
"201","5.56","144","92","0","349","146","Medium","62","12","No","No","No"
"202","5.94","138","83","0","139","134","Medium","54","18","Yes","No","No"
"203","4.1","121","78","4","413","130","Bad","46","10","No","Yes","No"
"204","2.05","131","82","0","132","157","Bad","25","14","Yes","No","No"
"205","8.74","155","80","0","237","124","Medium","37","14","Yes","No","Yes"
"206","5.68","113","22","1","317","132","Medium","28","12","Yes","No","No"
"207","4.97","162","67","0","27","160","Medium","77","17","Yes","Yes","No"
"208","8.19","111","105","0","466","97","Bad","61","10","No","No","Yes"
"209","7.78","86","54","0","497","64","Bad","33","12","Yes","No","No"
"210","3.02","98","21","11","326","90","Bad","76","11","No","Yes","No"
"211","4.36","125","41","2","357","123","Bad","47","14","No","Yes","No"
"212","9.39","117","118","14","445","120","Medium","32","15","Yes","Yes","Yes"
"213","12.04","145","69","19","501","105","Medium","45","11","Yes","Yes","Yes"
"214","8.23","149","84","5","220","139","Medium","33","10","Yes","Yes","Yes"
"215","4.83","115","115","3","48","107","Medium","73","18","Yes","Yes","No"
"216","2.34","116","83","15","170","144","Bad","71","11","Yes","Yes","No"
"217","5.73","141","33","0","243","144","Medium","34","17","Yes","No","No"
"218","4.34","106","44","0","481","111","Medium","70","14","No","No","No"
"219","9.7","138","61","12","156","120","Medium","25","14","Yes","Yes","Yes"
"220","10.62","116","79","19","359","116","Good","58","17","Yes","Yes","Yes"
"221","10.59","131","120","15","262","124","Medium","30","10","Yes","Yes","Yes"
"222","6.43","124","44","0","125","107","Medium","80","11","Yes","No","No"
"223","7.49","136","119","6","178","145","Medium","35","13","Yes","Yes","No"
"224","3.45","110","45","9","276","125","Medium","62","14","Yes","Yes","No"
"225","4.1","134","82","0","464","141","Medium","48","13","No","No","No"
"226","6.68","107","25","0","412","82","Bad","36","14","Yes","No","No"
"227","7.8","119","33","0","245","122","Good","56","14","Yes","No","No"
"228","8.69","113","64","10","68","101","Medium","57","16","Yes","Yes","Yes"
"229","5.4","149","73","13","381","163","Bad","26","11","No","Yes","No"
"230","11.19","98","104","0","404","72","Medium","27","18","No","No","Yes"
"231","5.16","115","60","0","119","114","Bad","38","14","No","No","No"
"232","8.09","132","69","0","123","122","Medium","27","11","No","No","Yes"
"233","13.14","137","80","10","24","105","Good","61","15","Yes","Yes","Yes"
"234","8.65","123","76","18","218","120","Medium","29","14","No","Yes","Yes"
"235","9.43","115","62","11","289","129","Good","56","16","No","Yes","Yes"
"236","5.53","126","32","8","95","132","Medium","50","17","Yes","Yes","No"
"237","9.32","141","34","16","361","108","Medium","69","10","Yes","Yes","Yes"
"238","9.62","151","28","8","499","135","Medium","48","10","Yes","Yes","Yes"
"239","7.36","121","24","0","200","133","Good","73","13","Yes","No","No"
"240","3.89","123","105","0","149","118","Bad","62","16","Yes","Yes","No"
"241","10.31","159","80","0","362","121","Medium","26","18","Yes","No","Yes"
"242","12.01","136","63","0","160","94","Medium","38","12","Yes","No","Yes"
"243","4.68","124","46","0","199","135","Medium","52","14","No","No","No"
"244","7.82","124","25","13","87","110","Medium","57","10","Yes","Yes","No"
"245","8.78","130","30","0","391","100","Medium","26","18","Yes","No","Yes"
"246","10","114","43","0","199","88","Good","57","10","No","Yes","Yes"
"247","6.9","120","56","20","266","90","Bad","78","18","Yes","Yes","No"
"248","5.04","123","114","0","298","151","Bad","34","16","Yes","No","No"
"249","5.36","111","52","0","12","101","Medium","61","11","Yes","Yes","No"
"250","5.05","125","67","0","86","117","Bad","65","11","Yes","No","No"
"251","9.16","137","105","10","435","156","Good","72","14","Yes","Yes","Yes"
"252","3.72","139","111","5","310","132","Bad","62","13","Yes","Yes","No"
"253","8.31","133","97","0","70","117","Medium","32","16","Yes","No","Yes"
"254","5.64","124","24","5","288","122","Medium","57","12","No","Yes","No"
"255","9.58","108","104","23","353","129","Good","37","17","Yes","Yes","Yes"
"256","7.71","123","81","8","198","81","Bad","80","15","Yes","Yes","No"
"257","4.2","147","40","0","277","144","Medium","73","10","Yes","No","No"
"258","8.67","125","62","14","477","112","Medium","80","13","Yes","Yes","Yes"
"259","3.47","108","38","0","251","81","Bad","72","14","No","No","No"
"260","5.12","123","36","10","467","100","Bad","74","11","No","Yes","No"
"261","7.67","129","117","8","400","101","Bad","36","10","Yes","Yes","No"
"262","5.71","121","42","4","188","118","Medium","54","15","Yes","Yes","No"
"263","6.37","120","77","15","86","132","Medium","48","18","Yes","Yes","No"
"264","7.77","116","26","6","434","115","Medium","25","17","Yes","Yes","No"
"265","6.95","128","29","5","324","159","Good","31","15","Yes","Yes","No"
"266","5.31","130","35","10","402","129","Bad","39","17","Yes","Yes","No"
"267","9.1","128","93","12","343","112","Good","73","17","No","Yes","Yes"
"268","5.83","134","82","7","473","112","Bad","51","12","No","Yes","No"
"269","6.53","123","57","0","66","105","Medium","39","11","Yes","No","No"
"270","5.01","159","69","0","438","166","Medium","46","17","Yes","No","No"
"271","11.99","119","26","0","284","89","Good","26","10","Yes","No","Yes"
"272","4.55","111","56","0","504","110","Medium","62","16","Yes","No","No"
"273","12.98","113","33","0","14","63","Good","38","12","Yes","No","Yes"
"274","10.04","116","106","8","244","86","Medium","58","12","Yes","Yes","Yes"
"275","7.22","135","93","2","67","119","Medium","34","11","Yes","Yes","No"
"276","6.67","107","119","11","210","132","Medium","53","11","Yes","Yes","No"
"277","6.93","135","69","14","296","130","Medium","73","15","Yes","Yes","No"
"278","7.8","136","48","12","326","125","Medium","36","16","Yes","Yes","No"
"279","7.22","114","113","2","129","151","Good","40","15","No","Yes","No"
"280","3.42","141","57","13","376","158","Medium","64","18","Yes","Yes","No"
"281","2.86","121","86","10","496","145","Bad","51","10","Yes","Yes","No"
"282","11.19","122","69","7","303","105","Good","45","16","No","Yes","Yes"
"283","7.74","150","96","0","80","154","Good","61","11","Yes","No","No"
"284","5.36","135","110","0","112","117","Medium","80","16","No","No","No"
"285","6.97","106","46","11","414","96","Bad","79","17","No","No","No"
"286","7.6","146","26","11","261","131","Medium","39","10","Yes","Yes","No"
"287","7.53","117","118","11","429","113","Medium","67","18","No","Yes","No"
"288","6.88","95","44","4","208","72","Bad","44","17","Yes","Yes","No"
"289","6.98","116","40","0","74","97","Medium","76","15","No","No","No"
"290","8.75","143","77","25","448","156","Medium","43","17","Yes","Yes","Yes"
"291","9.49","107","111","14","400","103","Medium","41","11","No","Yes","Yes"
"292","6.64","118","70","0","106","89","Bad","39","17","Yes","No","No"
"293","11.82","113","66","16","322","74","Good","76","15","Yes","Yes","Yes"
"294","11.28","123","84","0","74","89","Good","59","10","Yes","No","Yes"
"295","12.66","148","76","3","126","99","Good","60","11","Yes","Yes","Yes"
"296","4.21","118","35","14","502","137","Medium","79","10","No","Yes","No"
"297","8.21","127","44","13","160","123","Good","63","18","Yes","Yes","Yes"
"298","3.07","118","83","13","276","104","Bad","75","10","Yes","Yes","No"
"299","10.98","148","63","0","312","130","Good","63","15","Yes","No","Yes"
"300","9.4","135","40","17","497","96","Medium","54","17","No","Yes","Yes"
"301","8.57","116","78","1","158","99","Medium","45","11","Yes","Yes","Yes"
"302","7.41","99","93","0","198","87","Medium","57","16","Yes","Yes","No"
"303","5.28","108","77","13","388","110","Bad","74","14","Yes","Yes","No"
"304","10.01","133","52","16","290","99","Medium","43","11","Yes","Yes","Yes"
"305","11.93","123","98","12","408","134","Good","29","10","Yes","Yes","Yes"
"306","8.03","115","29","26","394","132","Medium","33","13","Yes","Yes","Yes"
"307","4.78","131","32","1","85","133","Medium","48","12","Yes","Yes","No"
"308","5.9","138","92","0","13","120","Bad","61","12","Yes","No","No"
"309","9.24","126","80","19","436","126","Medium","52","10","Yes","Yes","Yes"
"310","11.18","131","111","13","33","80","Bad","68","18","Yes","Yes","Yes"
"311","9.53","175","65","29","419","166","Medium","53","12","Yes","Yes","Yes"
"312","6.15","146","68","12","328","132","Bad","51","14","Yes","Yes","No"
"313","6.8","137","117","5","337","135","Bad","38","10","Yes","Yes","No"
"314","9.33","103","81","3","491","54","Medium","66","13","Yes","No","Yes"
"315","7.72","133","33","10","333","129","Good","71","14","Yes","Yes","No"
"316","6.39","131","21","8","220","171","Good","29","14","Yes","Yes","No"
"317","15.63","122","36","5","369","72","Good","35","10","Yes","Yes","Yes"
"318","6.41","142","30","0","472","136","Good","80","15","No","No","No"
"319","10.08","116","72","10","456","130","Good","41","14","No","Yes","Yes"
"320","6.97","127","45","19","459","129","Medium","57","11","No","Yes","No"
"321","5.86","136","70","12","171","152","Medium","44","18","Yes","Yes","No"
"322","7.52","123","39","5","499","98","Medium","34","15","Yes","No","No"
"323","9.16","140","50","10","300","139","Good","60","15","Yes","Yes","Yes"
"324","10.36","107","105","18","428","103","Medium","34","12","Yes","Yes","Yes"
"325","2.66","136","65","4","133","150","Bad","53","13","Yes","Yes","No"
"326","11.7","144","69","11","131","104","Medium","47","11","Yes","Yes","Yes"
"327","4.69","133","30","0","152","122","Medium","53","17","Yes","No","No"
"328","6.23","112","38","17","316","104","Medium","80","16","Yes","Yes","No"
"329","3.15","117","66","1","65","111","Bad","55","11","Yes","Yes","No"
"330","11.27","100","54","9","433","89","Good","45","12","Yes","Yes","Yes"
"331","4.99","122","59","0","501","112","Bad","32","14","No","No","No"
"332","10.1","135","63","15","213","134","Medium","32","10","Yes","Yes","Yes"
"333","5.74","106","33","20","354","104","Medium","61","12","Yes","Yes","No"
"334","5.87","136","60","7","303","147","Medium","41","10","Yes","Yes","No"
"335","7.63","93","117","9","489","83","Bad","42","13","Yes","Yes","No"
"336","6.18","120","70","15","464","110","Medium","72","15","Yes","Yes","No"
"337","5.17","138","35","6","60","143","Bad","28","18","Yes","No","No"
"338","8.61","130","38","0","283","102","Medium","80","15","Yes","No","Yes"
"339","5.97","112","24","0","164","101","Medium","45","11","Yes","No","No"
"340","11.54","134","44","4","219","126","Good","44","15","Yes","Yes","Yes"
"341","7.5","140","29","0","105","91","Bad","43","16","Yes","No","No"
"342","7.38","98","120","0","268","93","Medium","72","10","No","No","No"
"343","7.81","137","102","13","422","118","Medium","71","10","No","Yes","No"
"344","5.99","117","42","10","371","121","Bad","26","14","Yes","Yes","No"
"345","8.43","138","80","0","108","126","Good","70","13","No","Yes","Yes"
"346","4.81","121","68","0","279","149","Good","79","12","Yes","No","No"
"347","8.97","132","107","0","144","125","Medium","33","13","No","No","Yes"
"348","6.88","96","39","0","161","112","Good","27","14","No","No","No"
"349","12.57","132","102","20","459","107","Good","49","11","Yes","Yes","Yes"
"350","9.32","134","27","18","467","96","Medium","49","14","No","Yes","Yes"
"351","8.64","111","101","17","266","91","Medium","63","17","No","Yes","Yes"
"352","10.44","124","115","16","458","105","Medium","62","16","No","Yes","Yes"
"353","13.44","133","103","14","288","122","Good","61","17","Yes","Yes","Yes"
"354","9.45","107","67","12","430","92","Medium","35","12","No","Yes","Yes"
"355","5.3","133","31","1","80","145","Medium","42","18","Yes","Yes","No"
"356","7.02","130","100","0","306","146","Good","42","11","Yes","No","No"
"357","3.58","142","109","0","111","164","Good","72","12","Yes","No","No"
"358","13.36","103","73","3","276","72","Medium","34","15","Yes","Yes","Yes"
"359","4.17","123","96","10","71","118","Bad","69","11","Yes","Yes","No"
"360","3.13","130","62","11","396","130","Bad","66","14","Yes","Yes","No"
"361","8.77","118","86","7","265","114","Good","52","15","No","Yes","Yes"
"362","8.68","131","25","10","183","104","Medium","56","15","No","Yes","Yes"
"363","5.25","131","55","0","26","110","Bad","79","12","Yes","Yes","No"
"364","10.26","111","75","1","377","108","Good","25","12","Yes","No","Yes"
"365","10.5","122","21","16","488","131","Good","30","14","Yes","Yes","Yes"
"366","6.53","154","30","0","122","162","Medium","57","17","No","No","No"
"367","5.98","124","56","11","447","134","Medium","53","12","No","Yes","No"
"368","14.37","95","106","0","256","53","Good","52","17","Yes","No","Yes"
"369","10.71","109","22","10","348","79","Good","74","14","No","Yes","Yes"
"370","10.26","135","100","22","463","122","Medium","36","14","Yes","Yes","Yes"
"371","7.68","126","41","22","403","119","Bad","42","12","Yes","Yes","No"
"372","9.08","152","81","0","191","126","Medium","54","16","Yes","No","Yes"
"373","7.8","121","50","0","508","98","Medium","65","11","No","No","No"
"374","5.58","137","71","0","402","116","Medium","78","17","Yes","No","No"
"375","9.44","131","47","7","90","118","Medium","47","12","Yes","Yes","Yes"
"376","7.9","132","46","4","206","124","Medium","73","11","Yes","No","No"
"377","16.27","141","60","19","319","92","Good","44","11","Yes","Yes","Yes"
"378","6.81","132","61","0","263","125","Medium","41","12","No","No","No"
"379","6.11","133","88","3","105","119","Medium","79","12","Yes","Yes","No"
"380","5.81","125","111","0","404","107","Bad","54","15","Yes","No","No"
"381","9.64","106","64","10","17","89","Medium","68","17","Yes","Yes","Yes"
"382","3.9","124","65","21","496","151","Bad","77","13","Yes","Yes","No"
"383","4.95","121","28","19","315","121","Medium","66","14","Yes","Yes","No"
"384","9.35","98","117","0","76","68","Medium","63","10","Yes","No","Yes"
"385","12.85","123","37","15","348","112","Good","28","12","Yes","Yes","Yes"
"386","5.87","131","73","13","455","132","Medium","62","17","Yes","Yes","No"
"387","5.32","152","116","0","170","160","Medium","39","16","Yes","No","No"
"388","8.67","142","73","14","238","115","Medium","73","14","No","Yes","Yes"
"389","8.14","135","89","11","245","78","Bad","79","16","Yes","Yes","Yes"
"390","8.44","128","42","8","328","107","Medium","35","12","Yes","Yes","Yes"
"391","5.47","108","75","9","61","111","Medium","67","12","Yes","Yes","No"
"392","6.1","153","63","0","49","124","Bad","56","16","Yes","No","No"
"393","4.53","129","42","13","315","130","Bad","34","13","Yes","Yes","No"
"394","5.57","109","51","10","26","120","Medium","30","17","No","Yes","No"
"395","5.35","130","58","19","366","139","Bad","33","16","Yes","Yes","No"
"396","12.57","138","108","17","203","128","Good","33","14","Yes","Yes","Yes"
"397","6.14","139","23","3","37","120","Medium","55","11","No","Yes","No"
"398","7.41","162","26","12","368","159","Medium","40","18","Yes","Yes","No"
"399","5.94","100","79","7","284","95","Bad","50","12","Yes","Yes","No"
"400","9.71","134","37","0","27","120","Good","49","16","Yes","Yes","Yes"


================================================
File: tests/data_examples/data_storage_parameter_data_types/in/tables/sample.csv.manifest
================================================
{"incremental": false, "write_always": false, "delimiter": ",", "enclosure": "\"", "columns": ["x", "Sales", "CompPrice", "Income", "Advertising", "Population", "Price", "ShelveLoc", "Age", "Education", "Urban", "US", "High"]}

================================================
File: tests/data_examples/data_system_tags/config.json
================================================
{
}

================================================
File: tests/data_examples/data_system_tags/in/files/151971405_21702.strip.print.gif.manifest
================================================
{
    "id": 151971405,
    "name": "21702.strip.print.gif",
    "created": "2015-11-01T20:14:19+0100",
    "is_public": false,
    "is_encrypted": true,
    "tags": [
        "dilbert",
        "componentId: 1234",
        "configurationId: 12345",
        "configurationRowId: 12345",
        "runId: 22123",
        "branchId: 312321"
    ],
    "max_age_days": 180,
    "size_bytes": 4931
}

================================================
File: tests/data_examples/data_system_tags/in/files/151971412_30221.strip.print.gif.manifest
================================================
{
    "id": 151971412,
    "name": "30221.strip.print.gif",
    "created": "2015-11-01T20:14:27+0100",
    "is_public": false,
    "is_encrypted": true,
    "tags": [
        "dilbert",
        "componentId: 1234",
        "configurationId: 12345",
        "configurationRowId: 12345",
        "runId: 221444423",
        "branchId: 312321"
    ],
    "max_age_days": 180,
    "size_bytes": 21230
}

================================================
File: tests/data_examples/data_system_tags/in/files/151971423_5655.strip.print.gif.manifest
================================================
{
    "id": 151971423,
    "name": "5655.strip.print.gif",
    "created": "2015-11-01T20:14:35+0100",
    "is_public": false,
    "is_encrypted": true,
    "tags": [
        "dilbert",
        "componentId: 1234",
        "configurationId: 12345",
        "configurationRowId: 12345",
        "runId: 2221345123",
        "branchId: 311112321"
    ],
    "max_age_days": 180,
    "size_bytes": 20276
}

================================================
File: tests/data_examples/data_system_tags/in/files/151971432_compiler_complaint.png.manifest
================================================
{
    "id": 151971432,
    "name": "compiler_complaint.png",
    "created": "2015-11-01T20:14:48+0100",
    "is_public": false,
    "is_encrypted": true,
    "tags": [
        "foo",
        "bar",
        "componentId: 1234",
        "configurationId: 12345",
        "configurationRowId: 12345",
        "runId: 22123",
        "branchId: 312321"
    ],
    "max_age_days": 180,
    "size_bytes": 14833
}

================================================
File: tests/data_examples/data_system_tags/in/files/151971450_duty_calls.png.manifest
================================================
{
    "id": 151971450,
    "name": "duty_calls.png",
    "created": "2015-11-01T20:14:57+0100",
    "is_public": false,
    "is_encrypted": true,
    "tags": [
        "foo",
        "bar",
        "componentId: 1234",
        "configurationId: 12345",
        "configurationRowId: 12345",
        "runId: 2212123123",
        "branchId: 312321"
    ],
    "max_age_days": 180,
    "size_bytes": 30027
}

================================================
File: tests/data_examples/data_system_tags/in/files/151971455_duty_calls.png.manifest
================================================
{
    "id": 151971455,
    "name": "duty_calls.png",
    "created": "2016-11-01T20:14:57+0100",
    "is_public": false,
    "is_encrypted": true,
    "tags": [
        "foo",
        "bar",
        "componentId: 1234",
        "configurationId: 12345",
        "configurationRowId: 12345",
        "runId: 221222223",
        "branchId: 312321"
    ],
    "max_age_days": 180,
    "size_bytes": 30027
}

================================================
File: tests/schema_examples/faulty-schemas/invalid_base_type.json
================================================
{
  "name": "order",
  "description": "this table holds data on orders",
  "parent_tables": [],
  "primary_keys": [
    "id"
  ],
  "fields": [
    {
      "name": "id",
      "base_type": "PIVO & PAREK",
      "description": "ID of the order",
      "nullable": false
    },
    {
      "name": "product_id",
      "base_type": "STRING",
      "description": "Id of the product in order"
    },
    {
      "name": "quantity",
      "base_type": "STRING",
      "description": "Quantity of the product in order"
    }
  ]
}


================================================
File: tests/schema_examples/faulty-schemas/invalid_column_schema.json
================================================
{
  "name": "product",
  "description": "this table holds data on products",
  "parent_tables": [],
  "primary_keys": [
    "id"
  ],
  "fields": [
    {
      "name": "id",
      "description": "ID of the product",
      "some-invalid-key": "hi"
    },
    {
      "name": "name",
      "base_type": "STRING",
      "description": "Plain-text name of the product",
      "length": "1000",
      "default": "Default Name"
    }
  ]
}


================================================
File: tests/schema_examples/faulty-schemas/invalid_table_schema.json
================================================
{
  "name": "order",
  "description": "this table holds data on orders",
  "parent_tables": [],
  "some_extra" : "here",
  "primary_keys": [
    "id"
  ],
  "fields": [
    {
      "name": "id",
      "base_type": "STRING",
      "description": "ID of the order",
      "nullable": false
    },
    {
      "name": "product_id",
      "base_type": "STRING",
      "description": "Id of the product in order"
    },
    {
      "name": "quantity",
      "base_type": "STRING",
      "description": "Quantity of the product in order"
    }
  ]
}


================================================
File: tests/schema_examples/schemas/order.json
================================================
{
  "name": "order",
  "description": "this table holds data on orders",
  "parent_tables": [],
  "primary_keys": [
    "id"
  ],
  "fields": [
    {
      "name": "id",
      "base_type": "STRING",
      "description": "ID of the order",
      "nullable": false
    },
    {
      "name": "product_id",
      "base_type": "NUMERIC",
      "description": "Id of the product in order"
    },
    {
      "name": "quantity",
      "base_type": "STRING",
      "description": "Quantity of the product in order"
    }
  ]
}


================================================
File: tests/schema_examples/schemas/product.json
================================================
{
  "name": "product",
  "description": "this table holds data on products",
  "parent_tables": [],
  "primary_keys": [
    "id"
  ],
  "fields": [
    {
      "name": "id",
      "description": "ID of the product"
    },
    {
      "name": "name",
      "base_type": "STRING",
      "description": "Plain-text name of the product",
      "length": "1000",
      "default": "Default Name"
    }
  ]
}


================================================
File: .github/workflows/deploy.yml
================================================
name: Build & Upload Python Package to PYPI production

on:
  release:
    types: [ created ]
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine
          pip install flake8 pytest
          pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 src/ --config=flake8.cfg
      - name: Test with pytest
        run: |
          pytest tests
      - name: Build and publish
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python setup.py sdist bdist_wheel
          twine upload dist/*

================================================
File: .github/workflows/deploy_to_test.yml
================================================
name: Deploy To Test PYPI

on: workflow_dispatch

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'
          skip_existing: true
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine
          pip install flake8 pytest
          pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 src/ --config=flake8.cfg
      - name: Test with pytest
        run: |
          pytest tests
      - name: Build and publish
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME_TEST }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD_TEST }}
        run: |
          python setup.py sdist bdist_wheel
          twine upload --repository testpypi dist/*

================================================
File: .github/workflows/push_dev.yml
================================================
name: Build & Test

on:
  push:
    branches:
      - '**'
      - '!main'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 src/ --config=flake8.cfg
      - name: Test with pytest
        run: |
          pytest tests
  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'
      - name: Create html documentation
        run: |
          pip install --user pdoc3
          python setup.py install
          pdoc --html -f -o .\docs keboola.component
          mv .docs/keboola/component/* docs
          rm -r .docs/keboola
      - name: Commit docs
        run: |
          git config --global user.name 'KCF'
          git config --global user.email 'kcf@users.noreply.github.com'
          git commit --allow-empty -am "Automated html docs build"
          git push


