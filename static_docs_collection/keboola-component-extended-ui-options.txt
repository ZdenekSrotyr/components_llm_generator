Since KBC components support dynamic generation of UI based on JsonSchema definitions using this library. It is recommended to use JsonSchema based configuration at all times. When designing the component configuration it is advisable to follow the Keboola official component configuration guidelines as defined in the Keboola developers documentation.

The UI form can be previewed, tested and developed using these tools:

https://json-editor.github.io/json-editor/ - online editor & renderer

https://pmk65.github.io/jedemov2/dist/demo.html - Advanced version of online editor with some undocumented features in examples. Large library of examples

components.keboola.com - posibility to preview the rendered UI direclty from the JSON Schema field

Apart from that, most of the components, especially the ones for data retrieval, share a basic set of parameters and required functionality. Below are several tips on how to deal with the common ones.

For test UI elements in KBC: kds-team.ex-test-connection



Common JSON Schema UI blocks

Contributing to this section

Please extend this list with any elements that you find useful. Anything you need to copy-paste from existing UI or some new cool tweak. 

Any new element should be also added to the official docs: https://developers.keboola.com/extend/component/ui-options/configuration-schema/examples 

(See here for a guide on how to do that)



# Placeholder hints inside inputs

For better UX you can provide user with hints of what kind of value should be in the input element:



"shop_name": {
      "type": "string",
      "title": "Shop Name",
      "propertyOrder": 1
    },
    "base_url": {
      "type": "string",
      "title": "Base URL",
      "options": {
        "inputAttributes": {
          "placeholder": "https://www.myshop.cz"
        }
      },
      "propertyOrder": 2
    }



# Element Tooltips

Additional description with optional links

"test_tooltip": {
        "type": "string",
        "title": "Example tooltip",
        "options": {
          "tooltip": "custom tooltip, default is Open documentation"
        },
        "description": "Test value.",
        "propertyOrder": 1
      }

# Tooltip with documentation link

{
 "options": {
   "documentation": {
      "link": "absolute_url",
      "tooltip": "custom tooltip, default is Open documentation"
    }
  }
}



# API Token & Secret Values

Always prefix private parameters like passwords with # sign. These will be automatically hashed and hidden from the view. Use a textual input field with “format”:”password” in the JsonSchema for these values to hide the content also during the typing.

"#api_token": {
  "type": "string",
  "title": "API token",
  "format": "password",
  "propertyOrder": 1
}

#Date range

When date range is applicable it should be bounded by two parameters  From Date and To Date. These should be text fields that accept particular date in specified format or a string defining a relative interval in strtotime manner. Convenient function for parsing such values and conversion to date can be found in the KDS tooling (get_date_period_converted(from_date,to_date))

This may be combined in loading options block (example)

"date_from": {
  "propertyOrder": 5,
  "type": "string",
  "title": "From date [inclusive]",
  "description": "Date from. Date in YYYY-MM-DD format or a string i.e. 5 days ago, 1 month ago, yesterday, etc. If left empty, all records are downloaded."
},
"date_to": {
  "propertyOrder": 7,
  "type": "string",
  "title": "To date [exclusive]",
  "default": "now",
  "description": "Date to. Date in YYYY-MM-DD format or a string i.e. 5 days ago, 1 month ago, yesterday, etc. If left empty, all records are downloaded."
}



# Codemirror (json/sql/python..) editor

Allow inject Codemirror editor to JSON schema based UI. 
Allowed options: mode, placeholder, autofocus, lineNumbers lint
Available modes: text/x-sfsql, text/x-sql, text/x-plsql, text/x-python, text/x-julia, text/x-rsrc, application/json
JSON mode supports encryption. Default mode is application/json . You should set type base on mode (string or object).

JsonSchema examples:

"token": {
  "type": "object",
  "format": "editor"
}

"sql": {
  "type": "string",
  "format": "editor",
  "options": {
    "editor": {
      "mode": "text/x-sql"
    }
  }
}

# Trimmed string

Works only for simple string inputs. Value is trimmed before save.

JsonSchema example:

"token": {
  "type": "string",
  "format": "trim"
}

# Loading options (Incremental vs Full)

This may be combined in loading options block (example)

"incremental_output": {
  "type": "number",
  "enum": [
    0,
    1
  ],
  "options": {
    "enum_titles": [
      "Full Load",
      "Incremental Update"
    ]
  },
  "default": 1,
  "title": "Load type",
  "description": "If set to Incremental update, the result tables will be updated based on primary key. Full load overwrites the destination table each time. NOTE: If you wish to remove deleted records, this needs to be set to Full load and the Period from attribute empty.",
  "propertyOrder": 365
}



# Checkboxes

"campaigns": {
  "type": "boolean",
  "title": "Download Campaigns",
  "default": false,
  "format": "checkbox",
  "propertyOrder": 30
},
"segments": {
  "type": "boolean",
  "title": "Download Segments",
  "default": false,
  "format": "checkbox",
  "propertyOrder": 40
}

# Read only inputs

Sometimes you need inputs that are not editable.

"api_version": {
      "type": "string",
      "title": "API version",
      "default": "2022-04",
      "description": "The API version, gets updated regularly based on the <a href=\"https://shopify.dev/api/usage/versioning#release-schedule\">Shopify release cycle</a>",
      "propertyOrder": 251,
      "readOnly": true
    }



# Dropdown array of values

"types": {
  "type": "array",
  "title": "Types",
  "description": "Activity types",
  "items": {
    "enum": [
      "page",
      "event",
      "attribute_change",
      "failed_attribute_change",
      "stripe_event",
      "drafted_email",
      "failed_email",
      "dropped_email",
      "sent_email",
      "spammed_email",
      "bounced_email",
      "delivered_email",
      "triggered_email",
      "opened_email"
    ],
    "type": "string"
  },
  "format": "select",
  "uniqueItems": true,
  "propertyOrder": 360
}

# Creatable dropdown of values

Add options.creatable=true (works also for multiselects)

"region": {
      "type": "string",
      "title": "Region",
      "options": {
        "tags": true,
        "creatable": true
      },
      "enum": [
        "US",
        "EU",
        "AZURE-EU",
        "GCP-EU-W3",
        "GCP-US-E4"
      ],
      "propertyOrder": 500,
      "default": "AZURE-EU"
    }





# Required fields & drop down enums

When defining an enum field there will be default empty value if the field is not required.

When adding new required field never use required list on the parent object because this will break existing CLI integrations. Always use the required bool option on the field itself.

This can be achieved either by including the field within the “required” list that lives on the parent object, e.g:

"parent": { 
      "type": "object", 
      "required": [ 
        "enum" 
      ], 
      "properties": {
      "types": {
          "type": "array",
          "items": {
            "enum": [
              "page",
              "event"
            ],
            "type": "string"
          }
        }
}
}

OR by defining “required”: true directly on the enum object:

"types": {
          "type": "array",
          "required": true,
          "items": {
            "enum": [
              "page",
              "event"
            ],
            "type": "string"
          }
        }

# SSH Tunnel Block

Generates SSH Tunnel block:

JSON Schema element:

{
  "ssh_options": {
          "type": "object",
          "format": "ssh-editor",
          "propertyOrder": 60
        }
}

The UI then generates the Private & Public key pair using the following component: keboola.ssh-keygen-v2

E.g. using following command: "ssh-keygen -b 4096 -t rsa -f " . $privateKeyFile . " -N '' -q"

The resulting configuration object is:

{
        "enabled": true,
        "keys": {
          "public": "ssh-rsa XXX",
          "#private": XXX"
        }
        "sshHost": "ss",
        "user": "ss",
        "sshPort": 123
      }

# Backfilling

Consider adding an option to easily backfill with historical data when designing an extractor component. Pulling historical data in large intervals may lead to component execution timeout and the extraction may need to be split into several steps. 

Support for such a task may be implemented in the application logic. One suggested solution is to introduce a backfill configuration object that would allow the user to specify the largest interval that should be downloaded in one run. That interval will be used to split the original interval set by From and To Date parameters into several chunks, defining a moving interval window that will be downloaded on each consecutive run. Each run would store the last run interval chunk in the last state and application would continue from where it left.

Implementation of such logic is supported by some convenient methods in the KDS python library.

JsonSchema example:

 "backfill_mode": {
    "type": "object",
    "format": "grid",
    "required": [
      "backfill_enabled",
      "backfill_max_window"
    ],
    "title": "Backfill mode",
    "description": "If backfill mode is enabled, each consecutive run of the component will continue from the end of the last run period, until current date is reached. The size of the backfill window is used to specify the maximum chunk of the interval that will be used in one run.",
    "propertyOrder": 455,
    "properties": {
      "backfill_enabled": {
        "type": "boolean",
        "enum": [
          false,
          true
        ],
        "default": false,
        "options": {
          "enum_titles": [
            "No",
            "Yes"
          ]
        }
      },
      "backfill_max_window": {
        "type": "number",
        "title": "Size of the backfill window in days",
        "description": "Set maximum number of days that will be used to split the reported interval and used in one call. "
      }
    }
  }

# Visual separation of sections

It often happens that the configuration can be split into multiple sections. It is advisable to split these visually using JSON Schema objects or arrays to achieve it using the generic UI.

## Example 1 - Object blocks (Loading Options)

Loading options block:

"loading_options": { 
      "type": "object", 
      "title": "Loading Options", 
      "propertyOrder": 400, 
      "format": "grid", 
      "required": [ 
        "incremental_output", 
        "date_since", 
        "date_to" 
      ], 
      "properties": { 
        "date_since": { 
          "type": "string", 
          "title": "Period from date [including].", 
          "default": "1 week ago", 
          "description": " Date in YYYY-MM-DD format or dateparser string i.e. 5 days ago, 1 month ago, yesterday, etc. If left empty, all records are downloaded.", 
          "propertyOrder": 300 
        }, 
        "date_to": { 
          "type": "string", 
          "title": "Period to date [excluding].", 
          "default": "now", 
          "description": " Date in YYYY-MM-DD format or dateparser string i.e. 5 days ago, 1 month ago, yesterday, etc. If left empty, all records are downloaded.", 
          "propertyOrder": 400 
        }, 
        "incremental_output": { 
          "type": "number", 
          "enum": [ 
            0, 
            1 
          ], 
          "options": { 
            "enum_titles": [ 
              "Full Load", 
              "Incremental Update" 
            ] 
          }, 
          "default": 1, 
          "title": "Load type", 
          "description": "If set to Incremental update, the result tables will be updated based on primary key. Full load overwrites the destination table each time. NOTE: If you wish to remove deleted records, this needs to be set to Full load and the Period from attribute empty.", 
          "propertyOrder": 450 
        } 
      } 
    }







## Example 2 - Optional blocks using Arrays

Create an array with parameter "maxItems": 1 to create optional blocks.

"customers": { 
      "type": "array", 
      "title": "Customers", 
      "description": "Download Customers.", 
      "propertyOrder": 4000, 
      "maxItems": 1, 
      "items": { 
        "type": "object", 
        "title": "Setup", 
        "required": [ 
          "filters", 
          "attributes" 
        ], 
        "properties": { 
          "filters": { 
            "type": "string", 
            "title": "Filter", 
            "description": "Optional JSON filter, as defined in https://customer.io/docs/api-triggered-data-format#general-syntax. Example value: {\"and\":[{\"segment\":{\"id\":7}},{\"segment\":{\"id\":5}}]} If left empty, all users are donwnloaded", 
            "format": "textarea", 
            "propertyOrder": 1 
          }, 
          "attributes": { 
      "type": "string", 
      "title": "Attributes", 
      "format": "textarea","options": { 
        "input_height": "100px" 
      }, 
      "description": "Comma separated list of required customer attributes. Each customer may have different set of columns, this is to limit only to attributes you need. All attributes are downloaded if left empty.", 
      "uniqueItems": true, 
      "propertyOrder": 700 
    } 
        } 
      } 
    }







# (Dependencies) Changing set of options dynamically based on selection

In some cases different set of options is available for different types of the same object, e.g. Report type. JSON Schema allows to define different schemas based on selection. This may be useful in configuration rows scenario, where each row could represent different type of Report, Endpoint, etc.



The easiest was is to use dependencies.



{
  "type": "object",
  "title": "extractor configuration",
  "required": [
    "download_attachments"

  ],
  "properties": {
    "download_attachments": {
      "type": "boolean",
      "format": "checkbox",
      "title": "Download Attachments",
      "description": "When set to true, also the attachments will be downloaded. By default into the File Storage. Use processors to control the behaviour.",
      "default": false,
      "propertyOrder": 300
    },
    "attachment_pattern": {
      "type": "string",
      "title": "Attachment Pattern",
      "description": "Regex pattern to filter particular attachments. e.g. to retrieve only pdf file types use: .+\\.pdf If left empty, all attachments are downloaded.",
      "default": ".+\\.csv",
      "options": {
        "dependencies": {
          "download_attachments": true
        }
      },
      "propertyOrder": 400
    }
  }
}



You can also react on multiple multiple array values or on multiple elements at the same time.



      "options": {
        "dependencies": {
          "endpoint": [
            "analytics_data_breakdown_by_content", "analytics_data_breakdown_by_object"
          ],
          "filtered": false
        }
      }
    }





# Dependencies across nested objects

There seem to be a bug that causes dependencies not to work between nested objects of different levels. e.g. obj_1.nested being dependent on obj_2.nested. 

This can be fixed by using dummy hidden element that watches the required object, example:



{
  "type": "object",
  "title": "Table configuration",
  "required": [
    "element_1"
  ],
  "properties": {
    "element_1": {
      "type": "object",
      "propertyOrder": 150,
      "title": "element_1",
      "required": [
        "element_1_nested"
      ],
      "properties": {
        "element_1_nested": {
          "type": "string",
          "title": "element_1_nested",
          "enum": [
            "SHOW_ELEMENT2_NESTED",
            "HIDE_ELEMENT2_NESTED"
          ],
          "propertyOrder": 150
        }
      }
    },
    "element_2": {
      "type": "object",
      "propertyOrder": 150,
      "title": "element_2",
      "required": [
        "element_2_nested"
      ],
      "properties": {
        "helper_element": {
          "type": "string",
          "description": "Helper dummy element to render sql_loader_options",
          "template": "{{val}}",
          "watch": {
            "val": "element_1.element_1_nested"
          },
          "options": {
            "hidden": true
          }
        },
        "element_2_nested": {
          "type": "string",
          "title": "element_2_nested",
          "propertyOrder": 150,
          "options": {
            "dependencies": {
              "helper_element": "SHOW_ELEMENT2_NESTED"
            }
          }
        }
      }
    }
  }
}


Alternative (do not use)

"query": {
            "title": "Endpoint",
            "description": "Fetch data from given date range. i.e. Products, Customers, Orders",
            "anyOf": [{
                    "title": "Customes",
                    "additionalProperties": false,
                    "properties": {
                        "endpoint": {
                            "type": "string",
                            "enum": [
                                "customers"
                            ],
                            "options": {
                                "hidden": true
                            }
                        }
                    },
                    "type": "object",
                    "options": {
                        "keep_oneof_values": false
                    }
                }, {
                    "title": "Orders",
                    "additionalProperties": false,
                    "properties": {
                        "endpoint": {
                            "type": "string",
                            "enum": [
                                "orders"
                            ],
                            "options": {
                                "hidden": true
                            }
                        },
                        "date_from": {
                            "type": "string",
                            "title": "Date From",
                            "description": "Report to download from this data. Date in YYYY-MM-DD format"
                        },
                        "date_to": {
                            "type": "string",
                            "title": "Date To",
                            "default": "now",
                            "description": "Max report date to download. Date in YYYY-MM-DD format or dateparser string i.e. 5 days ago, 1 month ago, yesterday, etc. If left empty, all records are downloaded."
                        },
                        "customer_type": {
                            "type": "string",
                            "title": "Customer type",
                            "default": "registered"
                        }
                    },
                    "type": "object",
                    "options": {
                        "keep_oneof_values": false
                    }
                }, {
                    "title": "Products",
                    "additionalProperties": false,
                    "properties": {
                        "endpoint": {
                            "type": "string",
                            "enum": [
                                "products"
                            ],
                            "options": {
                                "hidden": true
                            }
                        },
                        "date_from": {
                            "type": "string",
                            "title": "Date From",
                            "description": "Report to download from this data. Date in YYYY-MM-DD format"
                        },
                        "date_to": {
                            "type": "string",
                            "title": "Date To",
                            "default": "now",
                            "description": "Max report date to download. Date in YYYY-MM-DD format or dateparser string i.e. 5 days ago, 1 month ago, yesterday, etc. If left empty, all records are downloaded."
                        }
                    },
                    "type": "object",
                    "options": {
                        "keep_oneof_values": false
                    }
                }
            ]
        }

# Field descriptions

Provide self explaining and short names for the configuration fields using “title” attribute. Add additional descriptions using “description” attribute in the JsonSchema, so the user does not have to refer to any additional documentation if possible. 

JsonSchema example:

"project_id": {
  "type": "string",
  "title": "Project ID",
  "description": "Project ID as to be found in the web UI page Account->Settings",
  "propertyOrder": 100
}

# Standard Component Blocks

A lot of blocks are repetitive in Keboola components, mainly in Extractors, and should therefore be be altered as minimally as possible in order for components to be more standardised. This section holds these UI blocks that should be copy and pasted into the schema.

Blocks are showcased in https://connection.keboola.com/admin/projects/5415/components/kds-team.app-ui-block-showcase/965878578 

Implemented in sample component https://bitbucket.org/kds_consulting_team/kds-team.app-ui-block-showcase/src 

## Destination Block

"destination": {
      "title": "Destination",
      "type": "object",
      "required": [
        "output_table_name",
        "incremental_load",
        "primary_keys"
      ],
      "properties": {
        "output_table_name": {
          "type": "string",
          "title": "Storage Table Name",
          "description": "Name of the table stored in Storage.",
          "propertyOrder": 100
        },
        "incremental_load": {
          "type": "boolean",
          "format": "checkbox",
          "title": "Incremental Load",
          "description": "If incremental load is turned on, the table will be updated instead of rewritten. Tables with a primary key will have rows updated, tables without a primary key will have rows appended.",
          "propertyOrder": 110
        },
        "primary_keys": {
          "type": "string",
          "title": "Primary Keys",
          "description": "Primary keys seperated by commas e.g. id, other_id. If a primary key is set, updates can be done on the table by selecting incremental loads. The primary key can consist of multiple columns. The primary key of an existing table cannot be changed.",
          "propertyOrder": 120
        }
      }
    }



# Developer portal description properties

## Additional config description

A component should always have a configuration description field in the Developer portal filled in at least to link to additional documentation. Place any additional configuration hints in there, so the user does not need to refer to additional documentation. More information again in the developer documentation guidelines. 




NOTE: The configuration description lives in the git repository and is automatically pushed via CI Pipelines.

# Accessing table column names from input mapping

 Changes to make on https://components.keboola.com/ 

add “simpleTableInput“ value under UI options



The UI schema will in root contain the following:

"_metadata_":{
  type: 'object',
  options: { hidden: true },
  properties: {
    table: {
      type: 'object',
      properties: {
        id: { type: 'string' },
        name: { type: 'string' },
        columns: { type: 'array' },
        primaryKey: { type: 'array' }
      }
    }
  }
}

add watch to load values:

"watch":{
  "columns":"_metadata_.table.columns"
},
"enumSource":"columns"

"coordinates":{
  "type":"object",
  "title":"Sourcecoordinatescolumns",
  "format":"grid",
  "description":"Columnsininputtablewithcoordinatesin<ahref=\"https://en.wikipedia.org/wiki/Decimal_degrees\">decimaldegrees</a>format.",
  "required":[
      "longitude_column",
      "latitude_column"
  ],
  "properties":{
      "longitude_column":{
        "type":"string",
        "title":"Longitudecolumnname",
        "watch":{
            "columns":"_metadata_.table.columns"
        },
        "enumSource":"columns",
        "required":true,
        "propertyOrder":2
      },
      "latitude_column":{
        "type":"string",
        "title":"Latitudecolumnname",
        "watch":{
            "columns":"_metadata_.table.columns"
        },
        "enumSource":"columns",
        "required":true,
        "propertyOrder":1
      }
  },
  "propertyOrder":3
}

# Conditionally changing schema (if then else)

{
  "type": "object",
  "title": "Table configuration",
  "properties": {
    "additional_requests_pars": {
      "type": "array",
      "items": {
        "type": "object",
        "title": "Item",
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "type": "string",
            "title": "Key",
            "enum": [
              "params",
              "cookies",
              "timeout",
              "allow_redirects",
              "proxies",
              "verify"
            ],
            "propertyOrder": 1
          }
        },
        "if": {
          "properties": {
            "key": {
              "const": "cookies"
            }
          }
        },
        "then": {
          "properties": {
            "value": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "title": "Key",
                  "propertyOrder": 1
                },
                "value": {
                  "type": "string",
                  "title": "Value",
                  "propertyOrder": 2
                }
              },
              "title": "Additional requests parameters",
              "format": "table",
              "propertyOrder": 600,
              "options": {
                "dependencies": {
                  "key": "cookies"
                }
              }
            }
          }
        },
        "else": {
          "properties": {
            "value": {
              "type": "boolean"
            }
          }
        }
      },
      "title": "Additional requests parameters",
      "format": "table",
      "propertyOrder": 600
    }
  }
}